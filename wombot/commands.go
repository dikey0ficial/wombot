package main

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
	"math"
	"math/rand"
	"strconv"
	"strings"
	"time"
)

type command struct {
	Name   string
	Is     func([]string, tg.Update) bool
	Action func([]string, tg.Update, User) error
}

var commands = []command{
	{
		Name: "greeting_for_new_chat_members",
		Is: func(args []string, update tg.Update) bool {
			if update.Message.NewChatMembers != nil && len(update.Message.NewChatMembers) != 0 {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.NewChatMembers[0].ID)
			if err != nil {
				return err
			}
			if update.Message.NewChatMembers[0].ID == bot.Self.ID {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(randomString(
						"–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç —á–∞—Ç!1!1! /help@%s –¥–ª—è –∏–Ω—Ñ—ã –æ –∫–æ–º–º–∞–Ω–¥–æ—á–∫–∞—Ö :–∑",
						"–¥–∞—Ä–æ–≤–∞ –≤–æ–º–±—ç—Ç—ã –∏ –≤–æ–º–±—è—Ç–∞. —è –±–æ—Ç—è—Ä–∞. /help@%s -- –∏–Ω—Ñ–∞",
						"–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç —è –±–æ—Ç /help@%s –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
						"–∫–æ—Ä–æ—á–µ, —è –±–æ—Ç —Å –≤–æ–º–±–∞—Ç–∞–º–∏. –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /help@%s",
					), bot.Self.UserName),
					update.Message.Chat.ID,
				)
			} else if isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø [–≤–æ–º–±–æ—Ç](t.me/wombatobot) ‚Äî –±–æ—Ç —Å –≤–æ–º–±–∞—Ç–∞–º–∏. "+
						"–†–µ–∫–æ–º–µ–Ω–¥—É—é –í–∞–º –∑–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å "+
						"–≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞."+
						"–ø–æ–¥—Ä–æ–±–Ω–µ–µ: /help@wombatobot",
					update.Message.Chat.ID, MarkdownParseModeMessage, SetWebPagePreview(false),
				)
			} else {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–æ–º–±–∞—Ç `%s`!", womb.Name), update.Message.Chat.ID)
			}
			return err
		},
	},
	{
		Name: "bad_update_check",
		Is: func(args []string, update tg.Update) bool {
			return update.Message == nil || update.Message.Chat == nil || update.Message.From == nil || args == nil || len(args) == 0
		},
		Action: func([]string, tg.Update, User) error {
			return nil
		},
	},
	{
		Name: "start",
		Is: func(args []string, update tg.Update) bool {
			return (!isGroup(update.Message) && isInList(strings.ToLower(args[0]), []string{"/start", "/—Å—Ç–∞—Ä—Ç"})) || strings.ToLower(args[0]) == "/start@"+bot.Self.UserName
		},
		Action: func(args []string, update tg.Update, womb User) error {
			const longAnswer = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ\n ‚Äî –ó–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞: `–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞`\n ‚Äî –ü–æ–º–æ—â—å: https://telegra.ph/Pomoshch-10-28 (/help)\n ‚Äî –ö–∞–Ω–∞–ª –±–æ—Ç–∞, –≥–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–∞: @wombatobot_channel\n –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
			if isGroup(update.Message) {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ((–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–º–∞–Ω–¥ –≤–æ–º–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å))", update.Message.Chat.ID)
				return err
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, longAnswer, update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "help",
		Is: func(args []string, update tg.Update) bool {
			if isInList(args[0], []string{"/help@" + bot.Self.UserName, "–∫–æ–º–∞–Ω–¥—ã", "/—Ö–µ–ª–ø"}) ||
				(!isGroup(update.Message) && strings.ToLower(args[0]) == "/help") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(update.Message.MessageID, "https://telegra.ph/Pomoshch-10-28", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "about_bot",
		Is: func(args []string, update tg.Update) bool {
			if len(args) != 2 {
				return false
			} else if strings.ToLower(args[0]+" "+args[1]) == "–æ –≤–æ–º–±–æ—Ç–µ" {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(update.Message.MessageID,
				"https://telegra.ph/O-vombote-10-29\n**–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–º–±–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–æ –≤–æ–º–±–∞—Ç–µ`**",
				update.Message.Chat.ID, MarkdownParseModeMessage,
			)
			return err
		},
	},
	{
		Name: "about_wombat",
		Is: func(args []string, update tg.Update) bool {
			if strings.HasPrefix(strings.ToLower(strings.Join(args, " ")), "–æ –≤–æ–º–±–∞—Ç–µ") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			var strID string
			if len(args) == 3 {
				strID = strings.TrimSpace(strings.Join(args[2:], " "))
			} else if len(args) > 3 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!", update.Message.Chat.ID)
				if err != nil {
					return err
				}
			}
			var (
				tWomb User
			)
			if strID == "" {
				if update.Message.ReplyToMessage != nil {
					tWomb.ID = update.Message.ReplyToMessage.From.ID
					if c, err := users.CountDocuments(ctx, bson.M{"_id": tWomb.ID}); err != nil {
						return err
					} else if c == 0 {
						bot.ReplyWithMessage(update.Message.MessageID,
							"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –≤–æ–º–±–∞—Ç–æ–º. (–Ω–∞–ø–∏—â–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –∏ —Å –æ—Ç–≤–µ—Ç–æ–º)",
							update.Message.Chat.ID,
						)
						return nil
					}
					if err := users.FindOne(ctx, bson.M{"_id": tWomb.ID}).Decode(&tWomb); err != nil {
						return err
					}
				} else if isInUsers {
					tWomb = womb
				} else {
					bot.ReplyWithMessage(update.Message.MessageID, "–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID)
					return nil
				}
			} else if len([]rune(strID)) > 64 {
				bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è", update.Message.Chat.ID)
				return nil
			} else if !isValidName(strID) {
				bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è!", update.Message.Chat.ID)
				return nil
			} else if rCount, err :=
				users.CountDocuments(ctx, bson.M{"name": cins(strID)}); err == nil && rCount != 0 {
				err := users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
				if err != nil {
					return err
				}
			} else if err != nil {
				return err
			} else {
				bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), update.Message.Chat.ID)
				return nil
			}
			var clname string
			if c, err := clans.CountDocuments(ctx, bson.M{"members": tWomb.ID}); err != nil {
				return err
			} else if c != 0 {
				var uClan Clan
				if err := clans.FindOne(ctx, bson.M{"members": tWomb.ID}).Decode(&uClan); err != nil {
					return err
				}
				clname = "\\[" + uClan.Tag + "]"
			}
			strTitles := ""
			tCount := len(tWomb.Titles)
			if tCount != 0 {
				for _, id := range tWomb.Titles {
					rCount, err := titlesC.CountDocuments(ctx, bson.M{"_id": id})
					if err != nil {
						return err
					}
					if rCount == 0 {
						strTitles += fmt.Sprintf("–û—à–∏–±–∫–∞: —Ç–∏—Ç—É–ª–∞ —Å ID %d –Ω–µ—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin) |", id)
						continue
					}
					elem := Title{}
					err = titlesC.FindOne(ctx, bson.M{"_id": id}).Decode(&elem)
					if err != nil {
						return err
					}
					strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
				}
				strTitles = strings.TrimSuffix(strTitles, " | ")
			} else {
				strTitles = "–Ω–µ—Ç"
			}
			var sl string = "–ù–µ —Å–ø–∏—Ç"
			if tWomb.Sleep {
				sl = "–°–ø–∏—Ç"
			} else {
				sl = "–ù–µ —Å–ø–∏—Ç"
			}
			abimg, err := getImgs(imgsC, "about")
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID, randImg(abimg), fmt.Sprintf(
				"–í–æ–º–±–∞—Ç [%s](tg://user?id=%d) %s\n–¢–∏—Ç—É–ª—ã: %s\n üëÅ %d XP\n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è\n ‚ö° %d –º–æ—â–∏\n üí∞ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ\n üí§ %s",
				tWomb.Name, tWomb.ID, clname, strTitles, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money, sl),
				update.Message.Chat.ID, MarkdownParseModePhoto,
			)
			return err
		},
	},
	{
		Name: "support",
		Is: func(args []string, update tg.Update) bool {
			txt := strings.ToLower(strings.Join(args, " "))
			if isPrefixInList(txt, []string{"–æ–¥–º–µ–Ω!", "/admin@" + bot.Self.UserName, "/support@" + bot.Self.UserName, "/bug@" + bot.Self.UserName}) {
				return true
			} else if !isGroup(update.Message) && isPrefixInList(txt, []string{"/admin", "/support", "/bug", "/–∞–¥–º–∏–Ω", "/—Å–∞–ø", "/—Å–∞–ø–ø–æ—Ä—Ç", "/–±–∞–≥"}) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				isGr           = "–∏–∑ —á–∞—Ç–∞ "
				isInUsers, err = getIsInUsers(update.Message.From.ID)
				txt            = strings.ToLower(strings.Join(args, " "))
			)
			if err != nil {
				return err
			}
			if isGroup(update.Message) {
				isGr = "–∏–∑ –≥—Ä—É–ø–ø—ã "
			}
			if len(args) < 2 {
				if update.Message.ReplyToMessage == nil {
					bot.ReplyWithMessage(update.Message.MessageID, "–¢—ã —á–∞–≤–æ... –≥–¥–µ –ø–∏—Å—å–º–æ??", update.Message.Chat.ID)
					return nil
				}
				r := update.Message.ReplyToMessage
				_, serr := bot.SendMessage(
					fmt.Sprintf(
						"%d %d \n–ø–∏—Å—å–º–æ %s(%d @%s) –æ—Ç %d (@%s isInUsers: %v) (mt: %s bt: %s), –æ—Ç–≤–µ—á–∞—é—â–µ–µ –Ω–∞: \n%s\n(id:%d fr:%d @%s) (mt:%s, bt: %s)",
						update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName,
						update.Message.From.ID, update.Message.From.UserName, isInUsers,
						time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
						r.Text, r.MessageID, r.From.ID, r.From.UserName,
						time.Unix(int64(r.Date), 0).String(), time.Now().String(),
					),
					conf.SupChatID,
				)
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID)
				if err != nil {
					if serr != nil {
						return fmt.Errorf("Two errors: %v and %v", serr, err)
					}
					return err
				}
			} else {
				if update.Message.ReplyToMessage == nil {
					msg := strings.Join(args[1:], " ")
					_, serr := bot.SendMessage(
						fmt.Sprintf(
							"%d %d \n–ø–∏—Å—å–º–æ %s%d (@%s) –æ—Ç %d (@%s isInUsers: %v): \n%s\n(mt: %s bt:%s)",
							update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName, update.Message.From.ID,
							update.Message.From.UserName, isInUsers, msg,
							time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
						),
						conf.SupChatID,
					)
					_, err := bot.ReplyWithMessage(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID)
					if err != nil {
						if serr != nil {
							return fmt.Errorf("Two errors: %v and %v", serr, err)
						}
						return err
					}
				} else {
					r := update.Message.ReplyToMessage
					_, serr := bot.SendMessage(
						fmt.Sprintf(
							"%d %d \n–ø–∏—Å—å–º–æ %s(%d @%s) –æ—Ç %d (@%s isInUsers: %v), –æ—Ç–≤–µ—á–∞—é—â–µ–µ –Ω–∞: \n%s\n(id:%d fr:%d @%s) (mt: %s bt: %s) —Å —Ç–µ–∫—Å—Ç–æ–º:\n%s\n(mt: %s bt: %s)",
							update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName,
							update.Message.From.ID, update.Message.From.UserName,
							isInUsers, r.Text, r.MessageID, r.From.ID, r.From.UserName,
							time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
							txt,
							time.Unix(int64(r.Date), 0).String(), time.Now().String(),
						), conf.SupChatID,
					)
					_, err := bot.ReplyWithMessage(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID)
					if err != nil {
						if serr != nil {
							return fmt.Errorf("Two errors: %v and %v", serr, err)
						}
						return err
					}
				}
			}
			return nil
		},
	},
	{
		Name: "take_wombat",
		Is: func(args []string, update tg.Update) bool {
			return isInList(
				strings.ToLower(strings.Join(args, " ")),
				[]string{"–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞", "–∫—É–ø–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ —É –∞—Ä–∞–±–æ–≤", "—Ö–æ—á—É –≤–æ–º–±–∞—Ç–∞"},
			)
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if isInUsers {
				_, err := bot.ReplyWithMessage(update.Message.MessageID,
					"–£ —Ç–µ–±—è –∫–∞–∫ –±—ã —É–∂–µ –µ—Å—Ç—å –≤–æ–º–±–∞—Ç –ª–æ–ª–∫–µ–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫`",
					update.Message.Chat.ID,
				)
				return err
			}
			newWomb := User{
				ID:     update.Message.From.ID,
				Name:   "–í–æ–º–±–∞—Ç_" + strconv.Itoa(int(update.Message.From.ID)),
				XP:     0,
				Health: 5,
				Force:  2,
				Money:  10,
				Titles: []uint16{},
				Sleep:  false,
			}
			_, err = users.InsertOne(ctx, &newWomb)
			if err != nil {
				return err
			}
			iiuCache.Put(update.Message.From.ID, true)
			newimg, err := getImgs(imgsC, "new")
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID,
				randImg(newimg), fmt.Sprintf(
					"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–º–±–∞—Ç! –ï–º—É –≤—ã–¥–∞–ª–æ—Å—å –∏–º—è `%s`. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π `–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è [–∏–º—è]` –∑–∞ 3 –º–æ–Ω–µ—Ç—ã",
					newWomb.Name),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "schweine",
		Is: func(args []string, update tg.Update) bool {
			if strings.HasPrefix(strings.ToLower(args[0]), "—Ö—Ä—é") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			schweineImgs, err := getImgs(imgsC, "schweine")
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID,
				randImg(schweineImgs),
				"–ê–•–¢–£–ù–ì –®–í–ê–ô–ù–ï –£–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò",
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "delete_wombat",
		Is: func(args []string, update tg.Update) bool {
			return isInList(
				strings.ToLower(strings.Join(args, " ")),
				[]string{
					"–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫", "–ø—Ä–æ–¥–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –∞—Ä–∞–±–∞–º",
					"—Å–ª–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ –≤ —É–Ω–∏—Ç–∞–∑", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å –≤–æ–º–±–∞—Ç–∞",
				},
			)
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID)
				return err
			}
			if hasTitle(1, womb.Titles) {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –ª–∏—à–µ–Ω—ã –ø—Ä–∞–≤–∞ —É–Ω–∏—á—Ç–æ–∂–∞—Ç—å –≤–æ–º–±–∞—Ç–∞; –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /admin –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if c != 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ; –≤—ã–π–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –∏–∑ –∫–ª–∞–Ω–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			_, err = users.DeleteOne(ctx, wombFilter(womb))
			if err != nil {
				return err
			}
			iiuCache.Put(update.Message.From.ID, false)
			kill, err := getImgs(imgsC, "kill")
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID,
				randImg(kill), "–í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —à—Ç—É–∫–∞. –í—ã - –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å—É—â–µ—Å—Ç–≤–æ", update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "change_name",
		Is: func(args []string, update tg.Update) bool {
			return strings.HasPrefix(
				strings.ToLower(strings.Join(args, " ")),
				"–ø–æ–º–µ–Ω—è—Ç—å –∏–º—è",
			)
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–î–∞ –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥, –≤—ã –≤–æ–±–º–∞—Ç–∞ –∑–∞–±—ã–ª–∏ –∑–∞–≤–µ—Å—Ç–∏!!!!!!!", update.Message.From.ID)
				return err
			} else if len(args) != 3 {
				if len(args) == 2 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–≤–æ–º–±–∞—Ç—É –Ω—É–∂–Ω–æ –∏–º—è! —Ç—ã –µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª", update.Message.From.ID)
				} else {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...", update.Message.From.ID)
				}
				return err
			} else if hasTitle(1, womb.Titles) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢–µ–±–µ –Ω–µ–ª—å–∑—è, —Ç—ã —Å–ø–∞–º–µ—Ä (–æ—Å–ø–æ—Ä–∏—Ç—å: /admin)", update.Message.From.ID)
				return err
			} else if womb.Money < 3 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ú–∞–ª–æ —à–∏—à–µ–π –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!", update.Message.From.ID)
				return err
			}
			name := args[2]
			if womb.Name == name {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–∑–∞—á–µ–º", update.Message.From.ID)
				return err
			} else if len([]rune(name)) > 64 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º!", update.Message.From.ID)
				return err
			} else if isInList(name, []string{"–≤o–º–±o—Ç", "–≤o–º–±o—Ç", "–≤–æ–º–±o—Ç", "–≤–æ–º–±–æ—Ç", "–±–æ—Ç", "bot", "–±o—Ç", "b–æt",
				"–∞–≤—Ç–æ", "auto"}) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢–∞–∫–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã –∑–∞–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è", update.Message.From.ID)
				return err
			} else if !isValidName(name) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è:(\n", update.Message.From.ID)
				return err
			}
			rCount, err := users.CountDocuments(ctx, bson.M{"name": cins(name)})
			if err != nil {
				return err
			} else if rCount != 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–ù–∏–∫–Ω–µ–π–º `%s` —É–∂–µ –∑–∞–Ω—è—Ç(", name), update.Message.From.ID)
				return err
			}
			womb.Money -= 3
			caseName := strings.Join(args[2:], " ")
			womb.Name = caseName
			err = docUpd(womb, bson.M{"_id": update.Message.From.ID}, users)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID,
				fmt.Sprintf("–¢–µ–ø–µ—Ä—å –≤–∞—à–µ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∑–æ–≤—É—Ç %s. –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è–ª–∏ 3 —à–∏—à–∞", caseName),
				update.Message.From.ID,
			)
			return err
		},
	},
	{
		Name: "find_money",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(strings.Join(args, " ")) == "–ø–æ–∏—Å–∫ –¥–µ–Ω–µ–≥"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ê —Ç—ã –∫—É–¥–∞? –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", update.Message.Chat.ID)
				return err
			}

			if womb.Money < 1 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–û—Ö—Ä–∞–Ω–Ω–∏–∫–∏ —Ç–µ–±—è –ø—Ä–æ–≥–Ω–∞–ª–∏; –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç —à–∏—à –∑–∞ –ø—Ä–æ—Ö–æ–¥, –∞ —É —Ç–µ–±—è –Ω–∏ —à–∏—à–∞ –Ω–µ—Ç", update.Message.Chat.ID)
				return err
			}
			womb.Money--
			rand.Seed(time.Now().UnixNano())
			if ch := rand.Int(); ch%2 == 0 || hasTitle(2, womb.Titles) && (ch%2 == 0 || ch%3 == 0) {
				rand.Seed(time.Now().UnixNano())
				win := rand.Intn(9) + 1
				womb.Money += uint32(win)
				if addXP := rand.Intn(512 - 1); addXP < 5 {
					womb.XP += uint32(addXP)
					_, err = bot.ReplyWithMessage(update.Message.MessageID,
						fmt.Sprintf(
							"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π, –∞ –µ—â—ë –≤–∞–º –¥–∞–ª–∏ %d XP! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ –∏ %d XP",
							win, addXP, womb.Money, womb.XP,
						),
						update.Message.Chat.ID,
					)
				} else {
					_, err = bot.ReplyWithMessage(update.Message.MessageID,
						fmt.Sprintf(
							"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π! –¢–µ–ø–µ—Ä—å –∏—Ö —É –≤–∞—Å –ø—Ä–∏ —Å–µ–±–µ %d", win, womb.Money,
						),
						update.Message.Chat.ID,
					)
				}
				if err != nil {
					return err
				}
			} else {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID, "–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –æ–¥–∏–Ω —à–∏—à –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞–º –¥–µ–Ω–µ–∂–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏, –Ω–æ —É–≤—ã, –≤—ã —Ç–∞–∫ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –Ω–∞—à–ª–∏",
					update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
			}
			return docUpd(womb, wombFilter(womb), users)
		},
	},
	{
		Name: "shop",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(strings.Join(args, " ")) == "–º–∞–≥–∞–∑–∏–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(
				update.Message.MessageID,
				strings.Join(
					[]string{
						"–ú–∞–≥–∞–∑–∏–Ω:",
						fmt.Sprintf(" ‚Äî 1 –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî %d —à", 5+womb.XP%100),
						fmt.Sprintf(" ‚Äî 1 –º–æ—â—å ‚Äî %d —à", 3+womb.XP%100),
						" ‚Äî –ö–≤–µ—Å ‚Äî 256 —à",
						" ‚Äî –í–∞–¥—à–∞–º ‚Äî 250'000 —à",
						"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É '–∫—É–ø–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ–±—ä–µ–∫—Ç–∞] ([–∫–æ–ª-–≤–æ])",
					},
					"\n",
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "buy",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∫—É–ø–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∫—É–ø–∏—Ç—å", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–º–±–∞—Ç–æ–≤ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å (–Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω)", update.Message.Chat.ID)
				return err
			}
			switch strings.ToLower(args[1]) {
			case "–∑–¥–æ—Ä–æ–≤—å—è":
				fallthrough
			case "–∑–¥–æ—Ä–æ–≤—å–µ":
				if len(args) > 3 {
					_, err := bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...", update.Message.Chat.ID)
					return err
				}
				var amount uint32 = 1
				if len(args) == 3 {
					if val, err := strconv.ParseUint(args[2], 10, 32); err == nil {
						if val == 0 {
							_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–¥–Ω–∞ —à–∏–∑–∞ –∏ –µ—â—ë –æ–¥–Ω–∞ —à–∏–∑–∞", update.Message.Chat.ID)
							return err
						}
						amount = uint32(val)
					} else {
						_, err = bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —Ü–µ–ª—ã–º –∏ –º–µ–Ω—å—à–µ 2^32", update.Message.Chat.ID)
						return err
					}
				}

				var costOfOne uint32 = 5 + womb.XP%100

				if womb.Money < uint32(amount)*costOfOne {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						fmt.Sprintf(
							"–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –∑–¥–æ—Ä–æ–≤—å–µ = %d —à–∏—à–µ–π",
							costOfOne,
						),
						update.Message.Chat.ID,
					)
					return err
				}
				if uint64(womb.Health+amount) > uint64(math.Pow(2, 32)) {
					_, err = bot.ReplyWithMessage(update.Message.MessageID,
						"–û—à–∏–±–∫–∞: –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è (2 –≤ 32 —Å—Ç–µ–ø–µ–Ω–∏). –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Å –≤–æ–∑–º—É—â–∞–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin",
						update.Message.Chat.ID,
					)
					return err
				}
				womb.Money -= uint32(amount) * costOfOne
				womb.Health += amount
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ", womb.Health, womb.Money),
					update.Message.Chat.ID,
				)
				return err
			case "—Å–∏–ª—É":
				fallthrough
			case "—Å–∏–ª–∞":
				fallthrough
			case "—Å–∏–ª—ã":
				fallthrough
			case "–º–æ—â–∏":
				fallthrough
			case "–º–æ—â—å":
				if len(args) > 3 {
					_, err := bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...", update.Message.Chat.ID)
					return err
				}
				var amount uint32 = 1
				if len(args) == 3 {
					if val, err := strconv.ParseUint(args[2], 10, 32); err == nil {
						if val == 0 {
							_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–¥–Ω–∞ —à–∏–∑–∞ –∏ –µ—â—ë –æ–¥–Ω–∞ —à–∏–∑–∞", update.Message.Chat.ID)
							return err
						}
						amount = uint32(val)
					} else {
						_, err = bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —Ü–µ–ª—ã–º –∏ –º–µ–Ω—å—à–µ 2^32", update.Message.Chat.ID)
						return err
					}
				}

				var costOfOne uint32 = 3 + womb.XP%100

				if womb.Money < uint32(amount)*costOfOne {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						fmt.Sprintf(
							"–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –º–æ—â—å = %d —à–∏—à–∞",
							costOfOne,
						),
						update.Message.Chat.ID,
					)
					return err
				}
				if uint64(womb.Force+amount) > uint64(math.Pow(2, 32)) {
					_, err = bot.ReplyWithMessage(update.Message.MessageID,
						"–û—à–∏–±–∫–∞: –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ—â–∏ (2 –≤ 32 —Å—Ç–µ–ø–µ–Ω–∏). –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Å –≤–æ–∑–º—É—â–∞–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin",
						update.Message.Chat.ID,
					)
					return err
				}
				womb.Money -= uint32(amount) * costOfOne
				womb.Force += amount
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —Å–∏–ª—ã –∏ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ", womb.Force, womb.Money),
					update.Message.Chat.ID,
				)
				return err
			case "–≤–∞–¥—à–∞–º–∫–∞":
				fallthrough
			case "–≤–∞–¥—à–∞–º–∞":
				fallthrough
			case "–≤–∞–¥—à–∞–º–∫—É":
				fallthrough
			case "–≤–∞–¥—à–∞–º–∫–∏":
				fallthrough
			case "–≤–∞–¥—à–∞–º":
				if len(args) != 2 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "—É–∂–∞—Å !! —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!!!", update.Message.Chat.ID)
					return err
				} else if hasTitle(4, womb.Titles) {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∞–¥—à–∞–º", update.Message.Chat.ID)
					return err
				} else if womb.Money < 250005 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 250000 + 5)", update.Message.Chat.ID)
					return err
				}
				womb.Money -= 250000
				womb.Titles = append(womb.Titles, 4)
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢–µ–ø–µ—Ä—å –≤—ã –≤–∞–¥—à–∞–º–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å", update.Message.Chat.ID)
			case "–∫–≤–µ—Å":
				fallthrough
			case "–∫–≤–µ—Å–∞":
				fallthrough
			case "–∫–≤–µ—Å—É":
				fallthrough
			case "qwess":
				if len(args) != 2 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!", update.Message.Chat.ID)
					return err
				} else if womb.Money < 256 {
					leps, err := getImgs(imgsC, "leps")
					if err != nil {
						return err
					}
					_, err = bot.ReplyWithPhoto(update.Message.MessageID,
						randImg(leps),
						"–í—ã –ø–æ–¥–æ—à–ª–∏ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –ª–∞—Ä—å–∫—É, –Ω–æ, —É–≤—ã, –∫—Ä–æ–ª–∏–∫-–õ–µ–ø—Å –Ω–∞ –∫–∞—Å—Å–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞–¥–æ 256 —à–∏—à–µ–π, –∞ —É –≤–∞—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–Ω—å—à–µ",
						update.Message.Chat.ID,
					)
					return err
				}
				qwess, err := getImgs(imgsC, "qwess")
				if err != nil {
					return err
				}
				if !(hasTitle(2, womb.Titles)) {
					womb.Titles = append(womb.Titles, 2)
					womb.Money -= 256
					err = docUpd(womb, wombFilter(womb), users)
					if err != nil {
						return err
					}
					_, err = bot.ReplyWithPhoto(update.Message.MessageID,
						randImg(qwess),
						"–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–µ—Å–Ω–æ–≥–æ –≤–∫—É—Å–∞ –∫–≤–µ—Å —É –∫—Ä–æ–ª–∏–∫–∞-–õ–µ–ø—Å–∞ –≤ –ª–∞—Ä—å–∫–µ –∑–∞ 256 —à–∏—à–µ–π. –ì–ª–æ—Ç–Ω—É–≤ —ç—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫, –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª —Å ID 2",
						update.Message.Chat.ID,
					)
				} else {
					womb.Money -= 256
					err = docUpd(womb, wombFilter(womb), users)
					if err != nil {
						return err
					}
					if err != nil {
						return err
					}
					_, err = bot.ReplyWithPhoto(update.Message.MessageID,
						randImg(qwess),
						"–í—ã –≤–Ω–æ–≤—å –∫—É–ø–∏–ª–∏ –≤–∫—É—Å–Ω–æ–≥–æ –∫–≤–µ—Å–∞ —É —Ç–æ–≥–æ –∂–µ –∫—Ä–æ–ª–∏–∫–∞-–õ–µ–ø—Å–∞ –≤ —Ç–æ–º –∂–µ –ª–∞—Ä—å–∫–µ –∑–∞ 256 —à–∏—à–µ–π. \"–û–Ω —Ç–∞–∫ –æ—Å–≤–µ–∂–∞–µ—Ç, —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —á–µ–ª–æ–≤–µ–∫–æ–º\" ‚Äî –¥—É–º–∞–µ—Ç–µ –≤—ã. –ê—Ö, –∫–∞–∫ –≤–∫—É—Å—ë–Ω –∫–≤–µ—Å!",
						update.Message.Chat.ID,
					)
					return err
				}
			default:
				_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–ß—Ç–æ —Ç–∞–∫–æ–µ %s?", args[1]), update.Message.Chat.ID)
				return err
			}
			return nil
		},
	},
	{
		Name: "about_title",
		Is: func(args []string, update tg.Update) bool {
			return strings.HasPrefix(strings.ToLower(strings.Join(args, " ")), "–æ —Ç–∏—Ç—É–ª–µ")
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) < 3 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π ID —Ç–∏—Ç—É–ª–∞", update.Message.Chat.ID)
				return err
			}
			strID := strings.Join(args[2:], " ")
			i, err := strconv.ParseInt(strID, 10, 64)
			if err != nil {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–æ —Ç–∏—Ç—É–ª–µ {ID —Ç–∏—Ç—É–ª–∞}`", update.Message.Chat.ID)
				return err
			} else {
			}
			ID := uint16(i)
			rCount, err := titlesC.CountDocuments(ctx, bson.M{"_id": ID})
			if err != nil {
				return err
			}
			if rCount == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏—Ç—É–ª–∞ –ø–æ ID %d", ID), update.Message.Chat.ID)
				return err
			}
			elem := Title{}
			err = titlesC.FindOne(ctx, bson.M{"_id": ID}).Decode(&elem)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("%s | ID: %d\n%s", elem.Name, ID, elem.Desc), update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "sleep",
		Is: func(args []string, update tg.Update) bool {
			return isInList(strings.ToLower(strings.Join(args, " ")), []string{"–ª–µ—á—å —Å–ø–∞—Ç—å", "—Å–ø–æ–∫–µ", "—Å–ø–∞—Ç—å", "—Å–ø–æ—Ç—å"})
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞, –∏–¥–∏ —Å–ø–∏ —Å–∞–º", update.Message.Chat.ID)
				return err
			} else if womb.Sleep {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢–≤–æ–π –≤–æ–º–±–∞—Ç —É–∂–µ —Å–ø–∏—Ç. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è` (–ª–æ–≥–∏–∫–∞)", update.Message.Chat.ID)
				return err
			}
			womb.Sleep = true
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			sleep, err := getImgs(imgsC, "sleep")
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID, randImg(sleep), "–í—ã –ª–µ–≥–ª–∏ —Å–ø–∞—Ç—å. –°–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–Ω–∞!", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "unsleep",
		Is: func(args []string, update tg.Update) bool {
			return isInList(strings.ToLower(strings.Join(args, " ")), []string{"–¥–æ–±—Ä—É—Ç—Ä–æ", "–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è", "–Ω–µ —Å–ø–∞—Ç—å", "–Ω–µ —Å–ø–æ—Ç—å", "—Ä–æ—Ç–∞ –ø–æ–¥—ä—ë–º"})
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞, –±—É–¥–∏ —Å–µ–±—è —Å–∞–º", update.Message.Chat.ID)
				return err
			} else if !womb.Sleep {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢–≤–æ–π –≤–æ–º–±–∞—Ç –∏ —Ç–∞–∫ –Ω–µ —Å–ø–∏—Ç, –º–æ–∂–µ—Ç —Ç—ã —Ö–æ—Ç–µ–ª –ª–µ—á—å —Å–ø–∞—Ç—å? (–∫–æ–º–∞–Ω–¥–∞ `–ª–µ—á—å —Å–ø–∞—Ç—å` (–æ–ø—è—Ç—å –ª–æ–≥–∏–∫–∞))",
					update.Message.Chat.ID,
				)
				return err
			}
			womb.Sleep = false
			var msg string = "–í–æ–º–±–∞—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–∏—à–µ—Å—Ç–≤–∏–π"
			rand.Seed(time.Now().UnixNano())
			if rand.Intn(2) == 1 {
				switch rand.Intn(9) {
				case 0:
					i := uint32(rand.Intn(15) + 1)
					womb.Health += i
					msg = fmt.Sprintf("–í–æ–º–±–∞—Ç –æ—Ç–ª–∏—á–Ω–æ –≤—ã—Å–ø–∞–ª—Å—è. –û—Ñ–∏–≥–µ–Ω–Ω—ã–π —Å–æ–Ω –µ–º—É –¥–∞–ª %d –∑–¥–æ—Ä–æ–≤—å—è", i)
				case 1:
					i := uint32(rand.Intn(10) + 1)
					womb.Force += i
					msg = fmt.Sprintf("–í—Å—Ç–∞–≤, –≤–æ–º–±–∞—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–∏–ª—É –≤ —Å–≤–æ–∏—Ö –ª–∞–ø–∞—Ö! +%d –º–æ—â–∏", i)
				case 3:
					i := uint32(rand.Intn(100) + 1)
					womb.Money += i
					msg = fmt.Sprintf("–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤–æ–º–±–∞—Ç —É–≤–∏–¥–µ–ª –º–µ—à–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π %d —à–∏—à–µ–π. –ö—Ç–æ –±—ã –º–æ–≥ –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å?", i)
				case 4:
					if womb.Money > 50 {
						womb.Money = 50
					} else if womb.Money > 10 {
						womb.Money = 10
					} else {
						break
					}
					msg = fmt.Sprintf("–£–∂–∞—Å!!! –í–∞—Å –æ–±–æ–∫—Ä–∞–ª–∏!!! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ!", womb.Money)
				case 5:
					if womb.Health <= 5 {
						break
					}
					womb.Health--
					msg = "–®–∞—Ç–∞—è—Å—å, –≤–æ–º–±–∞—Ç –≤—Å—Ç–∞–ª —Å –∫—Ä–æ–≤–∞—Ç–∏. –û–Ω —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç —É–∂–∞—Å–Ω–æ. -1 –∑–¥–æ—Ä–æ–≤—å—è"
				case 6:
					if womb.Force <= 2 {
						break
					}
					womb.Force--
					msg = "–í–∞—à –≤–æ–º–±–∞—Ç —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å... -1 –º–æ—â–∏"
				case 7:
					msg = "–í–∞—à –≤–æ–º–±–∞—Ç –≤—Å—Ç–∞–ª –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ —É–ª—ã–±–Ω—É–ª—Å—è..."
				case 8:
					i := uint32(rand.Intn(4) + 1)
					womb.XP += i
					msg = fmt.Sprintf("–í–∞—à –≤–æ–º–±–∞—Ç —É–≤–∏–¥–µ–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–æ–Ω. –ü–æ—á–µ—Å–∞–≤ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç %d XP", i)
				}
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			unsleep, err := getImgs(imgsC, "unsleep")
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID, randImg(unsleep), msg, update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "send_shishes",
		Is: func(args []string, update tg.Update) bool {
			return strings.HasPrefix(strings.ToLower(strings.Join(args, " ")), "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏")
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "—Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º", update.Message.Chat.ID)
				return err
			}
			cargs := args[2:]
			if len(cargs) < 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç(—ã). –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏ [–∫–æ–ª-–≤–æ] [–Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è]`",
					update.Message.Chat.ID,
				)
				return err
			} else if len(cargs) > 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏ [–∫–æ–ª-–≤–æ] [–Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è]`",
					update.Message.Chat.ID,
				)
				return err
			}
			var (
				amount uint64
				err    error
			)
			if amount, err = strconv.ParseUint(cargs[0], 10, 32); err != nil {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —É –í–∞—Å –∫–∞–∫–∏–µ-—Ç–æ —á–∏—Å–ª–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			var ID int64
			name := cargs[1]
			if len([]rune(name)) > 64 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º", update.Message.Chat.ID)
				return err
			} else if !isValidName(name) {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è", update.Message.Chat.ID)
				return err
			} else if rCount, err := users.CountDocuments(
				ctx, bson.M{"name": cins(name)}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", name), update.Message.Chat.ID)
				return err
			}
			var tWomb User
			err = users.FindOne(ctx, bson.M{"name": cins(name)}).Decode(&tWomb)
			if err != nil {
				return err
			}
			ID = tWomb.ID
			if uint64(womb.Money) < amount {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID, "–û—à–∏–±–∫–∞: –Ω–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É —à–∏—à–µ–π –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			if amount == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è",
					update.Message.Chat.ID,
				)
				return err
			}
			if ID == update.Message.From.ID {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢—ã —á–∏—Ç–µ—Ä –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!!! –Ω–∏–¥–∞–º —Ç–µ–±–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏", update.Message.Chat.ID)
				return err
			}
			rCount, err := users.CountDocuments(ctx, bson.M{"_id": ID})
			if err != nil {
				return err
			}
			if rCount == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", ID),
					update.Message.Chat.ID,
				)
				return err
			}
			womb.Money -= uint32(amount)
			tWomb.Money += uint32(amount)
			err = docUpd(tWomb, bson.M{"_id": ID}, users)
			if err != nil {
				return err
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID,
				fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ %d —à–∏—à–µ–π –Ω–∞ —Å—á—ë—Ç %s. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ",
					amount, tWomb.Name, womb.Money), update.Message.Chat.ID,
			)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–µ—Ä–µ–≤—ë–ª –≤–∞–º %d —à–∏—à–µ–π. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ",
				womb.Name, amount, tWomb.Money), ID,
			)
			return err
		},
	},
	{
		Name: "rating",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "—Ä–µ–π—Ç–∏–Ω–≥" || strings.ToLower(args[0]) == "—Ç–æ–ø"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				name  string = "xp"
				queue int8   = -1
			)
			if len(args) >= 2 && len(args) < 4 {
				if isInList(args[1], []string{"—à–∏—à–∏", "–¥–µ–Ω—å–≥–∏", "money"}) {
					name = "money"
				} else if isInList(args[1], []string{"—Ö–ø", "–æ–ø—ã—Ç", "xp", "—Ö—Ä—é"}) {
					name = "xp"
				} else if isInList(args[1], []string{"–∑–¥–æ—Ä–æ–≤—å–µ", "—Ö–∏–ª", "—Ö–µ–∞–ª—Ç—Ö", "health"}) {
					name = "health"
				} else if isInList(args[1], []string{"—Å–∏–ª–∞", "–º–æ—â—å", "force", "–º–æ—â—ä"}) {
					name = "force"
				} else {
					_, err := bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∑–Ω–∞—á–∏—Ç %s", args[1]), update.Message.Chat.ID)
					return err
				}
				if len(args) == 3 {
					if isInList(args[2], []string{"+", "–ø–ª—é—Å", "++", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ"}) {
						queue = 1
					} else if isInList(args[2], []string{"-", "–º–∏–Ω—É—Å", "--", "—É–º–µ–Ω—å—à–µ–Ω–∏–µ"}) {
						queue = -1
					} else {
						_, err := bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∑–Ω–∞—á–∏—Ç %s", args[2]), update.Message.Chat.ID)
						return err
					}
				}
			} else if len(args) != 1 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			opts := options.Find()
			opts.SetSort(bson.M{name: queue})
			opts.SetLimit(10)
			cur, err := users.Find(ctx, bson.M{}, opts)
			if err != nil {
				return err
			}
			var rating []User
			for cur.Next(ctx) {
				var w User
				cur.Decode(&w)
				rating = append(rating, w)
			}
			var msg string = "–¢–æ–ø-10 –≤–æ–º–±–∞—Ç–æ–≤ –ø–æ "
			switch name {
			case "money":
				msg += "—à–∏—à–∞–º "
			case "xp":
				msg += "XP "
			case "health":
				msg += "–∑–¥–æ—Ä–æ–≤—å—é "
			case "force":
				msg += "–º–æ—â–∏ "
			}
			msg += "–≤ –ø–æ—Ä—è–¥–∫–µ "
			if queue == 1 {
				msg += "—É–≤–µ–ª–∏—á–µ–Ω–∏—è:"
			} else if queue == -1 {
				msg += "—É–º–µ–Ω—å—à–µ–Ω–∏—è:"
			} else {
				return err
			}
			msg += "\n"
			for num, w := range rating {
				switch name {
				case "money":
					msg += fmt.Sprintf("%d | [%s](tg://user?id=%d) | %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ\n", num+1, w.Name, w.ID, w.Money)
				case "xp":
					msg += fmt.Sprintf("%d | [%s](tg://user?id=%d) | %d XP\n", num+1, w.Name, w.ID, w.XP)
				case "health":
					msg += fmt.Sprintf("%d | [%s](tg://user?id=%d) | %d –∑–¥–æ—Ä–æ–≤—å—è\n", num+1, w.Name, w.ID, w.Health)
				case "force":
					msg += fmt.Sprintf("%d | [%s](tg://user?id=%d) | %d –º–æ—â–∏\n", num+1, w.Name, w.ID, w.Force)
				}
			}
			msg = strings.TrimSuffix(msg, "\n")
			_, err = bot.ReplyWithMessage(update.Message.MessageID, msg, update.Message.Chat.ID, MarkdownParseModeMessage)
			return err
		},
	},
	// laughter commands
	{
		Name: "want_to_laugh",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(update.Message.Text) == "—Ö–æ—á—É —Ä–∂–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}

			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"—É –í–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞, –∞ –±–µ–∑ –≤–æ–º–±–∞—Ç–∞ –Ω–µ –ø—É—Å—Ç—è—Ç –Ω–∞ —Ä–∂–µ–∫–∏—á",
					update.Message.Chat.ID,
				)
				return err
			}

			if !isGroup(update.Message) {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"—Ä–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö",
					update.Message.Chat.ID,
				)
				return err
			}

			if c, err := laughters.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if c != 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã —É–∂–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∂–µ–∫–∏—á–µ –≤ —ç—Ç–æ–º –∏–ª–∏ –¥—Ä—É–≥–æ–º —á–∞—Ç–µ",
					update.Message.Chat.ID,
				)
				return err
			}

			if c, err := laughters.CountDocuments(ctx, bson.M{"_id": update.Message.Chat.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = laughters.InsertOne(
					ctx,
					bson.M{
						"_id":     update.Message.Chat.ID,
						"active":  true,
						"leader":  update.Message.From.ID,
						"members": []int64{update.Message.From.ID},
					},
				)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–≤—ã –ø–µ—Ä–≤—ã–π –ø–æ–∂–µ–ª–∞–≤—à–∏–π —Ä–∂–∞—Ç—å, —Ç–µ–º —Å–∞–º—ã–º –≤—ã —Å—Ç–∞–ª–∏ –ª–∏–¥–µ—Ä–æ–º —Å–µ–≥–æ–¥–Ω–µ—à–Ω–µ–≥–æ —Ä–∂–∞–Ω—å—è! –æ–Ω–æ –Ω–µ –Ω–∞—á–Ω—ë—Ç—Å—è –±–µ–∑ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã `–Ω–∞—á–∞—Ç—å —Ä–∂–µ–Ω–∏–µ`",
					update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
			} else {
				_, err = laughters.UpdateOne(
					ctx,
					bson.M{
						"_id": update.Message.Chat.ID,
					},
					bson.M{
						"$push": bson.M{
							"members": update.Message.From.ID,
						},
					},
				)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–≤—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ —Å–æ–±—Ä–∞–Ω–∏–µ —Ä–∂–µ–Ω–∏—è!!!",
					update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
			}

			return nil
		},
	},
	{
		Name: "want_not_to_laugh",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(update.Message.Text) == "–Ω–µ —Ö–æ—á—É —Ä–∂–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if c, err := laughters.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –∏ —Ç–∞–∫ –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∂–µ–Ω–∏–∏",
					update.Message.Chat.ID,
				)
				return err
			}
			var (
				nLghter Laughter
				newLead int64 = nLghter.Leader
			)
			err := laughters.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&nLghter)
			if nLghter.Leader == update.Message.From.ID {
				for _, i := range nLghter.Members {
					if i != update.Message.From.ID {
						newLead = i
					}
				}
			}
			_, err = laughters.UpdateOne(
				ctx,
				bson.M{"members": update.Message.From.ID},
				bson.M{
					"$pull": bson.M{
						"members": update.Message.From.ID,
					},
					"$set": bson.M{
						"leader": newLead,
					},
				},
			)
			if err != nil {
				return err
			}

			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø–µ—á–∞–ª—å –≤ —Å–≤–æ–∏—Ö –≥–ª–∞–∑–∞—Ö, –≤—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–∂–∞–Ω–Ω–æ–≥–æ —Å–æ–±—Ä–∞–Ω–∏—è.",
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "laughter_status",
		Is: func(args []string, update tg.Update) bool {
			if len(args) < 2 {
				return false
			}
			return strings.ToLower(strings.Join(args[:2], " ")) == "—Å—Ç–∞—Ç—É—Å —Ä–∂–µ–Ω–∏—è"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}

			var nLghter Laughter

			switch len(args) {
			case 2:
				if !isInUsers {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"—É –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å —Ä–∂–µ–Ω–∏—è. "+
							"–¥–æ–±–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –¥—Ä—É–≥–æ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∏–ª–∏ `—á–∞—Ç` –∫ –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–æ–º–±–∞—Ç–∞ –∏–ª–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
						update.Message.Chat.ID,
					)
					return err
				}
				if c, err := laughters.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
					return err
				} else if c == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∂–µ–Ω–∏–∏",
						update.Message.Chat.ID,
					)
					return err
				}

				err = laughters.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&nLghter)

				if err != nil {
					return err
				}
			case 3:
				if args[2] == "—á–∞—Ç" {
					if !isGroup(update.Message) {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"—Ä–∂–µ–Ω–∏–µ –±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö",
							update.Message.Chat.ID,
						)
						return err
					}

					if c, err := laughters.CountDocuments(ctx, bson.M{"_id": update.Message.Chat.ID}); err != nil {
						return err
					} else if c == 0 {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"–í —á–∞—Ç–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∂–µ–Ω–∏—è",
							update.Message.Chat.ID,
						)
						return err
					}

					err = laughters.FindOne(ctx, bson.M{"_id": update.Message.Chat.ID}).Decode(&nLghter)

					if err != nil {
						return err
					}

					if !nLghter.Active {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"–í —á–∞—Ç–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∂–µ–Ω–∏—è",
							update.Message.Chat.ID,
						)
						return err
					}
				} else {
					if c, err := users.CountDocuments(ctx, bson.M{"name": cins(args[2])}); err != nil {
						return err
					} else if c == 0 {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"–í–æ–º–±–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
							update.Message.Chat.ID,
						)
						return err
					}

					var tWomb User

					err = users.FindOne(ctx, bson.M{"name": cins(args[2])}).Decode(&tWomb)
					if err != nil {
						return err
					}

					if c, err := laughters.CountDocuments(ctx, bson.M{"members": tWomb.ID}); err != nil {
						return err
					} else if c == 0 {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"–í–æ–º–±–∞—Ç "+tWomb.Name+" –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–∂–µ–Ω–∏–∏",
							update.Message.Chat.ID,
						)
						return err
					}

					err = laughters.FindOne(ctx, bson.M{"members": tWomb.ID}).Decode(&nLghter)
				}
			default:
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"—á—ë—Ç –º–Ω–æ–≥–æ–≤–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}

			var builder strings.Builder

			builder.WriteString("‚Ñπ –†–∂–µ–Ω–∏–µ:\n")

			var wombs = make([]User, 0)

			for _, memb := range nLghter.Members {
				var tWomb User
				err = users.FindOne(ctx, bson.M{"_id": memb}).Decode(&tWomb)
				if err != nil {
					continue
				}
				wombs = append(wombs, tWomb)
			}

			builder.WriteString("  –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∂–µ–Ω–∏—è:\n")

			for _, tWomb := range wombs {
				builder.WriteString(
					fmt.Sprintf("   - [%s](tg://user?id=%d)", tWomb.Name, tWomb.ID),
				)
				if tWomb.ID == nLghter.Leader {
					builder.WriteString(" (–õ–∏–¥–µ—Ä)")
				}
				builder.WriteRune('\n')
			}
			builder.WriteRune('\n')

			if e := time.Now().Sub(nLghter.LastStartTime); e < 24*time.Hour {
				left := (24 * time.Hour) - e
				builder.WriteString(
					fmt.Sprintf(
						"–î–æ —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å %d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç",
						int64(left.Hours()), int64(left.Minutes())-int64(left.Hours())*60,
					),
				)
			}

			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				builder.String(),
				update.Message.Chat.ID,
				MarkdownParseModeMessage,
			)

			return nil
		},
	},
	// subcommand handlers
	{
		Name: "attack",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∞—Ç–∞–∫–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ–ø—Ä–∞–≤–¥–∞", update.Message.Chat.ID)
				return err
			}
			for _, cmd := range attackCommands {
				if cmd.Is(args, update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "wombank",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–≤–æ–º–±–∞–Ω–∫"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ–ø—Ä–∞–≤–¥–∞", update.Message.Chat.ID)
				return err
			}
			for _, cmd := range bankCommands {
				if cmd.Is(args, update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "clans",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∫–ª–∞–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "—É–≥–∞–¥–∞–ª", update.Message.Chat.ID)
				return err
			}
			for _, cmd := range clanCommands {
				if cmd.Is(args, update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, —á–µ—Å—Å–ª–æ–≤–æ", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "devtools",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "devtools"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				return nil
			} else if womb.Titles == nil || !hasTitle(0, womb.Titles) {
				return nil
			}
			for _, cmd := range devtoolsCommands {
				if cmd.Is(args, update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			return nil
		},
	},
	// service commands
	{
		Name: "send_msg",
		Is: func(args []string, update tg.Update) bool {
			s := strings.ToLower(args[0])
			return s == "bot.SendMessage" || s == "send_msg"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if !hasTitle(3, womb.Titles) {
				return nil
			} else if len(args) < 3 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			to, err := strconv.Atoi(args[1])
			if err != nil {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "error converting string to int64", update.Message.Chat.ID)
				return err
			}
			_, err = bot.SendMessage(strings.Join(args[2:], " "), int64(to), MarkdownParseModeMessage)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "reply_to_msg",
		Is: func(args []string, update tg.Update) bool {
			s := strings.ToLower(args[0])
			return s == "bot.ReplyWithMessage" || s == "reply_to_msg"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			debl.Println("!!!")
			if !hasTitle(3, womb.Titles) {
				debl.Println("!!!")
				return nil
			} else if len(args) < 4 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			sto, err := strconv.Atoi(args[1])
			if err != nil {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "error converting #1 string to int64", update.Message.Chat.ID)
				return err
			}
			rto, err := strconv.Atoi(args[2])
			if err != nil {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "error converting #2 string to int64", update.Message.Chat.ID)
				return err
			}
			_, err = bot.ReplyWithMessage(rto, strings.Join(args[3:], " "), int64(sto), MarkdownParseModeMessage)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, "—É—Å–ø–µ—à–Ω–æ!", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "send_photo",
		Is: func(args []string, update tg.Update) bool {
			s := strings.ToLower(args[0])
			return s == "bot.SendPhoto" || s == "send_photo"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if !hasTitle(3, womb.Titles) {
				return nil
			} else if len(args) < 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			_, err := bot.ReplyWithPhoto(update.Message.MessageID, args[1], "", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "photo_id",
		Is: func(args []string, update tg.Update) bool {
			s := strings.ToLower(args[0])
			return s == "photoid" || s == "photo_id"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if !hasTitle(3, womb.Titles) {
				return nil
			} else if len(update.Message.Photo) == 0 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", update.Message.Chat.ID)
				return err
			}
			var msg string
			for _, img := range update.Message.Photo {
				msg += "`" + img.FileID + "`\n"
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, msg, update.Message.Chat.ID, MarkdownParseModeMessage)
			return err
		},
	},
	// support chat processor
	{
		Name: "support_chat_checker",
		Is: func(args []string, update tg.Update) bool {
			return update.Message.Chat.ID == conf.SupChatID && update.Message.ReplyToMessage != nil && update.Message.ReplyToMessage.From.ID == bot.Self.ID
		},
		Action: func(args []string, update tg.Update, womb User) error {
			strMessID := strings.Fields(update.Message.ReplyToMessage.Text)[0]
			omID, err := strconv.ParseInt(strMessID, 10, 64)
			if err != nil {
				return err
			}
			strPeer := strings.Fields(update.Message.ReplyToMessage.Text)[1]
			peer, err := strconv.ParseInt(strPeer, 10, 64)
			if err != nil {
				return err
			}
			if update.Message.From.UserName != "" {
				_, err = bot.ReplyWithMessage(
					int(omID),
					fmt.Sprintf(
						"–û—Ç–≤–µ—Ç –æ—Ç [–∞–¥–º–∏–Ω–∞](t.me/%s): \n%s",
						update.Message.From.UserName,
						update.Message.Text,
					),
					peer,
					MarkdownParseModeMessage, SetWebPagePreview(false),
				)
			} else {
				_, err = bot.ReplyWithMessage(
					int(omID),
					fmt.Sprintf(
						"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ (–¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π: %d): \n%s",
						update.Message.From.ID,
						update.Message.Text,
					),
					peer,
					MarkdownParseModeMessage,
				)
			}
			return err
		},
	},
}

var attackCommands = []command{
	{
		Name: "attack",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–∞—Ç–∞–∫–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(update.Message.MessageID, strings.Repeat("–∞—Ç–∞–∫–∞ ", 42), update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "status",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "—Å—Ç–∞—Ç—É—Å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			var ID int64
			if len(args) == 2 {
				if !isInUsers {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", update.Message.Chat.ID)
					return err
				}
				ID = int64(update.Message.From.ID)
			} else if len(args) > 3 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ê—Ç–∞–∫–∞ —Å—Ç–∞—Ç—É—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			} else {
				strID := args[2]
				if rCount, err := users.CountDocuments(ctx,
					bson.M{"name": cins(strID)}); err != nil {
					return err
				} else if rCount == 0 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∫–Ω–µ–π–º–æ–º `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), update.Message.Chat.ID)
					return err
				}
				var tWomb User
				err = users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
				if err != nil {
					return err
				}
				ID = tWomb.ID
			}
			var at Attack
			if is, isFrom := isInAttacks(ID, attacks); isFrom {
				a, err := getAttackByWomb(ID, true, attacks)
				if err != nil {
					return err
				}
				at = a
			} else if is {
				a, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil {
					return err
				}
				at = a
			} else {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£ —ç—Ç–æ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∞—Ç–∞–∫ –Ω–µ—Ç", update.Message.Chat.ID)
				return err
			}
			var fromWomb, toWomb User
			err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&fromWomb)
			if err != nil {
				return err
			}
			err = users.FindOne(ctx, bson.M{"_id": at.To}).Decode(&toWomb)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–û—Ç: [%s](tg://user?id=%d)\n–ö–æ–º—É: [%s](tg://user?id=%d)\n",
					fromWomb.Name, fromWomb.ID,
					toWomb.Name, toWomb.ID,
				),
				update.Message.Chat.ID,
				MarkdownParseModeMessage,
			)
			return err
		},
	},
	{
		Name: "to",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) < 3 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ê—Ç–∞–∫–∞ –Ω–∞: –Ω–∞ –∫–æ–≥–æ?", update.Message.Chat.ID)
				return err
			} else if len(args) > 3 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ê—Ç–∞–∫–∞ –Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			} else if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤ –≤–∏–¥—É –æ—Å—Ç—É—Ç—Å—Ç–≤–∏—è –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID)
				return err
			} else if womb.Sleep {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–æ –≤—ã –∂–µ —Å–ø–∏—Ç–µ...", update.Message.Chat.ID)
				return err
			}
			strID := args[2]
			var (
				ID    int64
				tWomb User
			)
			if is, isFrom := isInAttacks(update.Message.From.ID, attacks); isFrom {
				at, err := getAttackByWomb(update.Message.From.ID, true, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.To}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					fmt.Sprintf(
						"–í—ã —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç–µ –≤–æ–º–±–∞—Ç–∞ `%s`. –ß—Ç–æ–±—ã –æ—Ç–æ–∑–≤–∞—Ç—å –∞—Ç–∞–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ `–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`",
						aWomb.Name,
					),
					update.Message.Chat.ID,
					MarkdownParseModeMessage,
				)
				return err
			} else if is {
				at, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–í–∞—Å —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç –≤–æ–º–±–∞—Ç `%s`. –ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∞—Ç–∞–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ `–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`",
						aWomb.Name,
					),
					update.Message.Chat.ID,
					MarkdownParseModeMessage,
				)
				return err
			}
			if rCount, err := users.CountDocuments(ctx,
				bson.M{"name": cins(strID)}); err != nil && rCount != 0 {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
						strID),
					update.Message.Chat.ID,
				)
				return err
			}
			err = users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
			if err != nil {
				return err
			}
			ID = tWomb.ID
			if ID == int64(update.Message.MessageID) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "‚Äû–ì–ª–∞–≤–Ω–∞—è –±–æ—Ä—å–±–∞ –≤ –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏ ‚Äî –±–æ—Ä—å–±–∞ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π‚Äú (c) –∫–∞–∫–æ–π-—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ", update.Message.From.ID)
				return err
			}
			err = users.FindOne(ctx, bson.M{"_id": ID}).Decode(&tWomb)
			if err != nil {
				return err
			}
			if tWomb.ID == womb.ID {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "‚Äû–ì–ª–∞–≤–Ω–∞—è –±–æ—Ä—å–±–∞ –≤ –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏ ‚Äî –±–æ—Ä—å–±–∞ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π‚Äú (c) –∫–∞–∫–æ–π-—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ", update.Message.From.ID)
				return err
			} else if tWomb.Sleep {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–í–æ–º–±–∞—Ç %s —Å–ø–∏—Ç. –ï–≥–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è",
						tWomb.Name,
					),
					update.Message.Chat.ID,
				)
				return err
			} else if is, isFrom := isInAttacks(ID, attacks); isFrom {
				at, err := getAttackByWomb(ID, true, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.To}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID, fmt.Sprintf(
						"%s —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç –≤–æ–º–±–∞—Ç–∞ %s. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ %s —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É",
						strID, aWomb.Name, strID,
					),
					update.Message.Chat.ID,
					MarkdownParseModeMessage,
				)
				return err
			} else if is {
				at, err := getAttackByWomb(int64(update.Message.MessageID), false, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–í–æ–º–±–∞—Ç %s —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç—Å—è %s. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ %s —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É",
						strID, aWomb.Name, strID,
					),
					update.Message.Chat.ID,
				)
				return err
			}
			var newAt = Attack{
				ID:   strconv.Itoa(int(update.Message.From.ID)) + "_" + strconv.Itoa(int(ID)),
				From: int64(update.Message.From.ID),
				To:   ID,
			}
			_, err = attacks.InsertOne(ctx, newAt)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å %s. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞!\n–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`",
					tWomb.Name,
				),
				update.Message.Chat.ID,
			)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(
				fmt.Sprintf(
					"–£–∂–∞—Å! –í–∞—Å –∞—Ç–∞–∫—É–µ—Ç %s. –ü—Ä–µ–¥–ø—Ä–∏–º–∏—Ç–µ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –º–µ—Ä—ã: –æ—Ç–º–µ–Ω–∏—Ç–µ –∞—Ç–∞–∫—É (`–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`) –∏–ª–∏ –ø—Ä–∏–º–∏—Ç–µ (`–∞—Ç–∞–∫–∞ –ø—Ä–∏–Ω—è—Ç—å`)",
					womb.Name,
				),
				tWomb.ID,
			)
			return err
		},
	},
	{
		Name: "cancel",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–æ—Ç–º–µ–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) > 2 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			} else if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–∫–∞–∫–∞—è –∞—Ç–∞–∫–∞, —É —Ç–µ–±—è –≤–æ–±–º–∞—Ç–∞ –Ω–µ—Ç", update.Message.Chat.ID)
				return err
			}
			var at Attack
			if is, isFrom := isInAttacks(update.Message.From.ID, attacks); isFrom {
				a, err := getAttackByWomb(update.Message.From.ID, true, attacks)
				if err != nil {
					return err
				}
				at = a
			} else if is {
				a, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil {
					return err
				}
				at = a
			} else {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ê—Ç–∞–∫–∏ —Å –≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...", update.Message.Chat.ID)
				return err
			}
			_, err = attacks.DeleteOne(ctx, bson.M{"_id": at.ID})
			if err != nil {
				return err
			}
			can0, err := getImgs(imgsC, "cancel_0")
			if err != nil {
				return err
			}
			can1, err := getImgs(imgsC, "cancel_1")
			if err != nil {
				return err
			}
			if at.From == int64(update.Message.From.ID) {
				_, err = bot.ReplyWithPhoto(update.Message.MessageID, randImg(can0), "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∞—Ç–∞–∫—É", update.Message.Chat.ID)
				if err != nil {
					return err
				}
				_, err = bot.SendPhoto(
					randImg(can1),
					fmt.Sprintf(
						"–í–æ–º–±–∞—Ç %s —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å –≤–æ–º–±–∞—Ç–∞ –¥–æ–º–æ–π. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –∞—Ç–∞–∫",
						womb.Name,
					), at.To,
				)
				return err
			}
			_, err = bot.ReplyWithPhoto(update.Message.MessageID, randImg(can0), "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∞—Ç–∞–∫—É", update.Message.Chat.ID)
			if err != nil {
				return err
			}
			_, err = bot.SendPhoto(randImg(can1),
				fmt.Sprintf(
					"–í–æ–º–±–∞—Ç %s –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞–ª –≤–∞–º –≤ –≤–æ–π–Ω–µ. –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –∞—Ç–∞–∫",
					womb.Name,
				), at.From,
			)
			return err
		},
	},
	{
		Name: "acccept",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–ø—Ä–∏–Ω—è—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) > 2 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ê—Ç–∞–∫–∞ –ø—Ä–∏–Ω—è—Ç—å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			} else if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", update.Message.Chat.ID)
				return err
			}
			var at Attack
			if is, isFrom := isInAttacks(update.Message.From.ID, attacks); isFrom {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù—É —Ç—ã —á–æ... –∞—Ç–∞–∫—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫–æ–≥–æ –∞—Ç–∞–∫—É—é—Ç...", update.Message.Chat.ID)
				return err
			} else if is {
				a, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil {
					return err
				}
				at = a
			} else {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–∞–º –Ω–µ—á–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å...", update.Message.Chat.ID)
				return err
			}
			rCount, err := users.CountDocuments(ctx, bson.M{"_id": at.From})
			if err != nil {
				return err
			} else if rCount < 1 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID,
					"–ù—É —Ç—ã —á–∞–≤–æ... –°–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ö–∞–∫ –≤–æ–æ–±—â–µ –º—ã —Ç–∞–∫–æ–µ –¥–æ–ø—É—Å—Ç–∏–ª–∏?! (–æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /admin)",
					update.Message.Chat.ID,
				)
				return err
			}
			var tWomb User
			err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&tWomb)
			if err != nil {
				return err
			}
			atimgs, err := getImgs(imgsC, "attacks")
			if err != nil {
				return err
			}
			im := randImg(atimgs)
			ph1, err := bot.ReplyWithPhoto(update.Message.MessageID, im, "", update.Message.Chat.ID)
			if err != nil {
				return err
			}
			ph2, err := bot.SendPhoto(im, "", tWomb.ID)
			if err != nil {
				return err
			}
			war1, err := bot.ReplyWithMessage(ph1, "–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –≤–æ–º–±–æ–π!", update.Message.Chat.ID)
			if err != nil {
				return err
			}
			war2, err := bot.ReplyWithMessage(ph2, fmt.Sprintf(
				"–ê–ê–ê–ê –í–ê–ô–ù–ê–ê–ê–ê–ê!!!\n –í–æ–º–±–∞—Ç %s –≤—Å—ë –∂–µ –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
				womb.Name), tWomb.ID,
			)
			if err != nil {
				return err
			}
			time.Sleep(5 * time.Second)
			h1, h2 := int(womb.Health), int(tWomb.Health)
			for _, round := range []int{1, 2, 3} {
				f1 := uint32(2 + rand.Intn(int(womb.Force-1)))
				f2 := uint32(2 + rand.Intn(int(tWomb.Force-1)))
				err = bot.EditMessage(war1, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n -–í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d",
					round, h1, f1, tWomb.Name, h2), update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
				err = bot.EditMessage(war2, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d",
					round, h2, f2, womb.Name, h1), tWomb.ID,
				)
				if err != nil {
					return err
				}
				time.Sleep(3 * time.Second)
				h1 -= int(f2)
				h2 -= int(f1)
				err = bot.EditMessage(war1, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - üíî —É–¥–∞—Ä: %d",
					round, h1, f1, tWomb.Name, h2, f2), update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
				err = bot.EditMessage(war2, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - üíî —É–¥–∞—Ä: %d",
					round, h2, f2, womb.Name, h1, f1), tWomb.ID,
				)
				if err != nil {
					return err
				}
				time.Sleep(5 * time.Second)
				if int(h2)-int(f1) <= 5 && int(h1)-int(f2) <= 5 {
					err = bot.EditMessage(war1,
						"–í—ã –æ–±–∞ —Å–¥–æ—Ö–ª–∏!!!)\n–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –Ω–æ –∑–∞—Ç–æ –¥–∞.",
						update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2,
						"–í—ã –æ–±–∞ —Å–¥–æ—Ö–ª–∏!!!)\n–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –Ω–æ –∑–∞—Ç–æ –¥–∞.",
						tWomb.ID,
					)
					if err != nil {
						return err
					}
					time.Sleep(5 * time.Second)
					break
				} else if int(h2)-int(f1) <= 5 {
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π —Å–∏–ª–µ –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–∏—à–µ–Ω–∏—é —É –¥—Ä—É–≥–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), tWomb.ID,
					)
					if err != nil {
						return err
					}
					time.Sleep(3 * time.Second)
					h1c := int(womb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					f1c := int(womb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					mc := int((rand.Intn(int(womb.Health)) + 1) / 2)
					womb.Health += uint32(h1c)
					womb.Force += uint32(f1c)
					womb.Money += uint32(mc)
					womb.XP += 10
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
						womb.Name, h1c, f1c, mc, womb.XP, womb.Health, womb.Force, womb.Money), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					tWomb.Health = 5
					tWomb.Money = 50
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω—É–ª–∏–ª–æ—Å—å, –∞ –µ—â—ë —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
						womb.Name), tWomb.ID,
					)
					if err != nil {
						return err
					}
					break
				} else if int(h1)-int(f2) <= 5 {
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π —Å–∏–ª–µ –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–∏—à–µ–Ω–∏—é —É –¥—Ä—É–≥–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), tWomb.ID,
					)
					if err != nil {
						return err
					}
					time.Sleep(3 * time.Second)
					h2c := int(tWomb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					f2c := int(tWomb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					mc := int((rand.Intn(int(tWomb.Health)) + 1) / 2)
					tWomb.Health += uint32(h2c)
					tWomb.Force += uint32(f2c)
					tWomb.Money += uint32(mc)
					tWomb.XP += 10
					err = bot.EditMessage(war2,
						fmt.Sprintf(
							"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
							tWomb.Name, h2c, f2c, mc, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money,
						), tWomb.ID,
					)
					if err != nil {
						return err
					}
					womb.Health = 5
					womb.Money = 50
					err = bot.EditMessage(war1,
						fmt.Sprintf(
							"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–±—Ä–æ—Å–∏–ª–æ—Å—å –¥–æ 5, –∞ –µ—â—ë —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
							tWomb.Name,
						),
						update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					break
				} else if round == 3 {
					if h1 < h2 {
						h2c := int(tWomb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						f2c := int(tWomb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						mc := int((rand.Intn(int(tWomb.Health)) + 1) / 2)
						tWomb.Health += uint32(h2c)
						tWomb.Force += uint32(f2c)
						tWomb.Money += uint32(mc)
						tWomb.XP += 10
						err = bot.EditMessage(war2,
							fmt.Sprintf(
								"–ò –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s –Ω–∞ —Ä–∞—É–Ω–¥–µ %d!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
								tWomb.Name, round, h2c, f2c, mc, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money,
							),
							tWomb.ID,
						)
						if err != nil {
							return err
						}
						womb.Health = uint32(h1)
						womb.Money = 50
						err = bot.EditMessage(war1,
							fmt.Sprintf(
								"–ò –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s –Ω–∞ —Ä–∞—É–Ω–¥–µ %d!\n –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å —Ç–æ–ª—å–∫–æ %d –∑–¥–æ—Ä–æ–≤—å—è –∏ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
								tWomb.Name, round, womb.Health,
							),
							update.Message.Chat.ID,
						)
						if err != nil {
							return err
						}
					} else {
						h1c := int(womb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						f1c := int(womb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						mc := int((rand.Intn(int(womb.Health)) + 1) / 2)
						womb.Health += uint32(h1c)
						womb.Force += uint32(f1c)
						womb.Money += uint32(mc)
						womb.XP += 10
						err = bot.EditMessage(war1,
							fmt.Sprintf(
								"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
								womb.Name, h1c, f1c, mc, womb.XP, womb.Health, womb.Force, womb.Money,
							),
							update.Message.Chat.ID,
						)
						if err != nil {
							return err
						}
						tWomb.Health = 5
						tWomb.Money = 50
						err = bot.EditMessage(war2,
							fmt.Sprintf(
								"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω—É–ª–∏–ª–æ—Å—å, –∞ –µ—â—ë —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
								womb.Name,
							),
							tWomb.ID,
						)
						if err != nil {
							return err
						}
					}
				}
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			err = docUpd(tWomb, bson.M{"_id": tWomb.ID}, users)
			if err != nil {
				return err
			}
			_, err = attacks.DeleteOne(ctx, bson.M{"_id": at.ID})
			return err
		},
	},
}

var bankCommands = []command{
	{
		Name: "wombank",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–≤–æ–º–±–∞–Ω–∫"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(update.Message.MessageID, strings.Repeat("–≤–æ–º–±–∞–Ω–∫ ", 42), update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "new",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–Ω–∞—á–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			isBanked, err := getIsBanked(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) != 2 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –Ω–∞—á–∞—Ç—å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			} else if isBanked {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–æ–º–±–∞–Ω–∫–µ...", update.Message.Chat.ID)
				return err
			} else if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –≤–æ–º–±–∞—Ç–∞–º! –£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID)
				return err
			}
			b := Banked{
				ID:    update.Message.From.ID,
				Money: 15,
			}
			_, err = bank.InsertOne(ctx, b)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–æ–º–±–∞–Ω–∫–µ! –í–∞–º –Ω–∞ –≤–æ–º–±–æ—Å—á—ë—Ç –¥–æ–±–∞–≤–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 15 —à–∏—à–µ–π",
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "put",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–ø–æ–ª–æ–∂–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			isBanked, err := getIsBanked(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID)
				return err
			} else if len(args) != 3 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			var num uint64
			if num, err = strconv.ParseUint(args[2], 10, 64); err != nil {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —à–∏—à–µ–π –¥–æ 2^64", update.Message.Chat.ID)
				return err
			}
			if womb.Money < uint32(num)+1 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏", update.Message.Chat.ID)
				return err
			} else if !isBanked {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: —É –≤–∞—Å –Ω–µ—Ç —è—á–µ–π–∫–∏ –≤ –±–∞–Ω–∫–µ! –ó–∞–≤–µ–¥–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ `–≤–æ–º–±–∞–Ω–∫ –Ω–∞—á–∞—Ç—å`",
					update.Message.Chat.ID,
				)
				return err
			} else if num == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù—É –∏ –∑–∞—á–µ–º?)", update.Message.Chat.ID)
				return err
			}
			var b Banked
			err = bank.FindOne(ctx, wombFilter(womb)).Decode(&b)
			if err != nil {
				return err
			}
			womb.Money -= uint32(num)
			b.Money += uint32(num)
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			err = docUpd(b, wombFilter(womb), bank)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í–∞—à –≤–æ–º–±–æ—Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %d —à! –í–æ–º–±–æ—Å—á—ë—Ç: %d —à; –ü—Ä–∏ —Å–µ–±–µ: %d —à",
					num, b.Money, womb.Money,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "take",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "—Å–Ω—è—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			isBanked, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID)
				return err
			} else if !isBanked {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "—É —Ç–µ–±—è –Ω–µ—Ç —è—á–µ–π–∫–∏ –≤ –≤–æ–º–±–∞–Ω–∫–µ", update.Message.Chat.ID)
				return err
			} else if len(args) != 3 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å–Ω—è—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			var b Banked
			err = bank.FindOne(ctx, wombFilter(womb)).Decode(&b)
			if err != nil {
				return err
			}
			var num uint64
			if num, err = strconv.ParseUint(args[2], 10, 64); err == nil {
				if num == 0 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù—É –∏ –∑–∞—á–µ–º?", update.Message.Chat.ID)
					return err
				}
			} else if args[2] == "–≤—Å—ë" || args[2] == "–≤—Å–µ" {
				if b.Money == 0 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É 0 —à–∏—à–µ–π. –ó–∞—á–µ–º?", update.Message.Chat.ID)
					return err
				}
				num = uint64(b.Money)
			} else {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å–Ω—è—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —à–∏—à–µ–π –¥–æ 2^64", update.Message.Chat.ID)
				return err
			}
			if b.Money < uint32(num) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å–Ω—è—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π –Ω–∞ –≤–æ–º–±–æ—Å—á–µ—Ç—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏", update.Message.Chat.ID)
				return err
			}
			b.Money -= uint32(num)
			womb.Money += uint32(num)
			err = docUpd(b, wombFilter(womb), bank)
			if err != nil {
				return err
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í—ã —Å–Ω—è–ª–∏ %d —à! –í–æ–º–±–æ—Å—á—ë—Ç: %d —à; –ü—Ä–∏ —Å–µ–±–µ: %d —à",
					num, b.Money, womb.Money,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "status",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "—Å—Ç–∞—Ç—É—Å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				fil   bson.M
				tWomb User
				err   error
			)
			switch len(args) {
			case 2:
				isInUsers, err := getIsInUsers(update.Message.From.ID)
				if err != nil {
					return err
				}
				isBanked, err := getIsBanked(update.Message.From.ID)
				if err != nil {
					return err
				}
				if !isInUsers {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –≤–æ–º–±–∞—Ç–∞–º! –£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID)
					return err
				} else if !isBanked {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–º–±–æ—Å—á—ë—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç", update.Message.Chat.ID)
					return err
				}
				fil = bson.M{"_id": update.Message.From.ID}
				tWomb = womb
			case 3:
				name := args[2]
				if !isValidName(name) {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è", update.Message.Chat.ID)
					return err
				} else if rCount, err := users.CountDocuments(
					ctx, bson.M{"name": cins(name)}); err != nil {
					return err
				} else if rCount == 0 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", name), update.Message.Chat.ID)
					return err
				}
				err = users.FindOne(ctx, bson.M{"name": cins(name)}).Decode(&tWomb)
				if err != nil {
					return err
				}
				fil = bson.M{"_id": tWomb.ID}
				bCount, err := bank.CountDocuments(ctx, fil)
				if err != nil {
					return err
				}
				if bCount == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–æ–º–±–∞–Ω–∫–µ",
						update.Message.Chat.ID,
					)
					return err
				}
			default:
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å—Ç–∞—Ç—É—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			var b Banked
			err = bank.FindOne(ctx, fil).Decode(&b)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í–æ–º–±–∞–Ω–∫ –≤–æ–º–±–∞—Ç–∞ %s:\n–ù–∞ —Å—á–µ—Ç—É: %d\n–ü—Ä–∏ —Å–µ–±–µ: %d",
					tWomb.Name, b.Money, tWomb.Money,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
}

var clanCommands = []command{
	{
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–∫–ª–∞–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(update.Message.MessageID, strings.Repeat("–∞—Ç–∞–∫–∞ ", 42), update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "new",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "—Å–æ–∑–¥–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç",
					update.Message.Chat.ID,
				)
				return err
			} else if len(args) < 4 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å "+
						"[—Ç–µ–≥ (3-5 –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã)] [–∏–º—è (–º–æ–∂–Ω–æ –ø—Ä–æ–±–µ–ª—ã)]",
					update.Message.Chat.ID,
				)
				return err
			} else if womb.Money < 25000 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è 25'000 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ (–£ –≤–∞—Å –∏—Ö –ø—Ä–∏ —Å–µ–±–µ %d)",
						womb.Money,
					),
					update.Message.Chat.ID,
				)
				return err
			} else if l := len([]rune(args[2])); !(l >= 3 && l <= 5) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç—ç–≥!", update.Message.Chat.ID)
				return err
			} else if !isValidTag(args[2]) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —Ç—ç–≥(", update.Message.Chat.ID)
				return err
			} else if name := strings.Join(args[3:], " "); len([]rune(name)) > 64 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è! –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			} else if len([]rune(name)) < 2 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è! –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			tag, name := strings.ToLower(args[2]), strings.Join(args[3:], " ")
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"_id": cins(tag)}); err != nil {
				return err
			} else if rCount != 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–û—à–∏–±–∫–∞: –∫–ª–∞–Ω —Å —Ç–µ–≥–æ–º `%s` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
						tag,
					),
					update.Message.Chat.ID,
				)
				return err
			}
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if rCount != 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –ù–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–Ω –≤—ã–π—Ç–∏`, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ",
					update.Message.Chat.ID,
				)
				return err
			}
			womb.Money -= 25000
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			nclan := Clan{
				Tag:     strings.ToUpper(tag),
				Name:    name,
				Money:   100,
				Leader:  update.Message.From.ID,
				Banker:  update.Message.From.ID,
				Members: []int64{update.Message.From.ID},
				Banned:  []int64{},
				GroupID: update.Message.Chat.ID,
				Settings: ClanSettings{
					AviableToJoin: true,
				},
			}
			_, err = clans.InsertOne(ctx, &nclan)
			if err != nil {
				return err
			}
			if hasTitle(5, womb.Titles) {
				newTitles := []uint16{}
				for _, id := range womb.Titles {
					if id == 5 {
						continue
					}
					newTitles = append(newTitles, id)
				}
				womb.Titles = newTitles
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–ö–ª–∞–Ω `%s` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ! –£ –≤–∞—Å –≤–∑—è–ª–∏ 25'000 —à–∏—à–µ–π",
					name,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "join",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–≤—Å—Ç—É–ø–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –í–æ–º–±–∞—Ç–∞ —É —Ç–µ–±—è –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			} else if len(args) != 3 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–ª–∏ –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å [—Ç—ç–≥ –∫–ª–∞–Ω–∞]",
					update.Message.Chat.ID,
				)
				return err
			} else if womb.Money < 1000 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π (–Ω–∞–¥–æ –º–∏–Ω–∏–º—É–º 1000 —à)",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.MessageID}); err != nil {
				return err
			} else if rCount != 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –ù–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–Ω –≤—ã–π—Ç–∏`, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ",
					update.Message.Chat.ID,
				)
				return err
			} else if l := len([]rune(args[2])); !(l >= 3 && l <= 5) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–≥ :)", update.Message.Chat.ID)
				return err
			} else if !isValidTag(args[2]) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–¢–µ–≥ –Ω–µ–ª–≥–∞–ª—å–Ω—ã–π(", update.Message.Chat.ID)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"_id": strings.ToUpper(args[2])}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–û—à–∏–±–∫–∞: –∫–ª–∞–Ω–∞ —Å —Ç–µ–≥–æ–º `%s` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
						args[2],
					),
					update.Message.Chat.ID,
				)
				return err
			}
			var jClan Clan
			err = clans.FindOne(ctx, bson.M{"_id": strings.ToUpper(args[2])}).Decode(&jClan)
			if err != nil {
				return err
			}
			if len(jClan.Members) >= 7 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–û—à–∏–±–∫–∞: –≤ –∫–ª–∞–Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ :(", update.Message.Chat.ID)
				return err
			} else if !(jClan.Settings.AviableToJoin) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–∞–Ω –∑–∞–∫—Ä—ã—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", update.Message.Chat.ID)
				return err
			} else if update.Message.Chat.ID != jClan.GroupID {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∫–ª–∞–Ω–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			for _, id := range jClan.Banned {
				if id == womb.ID {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!!1\n –≤ —ç—Ç–æ–º –∫–ª–∞–Ω–µ(", update.Message.Chat.ID)
					return err
				}
			}
			womb.Money -= 1000
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			jClan.Members = append(jClan.Members, update.Message.From.ID)
			err = docUpd(jClan, bson.M{"_id": strings.ToUpper(args[2])}, clans)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –£ –≤–∞—Å –≤–∑—è–ª–∏ 1000 —à–∏—à–µ–π",
				update.Message.Chat.ID,
			)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(
				fmt.Sprintf(
					"–í –≤–∞—à –∫–ª–∞–Ω –≤—Å—Ç—É–ø–∏–ª –≤–æ–º–±–∞—Ç `%s`",
					womb.Name,
				),
				jClan.Leader,
			)
			return err
		},
	},
	{
		Name: "set_user",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–Ω–∞–∑–Ω–∞—á–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∫–æ–Ω–µ—á–Ω–æ", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			switch args[2] {
			case "–Ω–∞–∑–Ω–∞—á–∏—Ç—å":
				_, err = bot.ReplyWithMessage(update.Message.MessageID, strings.Repeat("–Ω–∞–∑–Ω–∞—á–∏—Ç—å", 42), update.Message.Chat.ID)
				return err
			case "–ª–∏–¥–µ—Ä–∞":
				fallthrough
			case "–ª–∏–¥–µ—Ä–æ–º":
				fallthrough
			case "–ª–∏–¥–µ—Ä":
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"–∫–ª–∞–Ω –ø–µ—Ä–µ–¥–∞—Ç—å [–∏–º—è]\" –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID)
				return err
			case "–∫–∞–∑–Ω–∞—á–µ—è":
				fallthrough
			case "–∫–∞–∑–Ω–∞—á–µ–µ–º":
				fallthrough
			case "–∫–∞–∑–Ω–∞—á–µ–π":
				if len(args) != 4 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
					return err
				} else if !isInUsers {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
						update.Message.Chat.ID,
					)
					return err
				}
				if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
					return err
				} else if c == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –∫–ª–∞–Ω–∞",
						update.Message.Chat.ID,
					)
					return err
				}
				var sClan Clan
				if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
					return err
				}
				lbid := sClan.Banker
				name := args[3]
				if c, err := users.CountDocuments(ctx, bson.M{"name": cins(name)}); err != nil {
					return err
				} else if c == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–í–æ–º–±–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
						update.Message.Chat.ID,
					)
					return err
				}
				var (
					nb User
				)
				if err := users.FindOne(ctx, bson.M{"name": cins(name)}).Decode(&nb); err != nil {
					return err
				}
				var is bool
				for _, id := range sClan.Members {
					if id == nb.ID {
						is = true
						break
					}
				}
				if !is {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–î–∞–Ω–Ω—ã–π –≤–æ–±–∞—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–∞—à–µ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID)
					return err
				}
				sClan.Banker = nb.ID
				if err := docUpd(sClan, bson.M{"_id": sClan.Tag}, clans); err != nil {
					return err
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–∞–∑–Ω–∞—á–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å —ç—Ç–æ "+nb.Name,
					update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
				if nb.ID != update.Message.From.ID {
					_, err = bot.SendMessage("–í—ã —Å—Ç–∞–ª–∏ –∫–∞–∑–Ω–∞—á–µ–µ–º –≤ –∫–ª–∞–Ω–µ `"+sClan.Name+"` ["+sClan.Tag+"]", nb.ID)
					if err != nil {
						return err
					}
				}
				if lbid != update.Message.From.ID && lbid != 0 {
					_, err = bot.SendMessage("–í—ã –∫–∞–∑–Ω–∞—á–µ–π... —Ç–µ–ø–µ—Ä—å –±—ã–≤—à–∏–π. (–≤ –∫–ª–∞–Ω–µ `"+sClan.Name+"` ["+sClan.Tag+"])", lbid)
					return err
				}
				return nil
			default:
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Ä–æ–ª–∏ –≤ –∫–ª–∞–Ω–µ(", update.Message.Chat.ID)
				return err
			}
		},
	},
	{
		Name: "transfer",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–ø–µ—Ä–µ–¥–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) != 3 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω –ø–µ—Ä–µ–¥–∞—Ç—å [–Ω–∏–∫]",
					update.Message.Chat.ID,
				)
				return err
			} else if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ (—Ö–ª—é–ø) –Ω–µ—Ç",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ª–∏–¥–µ—Ä –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ!!!11!!!",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := users.CountDocuments(ctx,
				bson.M{"name": cins(args[2])}); err != nil {
				return err
			} else if rCount == 0 {
				bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
					update.Message.Chat.ID,
				)
				return err
			}
			var newLead User
			err = users.FindOne(ctx, bson.M{"name": cins(args[2])}).Decode(&newLead)
			if err != nil {
				return err
			}
			if strings.ToLower(args[2]) == strings.ToLower(womb.Name) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–æ —Ç—ã –∏ —Ç–∞–∫ –ª–∏–¥–µ—Ä...", update.Message.Chat.ID)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": newLead.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf("–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç `%s` –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ", newLead.Name),
					update.Message.Chat.ID,
				)
				return err
			}
			var uClan Clan
			err = clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&uClan)
			if err != nil {
				return err
			}
			var isIn bool = false
			for _, id := range uClan.Members {
				if id == newLead.ID {
					isIn = true
					break
				}
			}
			if !isIn {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf("–û—à–∏–±–∫–∞: –≤—ã –∏ %s —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞–Ω–∞—Ö", newLead.Name),
					update.Message.Chat.ID,
				)
				return err
			}
			uClan.Leader = newLead.ID
			err = docUpd(uClan, bson.M{"_id": uClan.Tag}, clans)
			if err != nil {
				return err
			}
			if hasTitle(5, womb.Titles) {
				newTitles := []uint16{}
				for _, id := range womb.Titles {
					if id == 5 {
						continue
					}
					newTitles = append(newTitles, id)
				}
				womb.Titles = newTitles
				if err != nil {
					return err
				}
			}
			if !hasTitle(5, newLead.Titles) {
				newLead.Titles = append(newLead.Titles, 5)
				err = docUpd(newLead, bson.M{"_id": newLead.ID}, users)
				if err != nil {
					return err
				}
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–û—Ç–ª–∏—á–Ω–æ! –í–æ–º–±–∞—Ç `%s` —Ç–µ–ø–µ—Ä—å –≥–ª–∞–≤–Ω—ã–π –≤ –∫–ª–∞–Ω–µ `%s`",
					newLead.Name, uClan.Tag,
				),
				update.Message.Chat.ID,
			)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage("–í–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –Ω–∞ –∫–ª–∞–Ω!", newLead.ID)
			return err
		},
	},
	{
		Name: "quit",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–≤—ã–π—Ç–∏"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç (–º–Ω–µ —É–∂–µ –Ω–∞–¥–æ–µ–ª–æ —ç—Ç–æ –ø–∏—Å–∞—Ç—å –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∑–∞–≤–µ–¥–∏ —É–∂–µ –≤–æ–º–±–∞—Ç–∞ –Ω–∞—Ñ–µ–∫)",
					update.Message.Chat.ID,
				)
				return err
			} else if len(args) != 2 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω –≤—ã–π—Ç–∏",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ö–ª–∞–Ω –≤—ã–π—Ç–∏: –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID)
				return err
			}
			var uClan Clan
			err = clans.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&uClan)
			if err != nil {
				return err
			}
			if len(uClan.Members) == 1 {
				_, err = clans.DeleteOne(ctx, bson.M{"_id": uClan.Tag})
				if err != nil {
					return err
				}
				if uClan.Leader == update.Message.From.ID {
					if hasTitle(5, womb.Titles) {
						newTitles := []uint16{}
						for _, id := range womb.Titles {
							if id == 5 {
								continue
							}
							newTitles = append(newTitles, id)
						}
						womb.Titles = newTitles
						err = docUpd(womb, wombFilter(womb), users)
						if err != nil {
							return err
						}
					}
				}
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–¢–∞–∫ –∫–∞–∫ –≤—ã –±—ã–ª–∏ –æ–¥–Ω–∏ –≤ –∫–ª–∞–Ω–µ, —Ç–æ –∫–ª–∞–Ω —É–¥–∞–ª—ë–Ω",
					update.Message.Chat.ID,
				)
				return err
			} else if uClan.Leader == update.Message.From.ID {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω –≤—ã–π—Ç–∏: –≤—ã –ª–∏–¥–µ—Ä. –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∫–æ–º—É-–ª–∏–±–æ –≤–∞—à–∏ –ø—Ä–∞–≤–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			newMembers := []int64{}
			for _, id := range uClan.Members {
				if id == update.Message.From.ID {
					continue
				}
				newMembers = append(newMembers, id)
			}
			var (
				rep    string = "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã!"
				msgtol string = "–í–æ–º–±–∞—Ç `" + womb.Name + "` –≤—ã—à–µ–ª –∏–∑ –∫–ª–∞–Ω–∞."
			)
			uClan.Members = newMembers
			if uClan.Banker == update.Message.From.ID && uClan.Leader != uClan.Banker {
				uClan.Banker = uClan.Leader
				rep += "\n–ë–∞–Ω–∫–∏—Ä–æ–º –≤–º–µ—Å—Ç–æ –≤–∞—Å —Å—Ç–∞–ª –ª–∏–¥–µ—Ä –∫–ª–∞–Ω–∞."
				msgtol += "\n–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –≤–æ–º–±–∞—Ç –±—ã–ª –±–∞–Ω–∫–∏—Ä–æ–º, –í—ã —Å—Ç–∞–ª–∏ –±–∞–Ω–∫–∏—Ä–æ–º –∫–ª–∞–Ω–∞."
			}
			err = docUpd(uClan, bson.M{"_id": uClan.Tag}, clans)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				rep,
				update.Message.Chat.ID,
			)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(msgtol, uClan.Leader)
			if err != nil {
				return err
			}
			if update.Message.Chat.ID != uClan.GroupID {
				_, err = bot.SendMessage("–í–æ–º–±–∞—Ç "+womb.Name+" –≤—ã—à–µ–ª –∏–∑ –∫–ª–∞–Ω–∞.", uClan.GroupID)
				if err != nil {
					return err
				}
			}
			return nil
		},
	},
	{
		Name: "status",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "—Å—Ç–∞—Ç—É—Å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) > 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω —Å—Ç–∞—Ç—É—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω —Å—Ç–∞—Ç—É—Å ([—Ç–µ–≥])",
					update.Message.Chat.ID,
				)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			var sClan Clan
			if len(args) == 2 {
				if !isInUsers {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –≤–æ–º–±–∞—Ç–∞. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –Ω–∏ –≤ –æ–¥–Ω–æ–º –≤–æ–º–±–æ–∫–ª–∞–Ω–µ",
						update.Message.Chat.ID,
					)
					return err
				} else if rCount, err := clans.CountDocuments(ctx,
					bson.M{"members": update.Message.From.ID}); err != nil {
					return err
				} else if rCount == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–ö–ª–∞–Ω —Å—Ç–∞—Ç—É—Å: –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ",
						update.Message.Chat.ID,
					)
					return err
				}
				err = clans.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&sClan)
				if err != nil {
					return err
				}
			} else {
				if l := len([]rune(args[2])); !(l >= 3 && l <= 5) {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–≥",
						update.Message.Chat.ID,
					)
					return err
				} else if !isValidTag(args[2]) {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–û—à–∏–±–∫–∞: —Ç–µ–≥ –Ω–µ–ª–µ–≥–∞–ª–µ–Ω",
						update.Message.Chat.ID,
					)
					return err
				} else if rCount, err := clans.CountDocuments(ctx,
					bson.M{"_id": cins(args[2])}); err != nil {
					return err
				} else if rCount == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						fmt.Sprintf(
							"–û—à–∏–±–∫–∞: –∫–ª–∞–Ω–∞ —Å —Ç–µ–≥–æ–º `%s` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
							args[2],
						),
						update.Message.Chat.ID,
					)
					return err
				}
				err = clans.FindOne(ctx, bson.M{"_id": cins(args[2])}).Decode(&sClan)
				if err != nil {
					return err
				}
			}
			var (
				msg string = fmt.Sprintf(
					"–ö–ª–∞–Ω `%s` [%s]\n üí∞ –ö–∞–∑–Ω–∞: %d —à–∏—à–µ–π\n üêΩ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n",
					sClan.Name, sClan.Tag, sClan.Money,
				)
				midHealth, midForce uint32
				lost                uint8 = 0
			)
			var tWomb User
			for i, id := range sClan.SortedMembers() { // append –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
				if rCount, err := users.CountDocuments(ctx,
					bson.M{"_id": id}); err != nil {
					return err
				} else if rCount == 0 {
					msg += " - –í–æ–º–±–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω :("
					lost++
					continue
				} else {
					err = users.FindOne(ctx, bson.M{"_id": id}).Decode(&tWomb)
					if err != nil {
						return err
					}
					msg += fmt.Sprintf("        %d. [%s](tg://user?id=%d)", i+1, tWomb.Name, tWomb.ID)
					if id == sClan.Leader {
						msg += " | –õ–∏–¥–µ—Ä"
					} else if sClan.Banker == id {
						msg += " | –ö–∞–∑–Ω–∞—á–µ–π"
					}
					midHealth += tWomb.Health
					midForce += tWomb.Force
				}
				msg += "\n"
			}
			if uint32(len(sClan.Members)-int(lost)) != 0 {
				midHealth /= uint32(len(sClan.Members) - int(lost))
				midForce /= uint32(len(sClan.Members) - int(lost))
			} else {
				midHealth, midForce = 0, 0
			}
			msg += fmt.Sprintf(
				" ‚ù§ –°—Ä–µ–¥–Ω–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: %d\n ‚ö° –°—Ä–µ–¥–Ω—è—è –º–æ—â—å: %d\n üëÅ XP: %d",
				midHealth, midForce, sClan.XP,
			)
			_, err = bot.ReplyWithMessage(update.Message.MessageID, msg, update.Message.Chat.ID, MarkdownParseModeMessage)
			return err
		},
	},
	{
		Name: "award",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–Ω–∞–≥—Ä–∞–¥–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID)
				return err
			}
			var sClan Clan
			if err := clans.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			if !(update.Message.From.ID == sClan.Leader || update.Message.From.ID == sClan.Banker) {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∑–Ω–∞—á–µ–µ–º –∏–ª–∏ –ª–∏–¥–µ—Ä–æ–º",
					update.Message.Chat.ID,
				)
				return err
			}
			if e := time.Now().Sub(sClan.LastRewardTime); e < 24*time.Hour {
				left := (24 * time.Hour) - e
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–° –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–æ—à–ª–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –Ω–µ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–æ–≤. "+
							"–û—Å—Ç–∞–ª–æ—Å—å %d —á–∞—Å–æ–≤ %d –º–∏–Ω—É—Ç",
						int64(left.Hours()), int64(left.Minutes())-int64(left.Hours())*60,
					),
					update.Message.Chat.ID,
				)
				return err
			}
			add := 500 + rand.Intn(200) - rand.Intn(200)
			sClan.Money += uint32(add)
			sClan.LastRewardTime = time.Now()
			if err := docUpd(sClan, bson.M{"_id": sClan.Tag}, clans); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞ –ø–æ—Å—Ç—É–ø–∏–ª–æ %d —à–∏—à–µ–π! –¢–µ–ø–µ—Ä—å –∏—Ö %d",
					add, sClan.Money,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "rating",
		Is: func(args []string, update tg.Update) bool {
			lowarg := strings.ToLower(args[1])
			return lowarg == "—Ä–µ–π—Ç–∏–Ω–≥" || lowarg == "—Ç–æ–ø"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				name  string = "xp"
				queue int8   = -1
				err   error  // because yes
			)
			if len(args) >= 3 && len(args) < 5 {
				if isInList(args[2], []string{"—à–∏—à–∏", "–¥–µ–Ω—å–≥–∏", "money"}) {
					name = "money"
				} else if isInList(args[2], []string{"—Ö–ø", "–æ–ø—ã—Ç", "xp", "—Ö—Ä—é"}) {
					name = "xp"
				} else {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–Ω–µ –ø–æ–Ω–∏–º–∞—é –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞(",
						update.Message.Chat.ID,
					)
					return err
				}
				if len(args) == 4 {
					if isInList(args[3], []string{"+", "–ø–ª—é—Å", "++", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ"}) {
						queue = 1
					} else if isInList(args[3], []string{"-", "–º–∏–Ω—É—Å", "--", "—É–º–µ–Ω—å—à–µ–Ω–∏–µ"}) {
						queue = -1
					} else {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"–Ω–µ –ø–æ–Ω–∏–º–∞—é –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ä—è–ª",
							update.Message.From.ID,
						)
						return err
					}
				}
			} else if len(args) != 2 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			opts := options.Find()
			opts.SetSort(bson.M{name: queue})
			opts.SetLimit(10)
			cur, err := clans.Find(ctx, bson.M{}, opts)
			if err != nil {
				return err
			}
			var rating []Clan
			for cur.Next(ctx) {
				var cl Clan
				cur.Decode(&cl)
				rating = append(rating, cl)
			}
			var msg string = "–¢–æ–ø-10 –∫–ª–∞–Ω–æ–≤ –ø–æ "
			switch name {
			case "money":
				msg += "—à–∏—à–∞–º –≤ –∫–∞–∑–Ω–µ "
			case "xp":
				msg += "XP "
				// no default because idk what i should put here
			}
			msg += "–≤ –ø–æ—Ä—è–¥–∫–µ "
			switch queue {
			case 1:
				msg += "—É–≤–µ–ª–∏—á–µ–Ω–∏—è:"
			case -1:
				msg += "—É–º–µ–Ω—å—à–µ–Ω–∏—è:"
			}
			msg += "\n"
			for num, cl := range rating {
				switch name {
				case "money":
					msg += fmt.Sprintf("%d | [%s] `%s` | %d —à–∏—à–µ–π –≤ –∫–∞–∑–Ω–µ\n", num+1, cl.Tag, cl.Name, cl.Money)
				case "xp":
					msg += fmt.Sprintf("%d | [%s] `%s` | %d XP\n", num+1, cl.Tag, cl.Name, cl.XP)
				}
			}
			msg = strings.TrimSuffix(msg, "\n")
			_, err = bot.ReplyWithMessage(update.Message.MessageID, msg, update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "list_banned",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä–∞–º –∫–ª–∞–Ω–∞; –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º.",
					update.Message.From.ID,
				)
				return err
			}
			var sClan Clan
			if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			if len(sClan.Banned) == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–∏–∫—Ç–æ –Ω–µ –≤ –±–∞–Ω–µ!", update.Message.Chat.ID)
				return err
			}
			var msg string = "‚õî –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö:\n"
			for _, id := range sClan.Banned {
				var bWomb User
				if err := users.FindOne(ctx, bson.M{"_id": id}).Decode(&bWomb); err != nil {
					msg += " ‚Äî [–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤–æ–º–±–∞—Ç–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞]\n"
				}
				msg += " ‚Äî " + bWomb.Name + "\n"
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, msg, update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "kick",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–∫–∏–∫"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∫–æ–≥–æ?", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞–Ω–∞", update.Message.Chat.ID)
				return err
			}
			if c, err := users.CountDocuments(ctx, bson.M{"name": cins(args[2])}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...", update.Message.Chat.ID)
				return err
			}
			var (
				sClan Clan
				kWomb User
			)
			if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			if err := users.FindOne(ctx, bson.M{"name": cins(args[2])}).Decode(&kWomb); err != nil {
				return err
			}
			var is bool
			for _, id := range sClan.Members {
				if id == kWomb.ID {
					is = true
					break
				}
			}
			if !is {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í–æ–º–±–∞—Ç —Å —ç—Ç–∏–º –Ω–∏–∫–æ–º –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–∞—à–µ–º –∫–ª–∞–Ω–µ",
					update.Message.Chat.ID,
				)
				return err
			}
			if kWomb.ID == update.Message.From.ID {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–Ω –≤—ã–π—Ç–∏`",
					update.Message.Chat.ID,
				)
				return err
			}
			var appmsg string
			var nm []int64
			for _, id := range sClan.Members {
				if id == kWomb.ID {
					continue
				}
				nm = append(nm, id)
			}
			sClan.Members = nm
			if kWomb.ID == sClan.Banker {
				appmsg = "–¢–µ–ø–µ—Ä—å –∫–∞–∑–Ω–∞—á–µ–µ–º —Å—Ç–∞–ª–∏ –í—ã."
				sClan.Banker = sClan.Leader
			}
			if err := docUpd(sClan, bson.M{"_id": sClan.Tag}, clans); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ì–æ—Ç–æ–≤–æ!\n"+appmsg, update.Message.Chat.ID)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(fmt.Sprintf("–í–∞—Å –∫–∏–∫–Ω—É–ª–∏ –∏–∑ –∫–ª–∞–Ω–∞ `%s` [%s]", sClan.Name, sClan.Tag), kWomb.ID)
			return err
		},
	},
	{
		Name: "ban",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–±–∞–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∫–æ–≥–æ?", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞–Ω–∞", update.Message.Chat.ID)
				return err
			}
			if c, err := users.CountDocuments(ctx, bson.M{"name": cins(args[2])}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...", update.Message.Chat.ID)
				return err
			}
			var (
				sClan Clan
				kWomb User
			)
			if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			if err := users.FindOne(ctx, bson.M{"name": cins(args[2])}).Decode(&kWomb); err != nil {
				return err
			}
			var is bool
			for _, id := range sClan.Members {
				if id == kWomb.ID {
					is = true
					break
				}
			}
			if !is {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞—Ç —Å —ç—Ç–∏–º –Ω–∏–∫–æ–º –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–∞—à–µ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID)
				return err
			}
			if kWomb.ID == update.Message.From.ID {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω—ã–º–∏, —Ç–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –ª–∏–¥–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –í–∞—Å –Ω–æ–≤–æ–≥–æ –ª–∏–¥–µ—Ä–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			for _, id := range sClan.Banned {
				if id == kWomb.ID {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–≠—Ç–æ—Ç –≤–æ–º–±–∞—Ç —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω", update.Message.Chat.ID)
					return err
				}
			}
			sClan.Banned = append(sClan.Banned, kWomb.ID)
			var appmsg string
			var nm []int64
			for _, id := range sClan.Members {
				if id == kWomb.ID {
					continue
				}
				nm = append(nm, id)
			}
			sClan.Members = nm
			if kWomb.ID == sClan.Banker {
				appmsg = "–¢–µ–ø–µ—Ä—å –∫–∞–∑–Ω–∞—á–µ–µ–º —Å—Ç–∞–ª–∏ –í—ã."
				sClan.Banker = sClan.Leader
			}
			if err := docUpd(sClan, bson.M{"_id": sClan.Tag}, clans); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ì–æ—Ç–æ–≤–æ!\n"+appmsg, update.Message.Chat.ID)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(fmt.Sprintf("–í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –≤ –∫–ª–∞–Ω–µ `%s` [%s]", sClan.Name, sClan.Tag), kWomb.ID)
			return err
		},
	},
	{
		Name: "unban",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "—Ä–∞–∑–±–∞–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∫–æ–≥–æ?", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞–Ω–∞", update.Message.Chat.ID)
				return err
			}
			if c, err := users.CountDocuments(ctx, bson.M{"name": cins(args[2])}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í–æ–º–±–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...", update.Message.Chat.ID)
				return err
			}
			var (
				sClan Clan
				kWomb User
			)
			if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			if err := users.FindOne(ctx, bson.M{"name": cins(args[2])}).Decode(&kWomb); err != nil {
				return err
			}
			var is bool
			var nb []int64
			for _, id := range sClan.Banned {
				if id == kWomb.ID {
					is = true
					continue
				}
				nb = append(nb, id)
			}
			if !is {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–î–∞–Ω–Ω—ã–π –≤–æ–º–±–∞—Ç –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –≤ –í–∞—à–µ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID)
				return err
			}
			sClan.Banned = nb
			if err := docUpd(sClan, bson.M{"_id": sClan.Tag}, clans); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(update.Message.MessageID, "–£—Å–ø–µ—à–Ω–æ!", update.Message.Chat.ID)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(fmt.Sprintf("–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –≤ –∫–ª–∞–Ω–µ `%s` [%s]", sClan.Name, sClan.Tag), kWomb.ID)
			return err
		},
	},
	{
		Name: "rename",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) < 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –°–∏–Ω—Ç–∞–∫—Å–∏—Å: `–∫–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å [–∏–º—è (–º–æ–∂–Ω–æ –ø—Ä–æ–±–µ–ª—ã)]`",
					update.Message.Chat.ID,
				)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ",
					update.Message.Chat.ID,
				)
				return err
			}
			name := strings.Join(args[2:], " ")
			if len([]rune(name)) > 64 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è! –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			} else if len([]rune(name)) < 2 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è! –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			if _, err := clans.UpdateOne(ctx, bson.M{"leader": update.Message.From.ID}, bson.M{
				"$set": bson.M{
					"name": name,
				},
			}); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf("–ò–º—è –í–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–æ –Ω–∞ `%s`", name),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "settings",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) > 4 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞–Ω–∞.",
					update.Message.Chat.ID,
				)
				return err
			}
			var sClan Clan
			if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			if len(args) == 2 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					fmt.Sprintf(
						"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–Ω–∞:\n"+
							"  –¥–æ—Å—Ç—É–ø–µ–Ω_–¥–ª—è_–≤—Ö–æ–¥–∞: %s",
						bool2string(sClan.Settings.AviableToJoin),
					),
					update.Message.Chat.ID,
				)
				return err
			}
			switch strings.ToLower(args[2]) {
			case "–¥–æ—Å—Ç—É–ø–µ–Ω_–¥–ª—è_–≤—Ö–æ–¥–∞":
				if len(args) == 3 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–¥–æ—Å—Ç—É–ø–µ–Ω_–¥–ª—è_–≤—Ö–æ–¥–∞: "+bool2string(sClan.Settings.AviableToJoin),
						update.Message.Chat.ID,
					)
					return err
				} else if ans := strings.ToLower(args[3]); ans == "–¥–∞" {
					sClan.Settings.AviableToJoin = true
				} else if ans == "–Ω–µ—Ç" {
					sClan.Settings.AviableToJoin = false
				} else {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã `–¥–∞` –∏ `–Ω–µ—Ç`",
						update.Message.Chat.ID,
					)
					return err
				}
			default:
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç–∞–∫–∏–º–∏–º–µ–Ω–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			if err := docUpd(sClan, bson.M{"leader": update.Message.From.ID}, clans); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ `%s` —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ `%s`",
					strings.ToLower(args[2]),
					strings.ToLower(args[3]),
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "bank",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–∫–∞–∑–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∂–µ—Å—å", update.Message.Chat.ID)
				return err
			}
			for _, cmd := range clanBankCommands {
				if cmd.Is(args, update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID)
			return err
		},
	},
	{
		Name: "attack",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "–∞—Ç–∞–∫–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := bot.ReplyWithMessage(update.Message.MessageID, "–∏—Ö–µ—Ü–∞—Ü", update.Message.Chat.ID)
				return err
			}
			for _, cmd := range clanAttackCommands {
				if cmd.Is(args, update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := bot.ReplyWithMessage(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID)
			return err
		},
	},
}

var clanBankCommands = []command{
	{
		Name: "bank",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "–∫–∞–∑–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(
				update.Message.MessageID,
				strings.Repeat("–∫–∞–∑–Ω–∞ ", 42),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "take",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "—Å–Ω—è—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) != 4 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–ª–∏ –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"members": womb.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID)
				return err
			}
			var sClan Clan
			if err := clans.FindOne(ctx, bson.M{"members": womb.ID}).Decode(&sClan); err != nil {
				return err
			}
			if !(sClan.Leader == womb.ID || sClan.Banker == womb.ID) {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ –ø—Ä–∞–≤–æ–º —Å–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∫–∞–∑–Ω—ã (—Ç–æ–ª—å–∫–æ –ª–∏–¥–µ—Ä –∏ –∫–∞–∑–Ω–∞—á–µ–π)",
					update.Message.Chat.ID,
				)
				return err
			}
			var take uint64
			if take, err = strconv.ParseUint(args[3], 10, 64); err != nil {
				if args[3] == "–≤—Å—ë" {
					take = uint64(sClan.Money)
				} else {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ª–∏–±–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 2^63, –ª–∏–±–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –ª–∏–±–æ –¥—Ä–æ–±–Ω–æ–µ. –∫–æ—Ä–æ—á–µ –¥–∞.",
						update.Message.Chat.ID,
					)
					return err
				}
			}
			if take > uint64(sClan.Money) {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞ –≤—ã—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–Ω–µ–≥ –≤ –∫–∞–∑–Ω–µ", update.Message.Chat.ID)
				return err
			} else if take == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–•–∏—Ç—Ä(—ã–π/–∞—è) –∫–∞–∫(–æ–π/–∞—è)",
					update.Message.Chat.ID,
				)
				return err
			}
			if _, err = clans.UpdateOne(ctx, bson.M{"_id": sClan.Tag},
				bson.M{"$inc": bson.M{"money": -int(take)}}); err != nil {
				return err
			} else if _, err = users.UpdateOne(ctx, bson.M{"_id": womb.ID},
				bson.M{"$inc": bson.M{"money": int(take)}}); err != nil {
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –∏–∑ –∫–∞–∑–Ω—ã %d –®! –¢–µ–ø–µ—Ä—å –≤ –∫–∞–∑–Ω–µ %d –®, –∞ —É –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É %d",
					take, uint64(sClan.Money)-take, uint64(womb.Money)+take,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "put",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "–ø–æ–ª–æ–∂–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) != 4 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if c, err := clans.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if c == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ",
					update.Message.Chat.ID,
				)
				return err
			}
			var sClan Clan
			if err := clans.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&sClan); err != nil {
				return err
			}
			var (
				take uint64
			)
			if take, err = strconv.ParseUint(args[3], 10, 64); err != nil {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –ª–∏–±–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 2^63, –ª–∏–±–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –ª–∏–±–æ –¥—Ä–æ–±–Ω–æ–µ. –∫–æ—Ä–æ—á–µ –¥–∞.",
					update.Message.Chat.ID,
				)
				return err
			} else if take > uint64(womb.Money) {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å, –±–æ–ª—å—à–µ –∫–æ–ª-–≤–∞ –¥–µ–Ω–µ–≥ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É",
					update.Message.Chat.ID,
				)
				return err
			} else if take == 0 {
				_, err = bot.ReplyWithMessage(update.Message.MessageID, "–±–ª–∏–Ω", update.Message.Chat.ID)
				return err
			}
			if _, err := users.UpdateOne(ctx, bson.M{"_id": womb.ID}, bson.M{
				"$inc": bson.M{
					"money": -int(take),
				},
			}); err != nil {
				return err
			} else if _, err := clans.UpdateOne(ctx, bson.M{"_id": sClan.Tag}, bson.M{
				"$inc": bson.M{
					"money": int(take),
				},
			}); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í—ã –ø–æ–ª–æ–∂–∏–ª–∏ %d –® –≤ –∫–∞–∑–Ω—É. –¢–µ–ø–µ—Ä—å –≤ –∫–∞–∑–Ω–µ %d –®, –∞ —É –≤–∞—Å %d",
					take, uint64(sClan.Money)+take, uint64(womb.Money)-take,
				),
				update.Message.Chat.ID,
			)
			if sClan.Leader != womb.ID {
				_, lerr := bot.SendMessage(
					fmt.Sprintf("%s –ø–æ–ª–æ–∂–∏–ª(–∞) %d —à–∏—à–µ–π –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞", womb.Name, take),
					sClan.Leader,
				)
				if lerr != nil {
					return lerr
				}
			}
			if sClan.GroupID != update.Message.Chat.ID {
				_, gerr := bot.SendMessage(
					fmt.Sprintf("%s –ø–æ–ª–æ–∂–∏–ª(–∞) %d —à–∏—à–µ–π –≤ –∫–∞–∑–Ω—É –∫–ª–∞–Ω–∞", womb.Name, take),
					sClan.GroupID,
				)
				if gerr != nil {
					return gerr
				}
			}
			return err
		},
	},
}

var clanAttackCommands = []command{
	{
		Name: "attack",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "–∞—Ç–∞–∫–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(
				update.Message.MessageID,
				strings.Repeat("–∞—Ç–∞–∫–∞ ", 42),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "to",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ê—Ç–∞–∫–∞ –Ω–∞: –Ω–∞ –∫–æ–≥–æ?",
					update.Message.Chat.ID,
				)
				return err
			} else if len(args) > 4 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ê—Ç–∞–∫–∞ –Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			var err error
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –∫–ª–∞–Ω–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Å—Ç–æ–∏—Ç–µ",
					update.Message.Chat.ID,
				)
				return err
			}
			var fromClan Clan
			err = clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&fromClan)
			if err != nil {
				return err
			} else if ok, from := isInClattacks(fromClan.Tag, clattacks); from {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã —É–∂–µ –Ω–∞–ø–∞–¥–∞–µ—Ç–µ –Ω–∞ –¥—Ä—É–≥–æ–π –∫–ª–∞–Ω",
					update.Message.Chat.ID,
				)
				return err
			} else if ok {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ù–∞ –≤–∞—Å —É–∂–µ –Ω–∞–ø–∞–¥–∞—é—Ç)",
					update.Message.Chat.ID,
				)
				return err
			}
			tag := strings.ToUpper(args[3])
			if len([]rune(tag)) > 64 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–≥!",
					update.Message.Chat.ID,
				)
				return err
			} else if !isValidTag(tag) {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —Ç–µ–≥",
					update.Message.Chat.ID,
				)
				return err
			} else if fromClan.Tag == tag {
				bot.ReplyWithMessage(
					update.Message.MessageID,
					"–≥–µ–Ω–∏–π",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"_id": tag}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –∫–ª–∞–Ω–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
					update.Message.Chat.ID,
				)
				return err
			} else if ok, from := isInClattacks(tag, clattacks); from {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω ["+tag+"] —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç –∫–æ–≥–æ-—Ç–æ",
					update.Message.Chat.ID,
				)
				return err
			} else if ok {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω ["+tag+"] —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç—Å—è",
					update.Message.Chat.ID,
				)
				return err
			}
			var toClan Clan
			err = clans.FindOne(ctx, bson.M{"_id": tag}).Decode(&toClan)
			if err != nil {
				return err
			}
			newClat := Clattack{
				ID:   fromClan.Tag + "_" + tag,
				From: fromClan.Tag,
				To:   tag,
			}
			_, err = clattacks.InsertOne(ctx, newClat)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"–û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–º–±–∞—Ç–æ–≤ –∂–¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –≤–æ–º–±–æ–π",
				update.Message.Chat.ID,
			)
			if err != nil {
				return err
			}
			_, err = bot.SendMessage(
				"–ê–ê–ê–ê!!! –ù–ê –í–ê–° –ù–ê–ü–ê–õ –ö–õ–ê–ù "+fromClan.Tag+". –ø—Ä–µ–¥–ø—Ä–∏–º–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å(",
				toClan.Leader,
			)
			return err
		},
	},
	{
		Name: "cancel",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "–æ—Ç–º–µ–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) != 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω –∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
					update.Message.Chat.ID,
				)
				return err
			}
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ",
					update.Message.Chat.ID,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –≤ —Å–≤–æ—ë–º –∫–ª–∞–Ω–µ",
					update.Message.Chat.ID,
				)
				return err
			}
			var cClan Clan
			err = clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&cClan)
			if err != nil {
				return err
			}
			is, isfr := isInClattacks(cClan.Tag, clattacks)
			if !is {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–∏–∫–æ–≥–æ –Ω–µ –∞—Ç–∞–∫—É–µ—Ç–µ –∏ –Ω–∏–∫–µ–º –Ω–µ –∞—Ç–∞–∫—É–µ—Ç–µ—Å—å. –í–∞–º –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å :)",
					update.Message.Chat.ID)
				return err
			}
			var clat Clattack
			err = clattacks.FindOne(ctx, bson.M{func(isfr bool) string {
				if isfr {
					return "from"
				}
				return "to"
			}(isfr): cClan.Tag}).Decode(&clat)
			if err != nil {
				return err
			}
			var (
				send  bool = true
				oClan Clan
			)
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"_id": func(clat Clattack, isfr bool) string {
					if isfr {
						return clat.To
					}
					return clat.From
				}(clat, isfr)}); err != nil {
				return err
			} else if rCount == 0 {
				send = false
			} else {
				err = clans.FindOne(ctx, bson.M{"_id": func(clat Clattack, isfr bool) string {
					if isfr {
						return clat.To
					}
					return clat.From
				}(clat, isfr)}).Decode(&oClan)
				if err != nil {
					return err
				}
			}
			_, err = clattacks.DeleteOne(ctx, bson.M{"to": clat.To})
			if err != nil {
				return err
			}
			can0, err := getImgs(imgsC, "cancel_0")
			if err != nil {
				return err
			}
			var can1 Imgs
			if send {
				can1, err = getImgs(imgsC, "cancel_1")
				if err != nil {
					return err
				}
			}
			_, err = bot.ReplyWithPhoto(
				update.Message.MessageID, randImg(can0), "–í—ã "+func(isfr bool) string {
					if isfr {
						return "–æ—Ç–º–µ–Ω–∏–ª–∏"
					}
					return "–æ—Ç–∫–ª–æ–Ω–∏–ª–∏"
				}(isfr)+" –∫–ª–∞–Ω–æ–≤—É—é –∞—Ç–∞–∫—É",
				update.Message.Chat.ID,
			)
			if send {
				_, err = bot.SendPhoto(
					randImg(can1),
					"–í–∞—à—É –∫–ª–∞–Ω–æ–≤—É—é –∞—Ç–∞–∫—É "+func(isfr bool) string {
						if isfr {
							return "–æ—Ç–º–µ–Ω–∏–ª–∏"
						}
						return "–æ—Ç–∫–ª–æ–Ω–∏–ª–∏"
					}(isfr)+")",
					oClan.Leader,
				)
				if err != nil {
					return err
				}
			}
			return err
		},
	},
	{
		Name: "accept",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "–ø—Ä–∏–Ω—è—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) != 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			var err error
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"leader": update.Message.From.ID}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∞–Ω–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			var toClan Clan
			err = clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&toClan)
			if err != nil {
				return err
			}
			if is, isfr := isInClattacks(toClan.Tag, clattacks); !is {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–í–∞—à –∫–ª–∞–Ω –Ω–µ –∞—Ç–∞–∫—É–µ—Ç—Å—è/–Ω–µ –∞—Ç–∞–∫—É–µ—Ç",
					update.Message.Chat.ID,
				)
				return err
			} else if isfr {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–ü—Ä–∏–Ω–∏–º–∞—Ç—å –≤–æ–º–±–æ–π –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞—Ç–∞–∫—É–µ–º–∞—è —Å—Ç–æ—Ä–æ–Ω–∞",
					update.Message.Chat.ID,
				)
				return err
			}
			var clat Clattack
			err = clattacks.FindOne(ctx, bson.M{"to": toClan.Tag}).Decode(&clat)
			if err != nil {
				return err
			}
			if rCount, err := clans.CountDocuments(ctx, bson.M{"_id": clat.From}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –∞—Ç–∞–∫—É—é—â–µ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
					update.Message.Chat.ID,
				)
				return err
			}
			var frClan Clan
			err = clans.FindOne(ctx, bson.M{"_id": clat.From}).Decode(&frClan)
			if err != nil {
				return err
			}
			var (
				toclwar, frclwar Clwar
				tWomb            User
			)
			for sClan, clw := range map[*Clan]*Clwar{&toClan: &toclwar, &frClan: &frclwar} {
				var lost uint8 = 0
				for _, id := range sClan.Members {
					if rCount, err := users.CountDocuments(ctx,
						bson.M{"_id": id}); err != nil {
						return err
					} else if rCount == 0 {
						lost++
						continue
					} else {
						err = users.FindOne(ctx, bson.M{"_id": id}).Decode(&tWomb)
						if err != nil {
							return err
						}
						if id == sClan.Leader {
						}
						clw.Health += tWomb.Health
						clw.Force += tWomb.Force
					}
					if uint32(len(sClan.Members)-int(lost)) != 0 {
						clw.Health /= uint32(len(sClan.Members) - int(lost))
						clw.Force /= uint32(len(sClan.Members) - int(lost))
					} else {
						_, err = bot.ReplyWithMessage(
							update.Message.MessageID,
							"–û—à–∏–±–∫–∞: —É –∫–ª–∞–Ω–∞ ["+sClan.Tag+"] –≤—Å–µ –≤–æ–º–±–∞—Ç—ã –ø–æ—Ç–µ—Ä—è–Ω—ã( –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin",
							update.Message.Chat.ID,
						)
						return err
					}
				}
			}
			atimgs, err := getImgs(imgsC, "attacks")
			if err != nil {
				return err
			}
			im := randImg(atimgs)
			ph1, err := bot.ReplyWithPhoto(update.Message.MessageID, im, "", update.Message.Chat.ID)
			if err != nil {
				return err
			}
			var frClanID int64 = frClan.Leader
			if update.Message.Chat.ID != frClan.GroupID {
				frClanID = frClan.GroupID
			}
			ph2, err := bot.SendPhoto(im, "", frClanID)
			if err != nil {
				return err
			}
			war1, err := bot.ReplyWithMessage(ph1, "–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –≤–æ–º–±–æ–π!", update.Message.Chat.ID)
			if err != nil {
				return err
			}
			war2, err := bot.ReplyWithMessage(ph2, fmt.Sprintf(
				"–ê–ê–ê–ê –í–ê–ô–ù–ê–ê–ê–ê–ê!!!\n –í–æ–º–±–∞—Ç %s –≤—Å—ë –∂–µ –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
				womb.Name), frClanID,
			)
			if err != nil {
				return err
			}
			time.Sleep(5 * time.Second)
			h1, h2 := int(toclwar.Health), int(frclwar.Health)
			for _, round := range []int{1, 2, 3} {
				f1 := uint32(2 + rand.Intn(int(toclwar.Force-1)))
				f2 := uint32(2 + rand.Intn(int(frclwar.Force-1)))
				err = bot.EditMessage(
					war1, fmt.Sprintf(
						"–†–ê–£–ù–î %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d",
						round, toClan.Tag, h1, f1, frClan.Tag, h2),
					update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
				err = bot.EditMessage(war2, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d",
					round, frClan.Tag, h2, f2, toClan.Tag, h1), frClanID,
				)
				if err != nil {
					return err
				}
				time.Sleep(3 * time.Second)
				h1 -= int(f2)
				h2 -= int(f1)
				bot.EditMessage(war1, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n[%s]\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - üíî —É–¥–∞—Ä: %d",
					round, toClan.Tag, h1, f1, frClan.Tag, h2, f2), update.Message.Chat.ID,
				)
				if err != nil {
					return err
				}
				bot.EditMessage(war2, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n[%s]:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - üíî —É–¥–∞—Ä: %d",
					round, frClan.Tag, h2, f2, toClan.Tag, h1, f1), frClanID,
				)
				if err != nil {
					return err
				}
				time.Sleep(5 * time.Second)
				if int(h2)-int(f1) <= 5 && int(h1)-int(f2) <= 5 {
					err = bot.EditMessage(war1,
						"–û–±–∞ –∫–ª–∞–Ω–∞ —Å–¥–æ—Ö–ª–∏!!!)\n–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –Ω–æ –∑–∞—Ç–æ –¥–∞.",
						update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2,
						"–û–±–∞ –∫–ª–∞–Ω–∞ —Å–¥–æ—Ö–ª–∏!!!)\n–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –Ω–æ –∑–∞—Ç–æ –¥–∞.",
						frClanID,
					)
					if err != nil {
						return err
					}

					time.Sleep(5 * time.Second)
					break
				} else if int(h2)-int(f1) <= 5 {
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω...",
						round), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–∏—à–µ–Ω–∏—é —É –¥—Ä—É–≥–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω...",
						round), frClanID,
					)
					if err != nil {
						return err
					}
					time.Sleep(3 * time.Second)
					toClan.XP += 10
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` [%s]!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –≤–∞—Å %d",
						toClan.Name, toClan.Tag, toClan.XP), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` [%s]!!!\n–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)",
						toClan.Name, toClan.Tag), frClanID,
					)
					if err != nil {
						return err
					}
					break
				} else if int(h1)-int(f2) <= 5 {
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–∏–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω...",
						round), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–∏—à–µ–Ω–∏—é —É –¥—Ä—É–≥–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω...",
						round), frClanID,
					)
					if err != nil {
						return err
					}
					time.Sleep(3 * time.Second)
					frClan.XP += 10
					err = bot.EditMessage(war2, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d",
						frClan.Name, frClan.Tag, frClan.XP), frClanID,
					)
					if err != nil {
						return err
					}
					womb.Health = 5
					womb.Money = 50
					err = bot.EditMessage(war1, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` [%s]!!!\n–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)",
						frClan.Name, frClan.Tag), update.Message.Chat.ID,
					)
					if err != nil {
						return err
					}

					break
				} else if round == 3 {
					frClan.XP += 10
					if h1 < h2 {
						err = bot.EditMessage(war2, fmt.Sprintf(
							"–ò –ø–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d",
							frClan.Name, frClan.Tag, frClan.XP), frClanID,
						)
						if err != nil {
							return err
						}
						err = bot.EditMessage(war1, fmt.Sprintf(
							"–ò –ø–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` [%s]!!!\n–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)",
							frClan.Name, frClan.Tag), update.Message.Chat.ID,
						)
						if err != nil {
							return err
						}
					} else {
						toClan.XP += 10
						err = bot.EditMessage(war1, fmt.Sprintf(
							"–ü–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` [%s]!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –≤–∞—Å %d",
							toClan.Name, toClan.Tag, toClan.XP), update.Message.Chat.ID,
						)
						if err != nil {
							return err
						}
						err = bot.EditMessage(war2, fmt.Sprintf(
							"–ü–æ–±–µ–¥–∏–ª –∫–ª–∞–Ω `%s` [%s]!!!\n–í–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)",
							toClan.Name, toClan.Tag), frClanID,
						)
						if err != nil {
							return err
						}
					}
				}
			}
			err = docUpd(toClan, bson.M{"_id": toClan.Tag}, clans)
			if err != nil {
				return err
			}
			err = docUpd(frClan, bson.M{"_id": frClan.Tag}, clans)
			if err != nil {
				return err
			}
			_, err = clattacks.DeleteOne(ctx, bson.M{"_id": clat.ID})
			return err
		},
	},
	{
		Name: "status",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[2]) == "—Å—Ç–∞—Ç—É—Å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				sClan Clan
				err   error
			)
			switch len(args) {
			case 3:
				isInUsers, err := getIsInUsers(update.Message.From.ID)
				if !isInUsers {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –≤–æ–º–±–∞—Ç–∞ => –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥.",
						update.Message.Chat.ID,
					)
					return err
				}
				if c, err := clans.CountDocuments(ctx, bson.M{"members": update.Message.From.ID}); err != nil {
					return err
				} else if c == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥.",
						update.Message.Chat.ID,
					)
					return err
				}
				if err := clans.FindOne(ctx, bson.M{"members": update.Message.From.ID}).Decode(&sClan); err != nil {
					return err
				}
			case 4:
				tag := strings.ToUpper(args[3])
				if len(tag) < 3 || len(tag) > 5 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥", update.Message.Chat.ID)
					return err
				}
				if c, err := clans.CountDocuments(ctx, bson.M{"_id": tag}); err != nil {
					return err
				} else if c == 0 {
					_, err = bot.ReplyWithMessage(update.Message.MessageID, "–ö–ª–∞–Ω–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ—Ç...", update.Message.Chat.ID)
					return err
				}
				if err := clans.FindOne(ctx, bson.M{"_id": tag}).Decode(&sClan); err != nil {
					return err
				}
			default:
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–°–õ–ò–®–ö–û–ú. –ú–ù–û–ì–û. –ê–†–ì–£–ú–ï–ù–¢–û–í(((",
					update.Message.Chat.ID,
				)
				return err
			}
			var (
				is            bool
				isfr          bool
				sClanPosition string = "to"
			)
			if is, isfr = isInClattacks(sClan.Tag, clattacks); !is {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–≠—Ç–æ—Ç –∫–ª–∞–Ω –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç –≤ –∞—Ç–∞–∫–∞—Ö)",
					update.Message.Chat.ID,
				)
				return err
			}
			if isfr {
				sClanPosition = "from"
			}
			var (
				sClat Clattack
			)
			if err := clattacks.FindOne(ctx, bson.M{
				sClanPosition: sClan.Tag,
			}).Decode(&sClat); err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"–û—Ç: [%s]\n–ù–∞: [%s]",
					sClat.From,
					sClat.To,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
}

var devtoolsCommands = []command{
	{
		Name: "set_money",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "set_money"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				return nil
			}
			if len(args) < 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			var i uint64
			if i, err = strconv.ParseUint(args[2], 10, 32); err != nil {
				_, err = bot.ReplyWithMessage(
					update.Message.MessageID,
					"–Ω–µ —á–∏—Å–ª–æ",
					update.Message.Chat.ID,
				)
				return err
			}
			_, err = users.UpdateOne(ctx, bson.M{"_id": womb.ID}, bson.M{"$set": bson.M{"money": i}})
			if err != nil {
				debl.Println(err)
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"—É—Å–ø–µ—à–Ω–æ",
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "reset",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "reset"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) < 3 {
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"–º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤",
					update.Message.Chat.ID,
				)
				return err
			}
			switch strings.ToLower(args[2]) {
			case "force":
				womb.Force = 2
			case "health":
				womb.Health = 5
			case "xp":
				womb.XP = 0
			case "all":
				womb.Force = 2
				womb.Health = 5
				womb.XP = 0
			default:
				_, err := bot.ReplyWithMessage(
					update.Message.MessageID,
					"—Ä–µ–∂–∏–º—ã: force/health/xp/all",
					update.Message.Chat.ID,
				)
				return err
			}
			err := docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"—É—Å–ø–µ—à–Ω–æ",
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "info",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "info"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var sWomb User
			if len(args) == 3 {
				if c, err := users.CountDocuments(ctx, bson.M{"name": cins(args[2])}); err != nil {
					return err
				} else if c == 0 {
					_, err = bot.ReplyWithMessage(
						update.Message.MessageID,
						"–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ/—Ç–∞–∫–æ–π",
						update.Message.Chat.ID,
					)
					return err
				}
				err := users.FindOne(ctx, bson.M{"name": cins(args[2])}).Decode(&sWomb)
				if err != nil {
					return err
				}
			} else {
				sWomb = womb
			}
			_, err := bot.ReplyWithMessage(
				update.Message.MessageID,
				fmt.Sprintf(
					"%#v", sWomb,
				),
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "help",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "help"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := bot.ReplyWithMessage(
				update.Message.MessageID,
				"https://telegra.ph/Vombot-devtools-help-10-28",
				update.Message.Chat.ID,
			)
			return err
		},
	},
	{
		Name: "invite",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[1]) == "invite"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				return nil
			}
			_, err := users.UpdateOne(ctx, bson.M{"name": cins(args[2])}, bson.M{"$push": bson.M{"titles": 0}})
			if err != nil {
				return err
			}
			_, err = bot.ReplyWithMessage(
				update.Message.MessageID,
				"—É—Å–ø–µ—à–Ω–æ",
				update.Message.Chat.ID,
			)
			return err
		},
	},
}
