package main

import (
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/go-vk-api/vk"
	lp "github.com/go-vk-api/vk/longpoll/user"
	jsoniter "github.com/json-iterator/go"
)

// Config –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –∏ –º–± –Ω–∞—Å—Ç—Ä–æ–µ–∫
type Config struct {
	Token string `json:"token"`
}

// Title ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
type Title struct {
	Name string `json:"name"`
	Desc string `json:"desc"`
}

// User ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type User struct { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–∑–µ—Ä–∞
	Name   string           `json:"name"`
	XP     uint32           `json:"xp"`
	Health uint32           `json:"health"`
	Force  uint32           `json:"force"`
	Money  uint64           `json:"money"`
	Titles map[uint16]Title `json:"titles"`
}

var users = map[int64]User{}

var titles = map[uint16]Title{
	0: Title{
		Name: "–í–æ–º–±–æ—Ç–µ—Å—Ç–µ—Ä",
		Desc: "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–æ–º–±–æ—Ç–∞; –¥–∞—ë—Ç –ø—Ä–∞–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è devtools",
	},
}

var standartNicknames []string = []string{"–í–æ–º–±–∞—Ç—ã—á", "–í–æ–º–±–∞—Ç—É—Å", "wombatkiller2007", "wombatik", "–±–∞—Ç–≤–æ–º", "–¢–∞–±–º–æ–≤"}

var json = jsoniter.ConfigCompatibleWithStandardLibrary

func checkerr(err error) {
	if err != nil && err.Error() != "EOF" {
		log.Println("ERROR\n\n", err)
	}
}

func loadConfig() (Config, error) {
	file, err := os.Open("config.json")
	if err != nil {
		return Config{}, err
	}
	defer file.Close()
	result := Config{}
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&result)
	file.Close()
	return result, err
}

func loadUsers() {
	file, err := os.Open("users.json")
	checkerr(err)
	defer file.Close()
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&users)
	file.Close()
	checkerr(err)
}

func saveUsers() {
	jsonFile, err := os.Create("users.json")
	checkerr(err)
	data, err := json.Marshal(users)
	checkerr(err)
	defer jsonFile.Close()
	jsonFile.Write(data)
	jsonFile.Close()
}

func isInList(str string, list []string) bool {
	for _, elem := range list {
		if strings.ToLower(str) == strings.ToLower(elem) {
			return true
		}
	}
	return false
}

func sendMsg(message string, peer int64, client *vk.Client) {
	rand.Seed(time.Now().UnixNano())
	err := client.CallMethod("messages.send", vk.RequestParams{
		"peer_id":   peer,
		"message":   message,
		"random_id": rand.Int63(),
	}, nil)
	checkerr(err)
}

func main() {
	conf := Config{}
	conf, err := loadConfig()
	checkerr(err)

	loadUsers()

	client, err := vk.NewClientWithOptions(
		vk.WithToken(conf.Token),
	)
	checkerr(err)

	longpoll, err := lp.NewWithOptions(client, lp.WithMode(lp.ReceiveAttachments))
	checkerr(err)
	stream, err := longpoll.GetUpdatesStream(0)
	checkerr(err)

	log.Println("Start!")

	for update := range stream.Updates {
		switch data := update.Data.(type) {
		case *lp.NewMessage:
			if data.PeerID == -201237807 || data.PeerID == 2000000001 {
				break
			}
			peer, txt := data.PeerID, data.Text
			womb, isInUsers := users[peer]

			log.Println(peer, womb.Name, txt)

			if isInList(txt, []string{"—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å", "/—Å—Ç–∞—Ä—Ç", "/start", "start"}) {
				if isInUsers {
					sendMsg(fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s!", users[peer].Name), peer, client)
				} else {
					sendMsg("–î—Ä–∞—Å—å—Ç–µ. –í–æ–∑—å–º–∏—Ç–µ –≤–æ–º–±–∞—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π `–í–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞` –∏–ª–∏ `–ö—É–ø–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ —É –∞—Ä–∞–±–æ–≤`. –Ω–∞–ø–∏—à–∏ `–ø–æ–º–æ—â—å`", peer, client)
				}
			} else if isInList(txt, []string{"–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞", "–∫—É–ø–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ —É –∞—Ä–∞–±–æ–≤", "—Ö–æ—á—É –≤–æ–º–±–∞—Ç–∞"}) {
				if isInUsers {
					sendMsg("–£ —Ç–µ–±—è –∫–∞–∫ –±—ã —É–∂–µ –µ—Å—Ç—å –≤–æ–º–±–∞—Ç –ª–æ–ª–∫–µ–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫`", peer, client)
				} else {
					users[peer] = User{
						Name:   standartNicknames[rand.Intn(len(standartNicknames))],
						XP:     0,
						Health: 5,
						Force:  2,
						Money:  10,
						Titles: map[uint16]Title{},
					}
					womb = users[peer]
					saveUsers()
					sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–º–±–∞—Ç! –ï–º—É –≤—ã–¥–∞–ª–æ—Å—å –∏–º—è `%s`. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π `–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è [–∏–º—è]` –∑–∞ 3 –º–æ–Ω–µ—Ç—ã", womb.Name), peer, client)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "devtools") {
				if _, ok := womb.Titles[0]; ok {
					cmd := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "devtools "))
					if strings.HasPrefix(cmd, "set money") {
						strNewMoney := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(cmd), "set money "))
						if _, err := strconv.ParseInt(strNewMoney, 10, 64); err == nil {
							i, err := strconv.Atoi(strNewMoney)
							checkerr(err)
							womb.Money = uint64(i)
							users[peer] = womb
							saveUsers()
							sendMsg(fmt.Sprintf("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –®–∏—à–µ–π –Ω–∞ —Å—á–µ—Ç—É: %d", womb.Money), peer, client)
						} else {
							sendMsg("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `devtools set money {–∫–æ–ª-–≤–æ —à–∏—à–µ–π}`", peer, client)
						}
					} else if cmd == "help" {
						sendMsg("https://vk.com/@wombat_bot-kak-polzovatsya-devtools", peer, client)
					}
				} else if strings.TrimSpace(txt) == "devtools on" {
					womb.Titles[0] = titles[0]
					users[peer] = womb
					saveUsers()
					sendMsg("–í—ã–¥–∞–Ω —Ç–∏—Ç—É–ª \"–í–æ–º–±–æ—Ç–µ—Å—Ç–µ—Ä\" (ID: 0)", peer, client)
				}
			} else if isInList(txt, []string{"–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫", "–ø—Ä–æ–¥–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –∞—Ä–∞–±–∞–º", "—Å–ª–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ –≤ —É–Ω–∏—Ç–∞–∑"}) {
				if isInUsers {
					delete(users, peer)
					saveUsers()
					sendMsg("–í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —à—Ç—É–∫–∞. –í—ã - –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å—É—â–µ—Å—Ç–≤–æ", peer, client)
				} else {
					sendMsg("–ù–æ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", peer, client)
				}
			} else if isInList(txt, []string{"–æ –≤–æ–º–±–∞—Ç–µ", "–≤–æ–º–±–∞—Ç –∏–Ω—Ñ–æ"}) {
				if isInUsers {
					strTitles := ""
					for id, elem := range womb.Titles {
						strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
					}
					strTitles = strings.TrimSuffix(strTitles, " | ")
					if strings.TrimSpace(strTitles) == "" {
						strTitles = "–Ω–µ—Ç"
					}
					sendMsg(fmt.Sprintf("–í–æ–º–±–∞—Ç  %s\n–¢–∏—Ç—É–ª—ã: %s\n üï≥ %d XP \n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è \n ‚ö° %d –º–æ—â–∏ \n üí∞ %d —à–∏—à–µ–π", womb.Name, strTitles, womb.XP, womb.Health, womb.Force, womb.Money), peer, client)
				} else {
					sendMsg("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", peer, client)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–ø–æ–º–µ–Ω—è—Ç—å –∏–º—è") {
				if isInUsers {
					name := strings.Title(strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–ø–æ–º–µ–Ω—è—Ç—å –∏–º—è ")))
					if womb.Money >= 3 {
						if isInList(name, []string{"admin", "–≤o–º–±o—Ç", "–≤o–º–±o—Ç", "–≤–æ–º–±o—Ç", "–≤–æ–º–±–æ—Ç"}) {
							sendMsg("–¢–∞–∫–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã –∑–∞–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è", peer, client)
						} else if name != "" {
							womb.Money -= 3
							womb.Name = name
							users[peer] = womb
							saveUsers()
							sendMsg(fmt.Sprintf("–¢–µ–ø–µ—Ä—å –≤–∞—à–µ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∑–æ–≤—É—Ç %s. –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è–ª–∏ 3 —à–∏—à–∞", name), peer, client)
						} else {
							sendMsg("–£ –≤–∞—Å –ø—É—Å—Ç–æ–µ –∏–º—è...", peer, client)
						}
					} else {
						sendMsg("–ú–∞–ª–æ —à–∏—à–µ–π –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!", peer, client)
					}
				} else {
					sendMsg("–î–∞ –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥, –≤—ã –≤–æ–±–º–∞—Ç–∞ –∑–∞–±—ã–ª–∏ –∑–∞–≤–µ—Å—Ç–∏!!!!!!!", peer, client)
				}
			} else if isInList(txt, []string{"–ø–æ–º–æ—â—å", "—Ö–µ–ª–ø", "help", "–∫–æ–º–∞–Ω–¥—ã"}) {
				sendMsg("https://vk.com/@wombat_bot-help", peer, client)
			} else if isInList(txt, []string{"–∫—É–ø–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ", "–ø—Ä–æ–∫–∞—á–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", "–ø—Ä–æ–∫–∞—á–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ"}) {
				if isInUsers {
					if womb.Money >= 5 {
						womb.Money -= 5
						womb.Health++
						users[peer] = womb
						saveUsers()
						sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π", womb.Health, womb.Money), peer, client)
					} else {
						sendMsg("–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –∑–¥–æ—Ä–æ–≤—å–µ = 5 —à–∏—à–µ–π", peer, client)
					}
				} else {
					sendMsg("–£ —Ç—è –≤–∞—â–µ –≤–æ–±–∞—Ç–∞ –Ω–µ—Ç...", peer, client)
				}
			} else if isInList(txt, []string{"–∫—É–ø–∏—Ç—å –º–æ—â—å", "–ø—Ä–æ–∫–∞—á–∫–∞ –º–æ—â–∏", "–ø—Ä–æ–∫–∞—á–∫–∞ —Å–∏–ª—ã", "–ø—Ä–æ–∫–∞—á–∞—Ç—å –º–æ—â—å", "–ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–∏–ª—É"}) {
				if isInUsers {
					if womb.Money >= 3 {
						womb.Money -= 3
						womb.Force++
						users[peer] = womb
						saveUsers()
						sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –º–æ—â–∏ –∏ %d —à–∏—à–µ–π", womb.Force, womb.Money), peer, client)
					} else {
						sendMsg("–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –º–æ—â—å = 3 —à–∏—à–∞", peer, client)
					}
				} else {
					sendMsg("–£ —Ç—è –≤–∞—â–µ –≤–æ–±–∞—Ç–∞ –Ω–µ—Ç...", peer, client)
				}
			} else if isInList(txt, []string{"–ø–æ–∏—Å–∫ –¥–µ–Ω–µ–≥"}) {
				if isInUsers {
					if womb.Money >= 1 {
						womb.Money--
						rand.Seed(time.Now().UnixNano())
						if ch := rand.Int(); ch%2 == 0 {
							rand.Seed(time.Now().UnixNano())
							win := rand.Intn(9) + 1
							womb.Money += uint64(win)
							sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π! –¢–µ–ø–µ—Ä—å –∏—Ö —É –≤–∞—Å %d", win, womb.Money), peer, client)
						} else {
							sendMsg("–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –æ–¥–∏–Ω —à–∏—à –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞–º –¥–µ–Ω–µ–∂–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏, –Ω–æ —É–≤—ã, –≤—ã —Ç–∞–∫ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –Ω–∞—à–ª–∏", peer, client)
						}
						users[peer] = womb
						saveUsers()
					} else {
						sendMsg("–û—Ö—Ä–∞–Ω–Ω–∏–∫–∏ —Ç–µ–±—è –ø—Ä–æ–≥–Ω–∞–ª–∏; –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç —à–∏—à –∑–∞ –ø—Ä–æ—Ö–æ–¥, –∞ —É —Ç–µ–±—è –∏ —à–∏—à–∞-—Ç–æ –Ω–µ—Ç", peer, client)
					}
				} else {
					sendMsg("–ê —Ç—ã –∫—É–¥–∞? –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", peer, client)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–æ —Ç–∏—Ç—É–ª–µ") {
				strID := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–æ —Ç–∏—Ç—É–ª–µ "))
				if _, err := strconv.ParseInt(strID, 10, 64); err == nil {
					i, err := strconv.Atoi(strID)
					checkerr(err)
					ID := uint16(i)
					if elem, ok := titles[ID]; ok {
						sendMsg(fmt.Sprintf("%s | ID: %d\n%s", elem.Name, ID, elem.Desc), peer, client)
					} else {
						sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏—Ç—É–ª–∞ –ø–æ ID %d", ID), peer, client)
					}
				} else {
					sendMsg("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–æ —Ç–∏—Ç—É–ª–µ {ID —Ç–∏—Ç—É–ª–∞}`", peer, client)
				}
			}
		}
	}
}
