package main

import (
	"context"
	"fmt"
	"log"
	"math/rand"
	"os"
	// "sort"
	tg "github.com/go-telegram-bot-api/telegram-bot-api"
	jsoniter "github.com/json-iterator/go"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"strconv"
	"strings"
	"time"
)

// Config –Ω—É–∂–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
type Config struct {
	Token    string `json:"tg_token"`
	MongoURL string `json:"mongo_url"`
}

// Title ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞
type Title struct {
	Name string `bson:"name"`
	Desc string `bson:"desc,omitempty"`
}

// User ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type User struct { // –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–∑–µ—Ä–∞
	ID     int64    `bson:"_id"`
	Name   string   `bson:"name,omitempty"`
	XP     uint32   `bson:"xp"`
	Health uint32   `bson:"health"`
	Force  uint32   `bson:"force"`
	Money  uint64   `bson:"money"`
	Titles []uint16 `bson:"titles"`
	Subs   map[string]int64
}

// Attack —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∞—Ç–∞–∫—É
type Attack struct {
	ID   int   `bson:"_id"`
	From int64 `bson:"from"`
	To   int64 `bson:"to"`
}

var ctx = context.TODO()
var json = jsoniter.ConfigCompatibleWithStandardLibrary

// checkerr —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ—à–∏–±–æ–∫ –±–µ–∑ –ø–∞–Ω–∏–∫–∏
func checkerr(err error) {
	if err != nil && err.Error() != "EOF" {
		log.Panic("ERROR\n\n", err)
	}
}

// checkPanErr —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ—à–∏–±–∫—É —Å –ø–∞–Ω–∏–∫–æ–π
func checkPanErr(err error) {
	if err != nil && err.Error() != "EOF" {
		panic(err)
	}
}

// loadConfig –Ω—É–∂—É–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–≤–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—â–∏—Ö –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π
func loadConfig() Config {
	file, err := os.Open("config.json")
	if err != nil && err.Error() != "EOF" {
		checkerr(err)
		return Config{}
	}
	defer file.Close()
	var result = Config{}
	decoder := json.NewDecoder(file)
	err = decoder.Decode(&result)
	checkPanErr(err)
	return result
}

var conf = loadConfig()

// isInList –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
func isInList(str string, list []string) bool {
	for _, elem := range list {
		if strings.ToLower(str) == strings.ToLower(elem) {
			return true
		}
	}
	return false
}

// isInSubs _
func isInSubs(sub int64, arr map[string]int64) (bool, string) {
	for alias, elem := range arr {
		if sub == elem {
			return true, alias
		}
	}
	return false, ""
}

// hasTitle _
func hasTitle(i uint16, list []uint16) bool {
	for _, elem := range list {
		if i == elem {
			log.Println(elem)
			return true
		}
	}
	return false
}

// toDoc _
func toDoc(v interface{}) (doc *bson.D, err error) {
	data, err := bson.Marshal(v)
	if err != nil {
		return
	}

	err = bson.Unmarshal(data, &doc)
	return
}

// docUpd _
func docUpd(v User, filter bson.D, col mongo.Collection) {
	doc, err := toDoc(v)
	checkerr(err)
	ctx := context.TODO()
	_, err = col.UpdateOne(ctx, filter, bson.M{"$set": doc})
}

// sendMsg –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func sendMsg(message string, chatID int64, bot *tg.BotAPI) int {
	msg := tg.NewMessage(chatID, message)
	mess, err := bot.Send(msg)
	checkerr(err)
	return mess.MessageID
}

// sendMsgMD –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å markdown
func sendMsgMD(message string, chatID int64, bot *tg.BotAPI) int {
	msg := tg.NewMessage(chatID, message)
	mess, err := bot.Send(msg)
	msg.ParseMode = "markdown"
	checkerr(err)
	return mess.MessageID
}

// replyToMsg –æ—Ç–≤–µ—á–∞–µ—Ç –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
func replyToMsg(replyID int, message string, chatID int64, bot *tg.BotAPI) int {
	msg := tg.NewMessage(chatID, message)
	msg.ReplyToMessageID = replyID
	mess, err := bot.Send(msg)
	checkerr(err)
	return mess.MessageID
}

// replyToMsgMD –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å markdown
func replyToMsgMD(replyID int, message string, chatID int64, bot *tg.BotAPI) int {
	msg := tg.NewMessage(chatID, message)
	msg.ReplyToMessageID = replyID
	msg.ParseMode = "markdown"
	mess, err := bot.Send(msg)
	checkerr(err)
	return mess.MessageID
}

// delMsg —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
func delMsg(ID int, chatID int64, bot *tg.BotAPI) {
	deleteMessageConfig := tg.DeleteMessageConfig{
		ChatID:    chatID,
		MessageID: ID,
	}
	_, err := bot.DeleteMessage(deleteMessageConfig)
	checkerr(err)
}

// isInAttacks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1) –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –∞—Ç–∞–∫–∞—Ö 2) —è–≤–ª—è–ª—Å—è –ª–∏ –æ–Ω from
func isInAttacks(id int64, a *mongo.Collection) (bool, bool) {
	cFrom, err := a.CountDocuments(ctx, bson.D{{"from", id}})
	checkerr(err)
	isFrom := cFrom != 0
	cTo, err := a.CountDocuments(ctx, bson.D{{"to", id}})
	checkerr(err)
	isTo := cTo != 0
	if isFrom || isTo {
		return true, isFrom
	}
	return false, false
}

var standartNicknames []string = []string{"–í–æ–º–±–∞—Ç—ã—á", "–í–æ–º–±–∞—Ç—É—Å", "wombatkiller2007", "wombatik", "–±–∞—Ç–≤–æ–º", "–¢–∞–±–º–æ–≤", "–í–æ–º–±–∞–±—É—à–∫–∞", "womboba"}

func main() {
	mongoClient, err := mongo.NewClient(options.Client().ApplyURI(conf.MongoURL))
	checkPanErr(err)
	err = mongoClient.Connect(ctx)
	checkPanErr(err)
	defer mongoClient.Disconnect(ctx)

	db := *(mongoClient.Database("wombot"))

	users := *(db.Collection("users"))

	titles := []Title{}

	titlesC := *(db.Collection("titles"))
	cur, err := titlesC.Find(ctx, bson.D{})
	defer cur.Close(ctx)
	checkerr(err)
	for cur.Next(ctx) {
		var nextOne Title
		err := cur.Decode(&nextOne)
		checkPanErr(err)
		titles = append(titles, nextOne)
	}
	cur.Close(ctx)

	bot, err := tg.NewBotAPI(conf.Token)
	checkPanErr(err)

	u := tg.NewUpdate(0)
	u.Timeout = 1
	updates, err := bot.GetUpdatesChan(u)
	checkPanErr(err)
	log.Println("Start!")

	for update := range updates {
		if update.Message == nil {
			continue
		}
		if update.Message.Chat.ID != int64(update.Message.From.ID) {
			go func(update tg.Update, titles []Title, titlesC mongo.Collection, bot *tg.BotAPI) {
				peer, from := update.Message.Chat.ID, update.Message.From.ID
				txt, messID := update.Message.Text, update.Message.MessageID
				users = *(db.Collection("users"))

				womb := User{}
				wFil := bson.D{{"_id", from}}
				rCount, err := users.CountDocuments(ctx, wFil)
				checkerr(err)
				isInUsers := rCount != 0
				if isInUsers {
					err = users.FindOne(ctx, wFil).Decode(&womb)
					checkerr(err)
				}

				log.Println("–≥—Ä—É–ø–ø–∞", peer, from, update.Message.From.UserName, womb.Name, txt)
				if strings.HasPrefix(strings.ToLower(txt), "–æ –≤–æ–º–±–∞—Ç–µ") {
					strID := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–æ –≤–æ–º–±–∞—Ç–µ"))
					var (
						ID    int64
						tWomb User
						ok    bool = true
					)
					if strID == "" {
						if isInUsers {
							ID = int64(from)
							tWomb = womb
						} else {
							replyToMsg(messID, "–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", peer, bot)
							return
						}
					} else if ID, err = strconv.ParseInt(strID, 10, 64); err == nil {
						rCount, err = users.CountDocuments(ctx, bson.D{{"_id", ID}})
						checkerr(err)
						if rCount == 0 {
							replyToMsg(messID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", ID), peer, bot)
							return
						}
						err = users.FindOne(ctx, bson.D{{"_id", ID}}).Decode(&tWomb)
						checkerr(err)
					} else if ID, ok = womb.Subs[strID]; ok {
						err = users.FindOne(ctx, bson.D{{"_id", womb.Subs[strID]}}).Decode(&tWomb)
						checkerr(err)
					} else if !ok {
						replyToMsg(messID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å –∞–ª–∏–∞—Å–æ–º `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), peer, bot)
						return
					} else {
						replyToMsg(messID, "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ @dikey0ficial\n\nabout womb: else", peer, bot)
						return
					}
					strTitles := ""
					tCount := len(tWomb.Titles)
					if tCount != 0 {
						for _, id := range tWomb.Titles {
							elem := Title{}
							err = titlesC.FindOne(ctx, bson.D{{"_id", id}}).Decode(&elem)
							checkerr(err)
							strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
						}
						strTitles = strings.TrimSuffix(strTitles, " | ")
					} else {
						strTitles = "–Ω–µ—Ç"
					}
					link := fmt.Sprintf("tg://user?id=%d", ID)
					replyToMsgMD(messID, fmt.Sprintf("–í–æ–º–±–∞—Ç  [%s](%s)  (ID: %d)\n–¢–∏—Ç—É–ª—ã: %s\n üï≥ %d XP \n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è \n ‚ö° %d –º–æ—â–∏ \n üí∞ %d —à–∏—à–µ–π", tWomb.Name, link, ID, strTitles, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money), peer, bot)
				} else if strings.HasPrefix(strings.ToLower(txt), "—Ö—Ä—é") {
					mID := replyToMsg(messID, "–ê–•–¢–£–ù–ì –®–í–ê–ô–ù–ï –®–í–ê–ô–ù–ï –®–í–ê–ô–ù–ï –®–í–ê–ô–ù–ï –ê–ê–ê–ê–ê–ê–ê", peer, bot)
					time.Sleep(2 * time.Second)
					delMsg(mID, peer, bot)
				} else if isInList(txt, []string{"–ø–æ–º–æ—â—å", "—Ö–µ–ª–ø", "help", "–∫–æ–º–∞–Ω–¥—ã", "/help", "/help@wombatobot"}) {
					replyToMsg(messID, "https://telegra.ph/Pomoshch-10-28", peer, bot)
				} else if isInList(txt, []string{"—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å", "/—Å—Ç–∞—Ä—Ç", "/start", "/start@wombatobot", "start", "–ø—Ä–∏–≤–µ—Ç"}) {
					replyToMsg(messID, "–í –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –ø–∏—Å–∞—Ç—å –≤–æ–º–±–æ—Ç—É –ù–ï –ù–ê–î–û, –æ–Ω —Å–¥–µ–ª–∞–Ω –¥–ª—è –ª—Å! –ü–∏—à–∏—Ç–µ –≤ –ª—Å: @wombatobot", peer, bot)
				} else if strings.HasPrefix(strings.ToLower(txt), "–æ —Ç–∏—Ç—É–ª–µ") {
					strID := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–æ —Ç–∏—Ç—É–ª–µ"))
					if strID == "" {
						replyToMsg(messID, "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π ID —Ç–∏—Ç—É–ª–∞", peer, bot)
					} else if i, err := strconv.ParseInt(strID, 10, 64); err == nil {
						checkerr(err)
						ID := uint16(i)
						rCount, err := titlesC.CountDocuments(ctx, bson.D{{"_id", ID}})
						checkerr(err)
						if rCount != 0 {
							elem := Title{}
							err = titlesC.FindOne(ctx, bson.D{{"_id", ID}}).Decode(&elem)
							replyToMsg(messID, fmt.Sprintf("%s | ID: %d\n%s", elem.Name, ID, elem.Desc), peer, bot)
						} else {
							replyToMsg(messID, fmt.Sprintf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏—Ç—É–ª–∞ –ø–æ ID %d", ID), peer, bot)
						}
					} else {
						sendMsg("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–æ —Ç–∏—Ç—É–ª–µ {ID —Ç–∏—Ç—É–ª–∞}`", peer, bot)
					}
				} else if strings.HasPrefix(strings.ToLower(txt), "–æ –≤–æ–º–±–æ—Ç–µ") {
					replyToMsgMD(messID, "https://telegra.ph/O-vombote-10-29\n**–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–º–±–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–æ –≤–æ–º–±–∞—Ç–µ`**", peer, bot)
				}
			}(update, titles, titlesC, bot)
			continue
		}
		go func(update tg.Update, titles []Title, titlesC mongo.Collection, bot *tg.BotAPI) {
			peer, from := update.Message.Chat.ID, update.Message.From.ID
			txt, messID := update.Message.Text, update.Message.MessageID
			if from == messID {
				log.Println("AAAAAAAAAAAAAA")
			}
			users = *(db.Collection("users"))

			womb := User{}

			wFil := bson.D{{"_id", peer}}

			rCount, err := users.CountDocuments(ctx, wFil)
			checkerr(err)
			isInUsers := rCount != 0
			if isInUsers {
				err = users.FindOne(ctx, wFil).Decode(&womb)
				checkerr(err)
			}

			log.Println(peer, update.Message.From.UserName, womb.Name, txt)

			if isInList(txt, []string{"—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å", "/—Å—Ç–∞—Ä—Ç", "/start", "/start@wombatobot", "start", "–ø—Ä–∏–≤–µ—Ç"}) {
				if isInUsers {
					sendMsg(fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, %s!", womb.Name), peer, bot)
				} else {
					sendMsg("–ü—Ä–∏–≤–µ—Ç! \n ‚Äî –ó–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞: `–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞`\n ‚Äî –ü–æ–º–æ—â—å: https://telegra.ph/Pomoshch-10-28 (/help)\n ‚Äî –ö–∞–Ω–∞–ª –±–æ—Ç–∞, –≥–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–∞: @wombatobot_channel\n –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!", peer, bot)
				}
			} else if isInList(txt, []string{"–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞", "–∫—É–ø–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ —É –∞—Ä–∞–±–æ–≤", "—Ö–æ—á—É –≤–æ–º–±–∞—Ç–∞"}) {
				if isInUsers {
					sendMsg("–£ —Ç–µ–±—è –∫–∞–∫ –±—ã —É–∂–µ –µ—Å—Ç—å –≤–æ–º–±–∞—Ç –ª–æ–ª–∫–µ–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫`", peer, bot)
				} else {
					rand.Seed(peer)
					newWomb := User{
						ID:     peer,
						Name:   standartNicknames[rand.Intn(len(standartNicknames))],
						XP:     0,
						Health: 5,
						Force:  2,
						Money:  10,
						Titles: []uint16{},
						Subs:   map[string]int64{},
					}
					_, err = users.InsertOne(ctx, &newWomb)
					checkerr(err)

					sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–º–±–∞—Ç! –ï–º—É –≤—ã–¥–∞–ª–æ—Å—å –∏–º—è `%s`. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π `–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è [–∏–º—è]` –∑–∞ 3 –º–æ–Ω–µ—Ç—ã", newWomb.Name), peer, bot)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "devtools") {
				if hasTitle(0, womb.Titles) {
					cmd := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "devtools"))
					if strings.HasPrefix(cmd, "set money") {
						strNewMoney := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(cmd), "set money"))
						if i, err := strconv.ParseUint(strNewMoney, 10, 64); err == nil {
							checkerr(err)
							womb.Money = i
							docUpd(womb, wFil, users)
							sendMsg(fmt.Sprintf("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –®–∏—à–µ–π –Ω–∞ —Å—á–µ—Ç—É: %d", womb.Money), peer, bot)
						} else {
							sendMsg("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `devtools set money {–∫–æ–ª-–≤–æ —à–∏—à–µ–π}`", peer, bot)
						}
					} else if strings.HasPrefix(cmd, "reset") {
						arg := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(cmd), "reset"))
						switch arg {
						case "force":
							womb.Force = 2
							docUpd(womb, wFil, users)
							sendMsg("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", peer, bot)
						case "health":
							womb.Health = 5
							docUpd(womb, wFil, users)
							sendMsg("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", peer, bot)
						case "xp":
							womb.XP = 0
							docUpd(womb, wFil, users)
							sendMsg("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", peer, bot)
						case "all":
							womb.Force = 2
							womb.Health = 5
							womb.XP = 0
							docUpd(womb, wFil, users)
							sendMsg("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", peer, bot)
						default:
							sendMsg("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `devtools reset [force/health/xp/all]`", peer, bot)
						}
					} else if cmd == "help" {
						sendMsg("https://telegra.ph/Vombot-devtools-help-10-28", peer, bot)
					}
				} else if strings.TrimSpace(txt) == "devtools on" {
					womb.Titles = append(womb.Titles, 0)
					docUpd(womb, wFil, users)
					sendMsg("–í—ã–¥–∞–Ω —Ç–∏—Ç—É–ª \"–í–æ–º–±–æ—Ç–µ—Å—Ç–µ—Ä\" (ID: 0)", peer, bot)
				}
			} else if isInList(txt, []string{"–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫", "–ø—Ä–æ–¥–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –∞—Ä–∞–±–∞–º", "—Å–ª–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ –≤ —É–Ω–∏—Ç–∞–∑"}) {
				if isInUsers {
					if !(hasTitle(1, womb.Titles)) {
						_, err = users.DeleteOne(ctx, wFil)
						checkerr(err)
						sendMsg("–í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —à—Ç—É–∫–∞. –í—ã - –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å—É—â–µ—Å—Ç–≤–æ", peer, bot)
					} else {
						sendMsg("–û—à–∏–±–∫–∞: –≤—ã –ª–∏—à–µ–Ω—ã –ø—Ä–∞–≤–∞ —É–Ω–∏—á—Ç–æ–∂–∞—Ç—å –≤–æ–º–±–∞—Ç–∞; –æ–±—Ä–∞—Ç–∏—Ç–∫—Å—å –∫ @dikey0ficial –∑–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º", peer, bot)
					}
				} else {
					sendMsg("–ù–æ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", peer, bot)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–ø–æ–º–µ–Ω—è—Ç—å –∏–º—è") {
				if isInUsers {
					name := strings.Title(strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–ø–æ–º–µ–Ω—è—Ç—å –∏–º—è ")))
					if womb.Money >= 3 {
						if isInList(name, []string{"admin", "–≤o–º–±o—Ç", "–≤o–º–±o—Ç", "–≤–æ–º–±o—Ç", "–≤–æ–º–±–æ—Ç", "–±–æ—Ç", "bot", "–±o—Ç", "b–æt"}) {
							sendMsg("–¢–∞–∫–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã –∑–∞–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è", peer, bot)
						} else if name != "" {
							womb.Money -= 3
							split := strings.Fields(txt)
							caseName := strings.Join(split[2:], " ")
							womb.Name = caseName
							docUpd(womb, wFil, users)

							sendMsg(fmt.Sprintf("–¢–µ–ø–µ—Ä—å –≤–∞—à–µ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∑–æ–≤—É—Ç %s. –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è–ª–∏ 3 —à–∏—à–∞", caseName), peer, bot)
						} else {
							sendMsg("–£ –≤–∞—Å –ø—É—Å—Ç–æ–µ –∏–º—è...", peer, bot)
						}
					} else {
						sendMsg("–ú–∞–ª–æ —à–∏—à–µ–π –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!", peer, bot)
					}
				} else {
					sendMsg("–î–∞ –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥, –≤—ã –≤–æ–±–º–∞—Ç–∞ –∑–∞–±—ã–ª–∏ –∑–∞–≤–µ—Å—Ç–∏!!!!!!!", peer, bot)
				}
			} else if isInList(txt, []string{"–ø–æ–º–æ—â—å", "—Ö–µ–ª–ø", "help", "–∫–æ–º–∞–Ω–¥—ã", "/help", "/help@wombatobot"}) {
				sendMsg("https://telegra.ph/Pomoshch-10-28", peer, bot)
			} else if isInList(txt, []string{"–∫—É–ø–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ", "–ø—Ä–æ–∫–∞—á–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", "–ø—Ä–æ–∫–∞—á–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ"}) {
				if isInUsers {
					if womb.Money >= 5 {
						if uint64(womb.Health+1) < 2^32 {
							womb.Money -= 5
							womb.Health++
							docUpd(womb, wFil, users)
							sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π", womb.Health, womb.Money), peer, bot)
						} else {
							sendMsg("–û—à–∏–±–∫–∞: –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è (2 –≤ 32 —Å—Ç–µ–ø–µ–Ω–∏). –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Å –≤–æ–∑–º—É—â–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dikey0ficial", peer, bot)
						}
					} else {
						sendMsg("–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –∑–¥–æ—Ä–æ–≤—å–µ = 5 —à–∏—à–µ–π", peer, bot)
					}
				} else {
					sendMsg("–£ —Ç—è –≤–∞—â–µ –≤–æ–±–∞—Ç–∞ –Ω–µ—Ç...", peer, bot)
				}
			} else if isInList(txt, []string{"–∫—É–ø–∏—Ç—å –º–æ—â—å", "–ø—Ä–æ–∫–∞—á–∫–∞ –º–æ—â–∏", "–ø—Ä–æ–∫–∞—á–∫–∞ —Å–∏–ª—ã", "–ø—Ä–æ–∫–∞—á–∞—Ç—å –º–æ—â—å", "–ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–∏–ª—É"}) {
				if isInUsers {
					if womb.Money >= 3 {
						if uint64(womb.Force+1) < 2^32 {
							womb.Money -= 3
							womb.Force++
							docUpd(womb, wFil, users)
							sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –º–æ—â–∏ –∏ %d —à–∏—à–µ–π", womb.Force, womb.Money), peer, bot)
						} else {
							sendMsg("–û—à–∏–±–∫–∞: –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è (2 –≤ 32 —Å—Ç–µ–ø–µ–Ω–∏). –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Å –≤–æ–∑–º—É—â–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @dikey0ficial", peer, bot)
						}
					} else {
						sendMsg("–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –º–æ—â—å = 3 —à–∏—à–∞", peer, bot)
					}
				} else {
					sendMsg("–£ —Ç—è –≤–∞—â–µ –≤–æ–±–∞—Ç–∞ –Ω–µ—Ç...", peer, bot)
				}
			} else if isInList(txt, []string{"–ø–æ–∏—Å–∫ –¥–µ–Ω–µ–≥"}) {
				if isInUsers {
					if womb.Money >= 1 {
						womb.Money--
						rand.Seed(time.Now().UnixNano())
						if ch := rand.Int(); ch%2 == 0 || hasTitle(2, womb.Titles) && (ch%2 == 0 || ch%3 == 0) {
							rand.Seed(time.Now().UnixNano())
							win := rand.Intn(9) + 1
							womb.Money += uint64(win)
							if addXP := rand.Intn(512 - 1); addXP < 5 {
								womb.XP += uint32(addXP)
								sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π, –∞ –µ—â—ë –≤–∞–º –¥–∞–ª–∏ %d XP! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –∏ %d XP", win, addXP, womb.Money, womb.XP), peer, bot)
							} else {
								sendMsg(fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π! –¢–µ–ø–µ—Ä—å –∏—Ö —É –≤–∞—Å %d", win, womb.Money), peer, bot)
							}
						} else {
							sendMsg("–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –æ–¥–∏–Ω —à–∏—à –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞–º –¥–µ–Ω–µ–∂–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏, –Ω–æ —É–≤—ã, –≤—ã —Ç–∞–∫ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –Ω–∞—à–ª–∏", peer, bot)
						}
						docUpd(womb, wFil, users)

					} else {
						sendMsg("–û—Ö—Ä–∞–Ω–Ω–∏–∫–∏ —Ç–µ–±—è –ø—Ä–æ–≥–Ω–∞–ª–∏; –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç —à–∏—à –∑–∞ –ø—Ä–æ—Ö–æ–¥, –∞ —É —Ç–µ–±—è –∏ —à–∏—à–∞-—Ç–æ –Ω–µ—Ç", peer, bot)
					}
				} else {
					sendMsg("–ê —Ç—ã –∫—É–¥–∞? –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", peer, bot)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–æ —Ç–∏—Ç—É–ª–µ") {
				strID := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–æ —Ç–∏—Ç—É–ª–µ"))
				if strID == "" {
					sendMsg("–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π ID —Ç–∏—Ç—É–ª–∞", peer, bot)
				} else if i, err := strconv.ParseInt(strID, 10, 64); err == nil {
					checkerr(err)
					ID := uint16(i)
					rCount, err := titlesC.CountDocuments(ctx, bson.D{{"_id", ID}})
					checkerr(err)
					if rCount != 0 {
						elem := Title{}
						err = titlesC.FindOne(ctx, bson.D{{"_id", ID}}).Decode(&elem)
						sendMsg(fmt.Sprintf("%s | ID: %d\n%s", elem.Name, ID, elem.Desc), peer, bot)
					} else {
						sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏—Ç—É–ª–∞ –ø–æ ID %d", ID), peer, bot)
					}
				} else {
					sendMsg("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–æ —Ç–∏—Ç—É–ª–µ {ID —Ç–∏—Ç—É–ª–∞}`", peer, bot)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è") {
				args := strings.Fields(strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")))
				if len(args) == 0 {
					sendMsg("–û—à–∏–±–∫–∞: –ø—Ä–æ–ø—É—â–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã `ID` –∏ `–∞–ª–∏–∞—Å`. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è [ID] [–∞–ª–∏–∞—Å (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)]`", peer, bot)
				} else if len(args) == 1 {
					sendMsg("–û—à–∏–±–∫–∞: –ø—Ä–æ–ø—É—â–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç `–∞–ª–∏–∞—Å`. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è [ID] [–∞–ª–∏–∞—Å (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)]`", peer, bot)
				} else if len(args) == 2 {
					if ID, err := strconv.ParseInt(args[0], 10, 64); err == nil {
						if _, err := strconv.ParseInt(args[1], 10, 64); err == nil {
							sendMsg("–û—à–∏–±–∫–∞: –∞–ª–∏–∞—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", peer, bot)
						} else {
							if elem, ok := womb.Subs[args[1]]; !ok {
								rCount, err = users.CountDocuments(ctx, bson.D{{"_id", ID}})
								checkerr(err)
								subbed, name := isInSubs(ID, womb.Subs)
								if subbed {
									sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–æ–º–±–∞—Ç–∞ —Å ID %d (–∞–ª–∏–∞—Å: %s). –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è %s\"", ID, name, name), peer, bot)
									return
								}
								if rCount != 0 {
									womb.Subs[args[1]] = ID
									docUpd(womb, wFil, users)
									sendMsg(fmt.Sprintf("–í–æ–º–±–∞—Ç —Å ID %d –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏", ID), peer, bot)
								} else {
									sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", ID), peer, bot)
								}
							} else {
								sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –∞–ª–∏–∞—Å %s –∑–∞–Ω—è—Ç id %d", args[1], elem), peer, bot)
							}
						}
					} else {
						sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: `%s` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º", args[0]), peer, bot)
					}
				} else {
					sendMsg("–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è [ID] [–∞–ª–∏–∞—Å (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)]", peer, bot)
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è") {
				alias := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è"))
				if _, ok := womb.Subs[alias]; ok {
					delete(womb.Subs, alias)
					docUpd(womb, wFil, users)

					sendMsg(fmt.Sprintf("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–ª–∏–∞—Å–æ–º %s", alias), peer, bot)
				} else {
					sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–ª–∏–∞—Å–æ–º `%s`", alias), peer, bot)
				}
			} else if isInList(txt, []string{"–ø–æ–¥–ø–∏—Å–∫–∏", "–º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "—Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"}) {
				strSubs := "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:"
				if len(womb.Subs) != 0 {
					for alias, id := range womb.Subs {
						rCount, err = users.CountDocuments(ctx, bson.D{{"_id", id}})
						checkerr(err)
						if rCount != 0 {
							tWomb := User{}
							err = users.FindOne(ctx, bson.D{{"_id", id}}).Decode(&tWomb)
							checkerr(err)
							strSubs += fmt.Sprintf("\n %s | ID: %d | –ê–ª–∏–∞—Å: %s", tWomb.Name, id, alias)
						} else {
							strSubs += fmt.Sprintf("\n –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∞–ª–∏–∞—Å—É `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω", alias)
						}
					}
				} else {
					strSubs = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫"
				}
				sendMsg(strSubs, peer, bot)
			} else if isInList(txt, []string{"–º–æ–∏ –≤–æ–º–±–∞—Ç—ã", "–º–æ–∏ –≤–æ–º–±–∞—Ç—Ä–æ–Ω—ã", "–≤–æ–º–±–∞—Ç—Ä–æ–Ω—ã", "–ª–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–æ–∫"}) {
				if len(womb.Subs) == 0 {
					sendMsg("–£ —Ç–µ–±—è –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫", peer, bot)
					return
				}
				for alias, ID := range womb.Subs {
					rCount, err := users.CountDocuments(ctx, bson.D{{"_id", ID}})
					checkerr(err)
					if rCount != 0 {
						tWomb := User{}
						err = users.FindOne(ctx, bson.D{{"_id", ID}}).Decode(&tWomb)
						checkerr(err)
						strTitles := ""
						tCount := len(tWomb.Titles)
						if tCount != 0 {
							for _, id := range tWomb.Titles {
								elem := Title{}
								err = titlesC.FindOne(ctx, bson.D{{"_id", id}}).Decode(&elem)
								checkerr(err)
								strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
							}
							strTitles = strings.TrimSuffix(strTitles, " | ")
						} else {
							strTitles = "–Ω–µ—Ç"
						}
						sendMsg(fmt.Sprintf("–í–æ–º–±–∞—Ç  %s (ID: %d; –ê–ª–∏–∞—Å: %s)\n–¢–∏—Ç—É–ª—ã: %s\n üï≥ %d XP \n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è \n ‚ö° %d –º–æ—â–∏ \n üí∞ %d —à–∏—à–µ–π", tWomb.Name, ID, alias, strTitles, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money), peer, bot)
					} else {
						sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å –∞–ª–∏–∞—Å–æ–º `%s` –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", alias), peer, bot)
					}
				}
			} else if strings.HasPrefix(strings.ToLower(txt), "–æ –≤–æ–º–±–∞—Ç–µ") {
				strID := strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–æ –≤–æ–º–±–∞—Ç–µ"))
				var (
					ID    int64
					tWomb User
					ok    bool
				)
				if strID == "" {
					if isInUsers {
						ID = peer
						tWomb = womb
					} else {
						sendMsg("–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", peer, bot)
						return
					}
				} else if ID, err = strconv.ParseInt(strID, 10, 64); err == nil {
					rCount, err = users.CountDocuments(ctx, bson.D{{"_id", ID}})
					checkerr(err)
					if rCount == 0 {
						sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", ID), peer, bot)
						return
					}
					err = users.FindOne(ctx, bson.D{{"_id", ID}}).Decode(&tWomb)
					checkerr(err)
				} else if ID, ok = womb.Subs[strID]; ok {
					err = users.FindOne(ctx, bson.D{{"_id", womb.Subs[strID]}}).Decode(&tWomb)
					checkerr(err)
				} else if !ok {
					replyToMsg(messID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —Å –∞–ª–∏–∞—Å–æ–º `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), peer, bot)
					return
				} else {
					replyToMsg(messID, "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ @dikey0ficial\n\nabout womb: else", peer, bot)
					return
				}
				strTitles := ""
				tCount := len(tWomb.Titles)
				if tCount != 0 {
					for _, id := range tWomb.Titles {
						elem := Title{}
						err = titlesC.FindOne(ctx, bson.D{{"_id", id}}).Decode(&elem)
						checkerr(err)
						strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
					}
					strTitles = strings.TrimSuffix(strTitles, " | ")
				} else {
					strTitles = "–Ω–µ—Ç"
				}
				sendMsgMD(fmt.Sprintf("–í–æ–º–±–∞—Ç  %s (ID: %d)\n–¢–∏—Ç—É–ª—ã: %s\n üï≥ %d XP \n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è \n ‚ö° %d –º–æ—â–∏ \n üí∞ %d —à–∏—à–µ–π", tWomb.Name, ID, strTitles, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money), peer, bot)
			} else if strings.HasPrefix(strings.ToLower(txt), "–æ –≤–æ–º–±–æ—Ç–µ") {
				sendMsgMD("https://telegra.ph/O-vombote-10-29\n**–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–º–±–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–æ –≤–æ–º–±–∞—Ç–µ`**", peer, bot)
			} else if strings.HasPrefix(strings.ToLower(txt), "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏") {
				args := strings.Fields(strings.TrimSpace(strings.TrimPrefix(strings.ToLower(txt), "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏")))
				if len(args) < 2 {
					sendMsg("–û—à–∏–±–∫–∞: –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç(—ã). –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏ [–∫–æ–ª-–≤–æ] [ID/–∞–ª–∏–∞—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è]`", peer, bot)
				} else if len(args) > 2 {
					sendMsg("–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏ [–∫–æ–ª-–≤–æ] [ID/–∞–ª–∏–∞—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è]`", peer, bot)
				} else {
					if amount, err := strconv.ParseUint(args[0], 10, 64); err == nil {
						var ID int64
						if ID, err = strconv.ParseInt(args[1], 10, 64); err != nil {
							var ok bool
							if ID, ok = womb.Subs[args[1]]; !ok {
								sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –∞–ª–∏–∞—Å–∞ %s –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", args[1]), peer, bot)
								return
							}
						}
						if womb.Money > amount {
							if amount != 0 {
								if ID == peer {
									sendMsg("–¢—ã —á–∏—Ç–µ—Ä –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!!! –Ω–∏–¥–∞–º —Ç–µ–±–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏", peer, bot)
									return
								}
								rCount, err = users.CountDocuments(ctx, bson.D{{"_id", ID}})
								checkerr(err)
								if rCount != 0 {
									tWomb := User{}
									err = users.FindOne(ctx, bson.D{{"_id", ID}}).Decode(&tWomb)
									checkerr(err)
									womb.Money -= amount
									tWomb.Money += amount
									docUpd(tWomb, bson.D{{"_id", ID}}, users)
									docUpd(womb, wFil, users)
									sendMsg(fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ %d —à–∏—à–µ–π –Ω–∞ —Å—á—ë—Ç %s. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π", amount, tWomb.Name, womb.Money), peer, bot)
									sendMsg(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (ID: %d) –ø–µ—Ä–µ–≤—ë–ª –≤–∞–º %d —à–∏—à–µ–π. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π", womb.Name, peer, amount, tWomb.Money), ID, bot)
								} else {
									sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", ID), peer, bot)
								}
							} else {
								sendMsg("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è", peer, bot)
							}
						} else {
							sendMsg(fmt.Sprintf("–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞ (%d) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–ª-–≤–∞ –≤–∞—à–∏—Ö —à–∏—à–µ–π (%d)", amount, womb.Money), peer, bot)
						}
					} else {
						if _, err := strconv.ParseInt(args[0], 10, 64); err == nil {
							sendMsg("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è", peer, bot)
						} else {
							sendMsg("–û—à–∏–±–∫–∞: –∫–æ–ª-–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –±—ã—Ç—å —á–∏—Å–ª–æ–º", peer, bot)
						}
					}
				}
			} else if txt == "–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" && hasTitle(0, womb.Titles) {
				users = *(db.Collection("users"))
				titlesC := *(db.Collection("titles"))
				cur, err := titlesC.Find(ctx, bson.D{})
				defer cur.Close(ctx)
				checkerr(err)
				for cur.Next(ctx) {
					var nextOne Title
					err := cur.Decode(&nextOne)
					checkPanErr(err)
					titles = append(titles, nextOne)
				}
				cur.Close(ctx)
				sendMsg("–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", peer, bot)
			} else if isInList(txt, []string{"–∫—É–ø–∏—Ç—å –∫–≤–µ—Å", "–∫—É–ø–∏—Ç—å –∫–≤–µ—Å—Å", "–∫—É–ø–∏—Ç—å qwess", "–ø–æ–ø–∏—Ç—å –∫–≤–µ—Å", "–ø–æ–ø–∏—Ç—å –∫–≤–µ—Å—Å", "–ø–æ–ø–∏—Ç—å qwess"}) {
				if isInUsers {
					if womb.Money >= 256 {
						if !(hasTitle(2, womb.Titles)) {
							womb.Titles = append(womb.Titles, 2)
							womb.Money -= 256
							docUpd(womb, wFil, users)
							sendMsg("–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–µ—Å–Ω–æ–≥–æ –≤–∫—É—Å–∞ –∫–≤–µ—Å —É –∫—Ä–æ–ª–∏–∫–∞-–õ–µ–ø—Å–∞ –≤ –ª–∞—Ä—å–∫–µ –∑–∞ 256 —à–∏—à–µ–π. –ì–ª–æ—Ç–Ω—É–≤ —ç—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫, –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª —Å ID 2", peer, bot)
						} else {
							womb.Money -= 256
							docUpd(womb, wFil, users)
							sendMsg("–í—ã –≤–Ω–æ–≤—å –∫—É–ø–∏–ª–∏ –≤–∫—É—Å–Ω–æ–≥–æ –∫–≤–µ—Å–∞ —É —Ç–æ–≥–æ –∂–µ –∫—Ä–æ–ª–∏–∫–∞-–õ–µ–ø—Å–∞ –≤ —Ç–æ–º –∂–µ –ª–∞—Ä—å–∫–µ –∑–∞ 256 —à–∏—à–µ–π. \"–û–Ω —Ç–∞–∫ –æ—Å–≤–µ–∂–∞–µ—Ç, —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —á–µ–ª–æ–≤–µ–∫–æ–º\" ‚Äî –¥—É–º–∞–µ—Ç–µ –≤—ã. –ê—Ö, –∫–∞–∫ –≤–∫—É—Å—ë–Ω –∫–≤–µ—Å!", peer, bot)
						}
					} else {
						sendMsg("–í—ã –ø–æ–¥–æ—à–ª–∏ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –ª–∞—Ä—å–∫—É, –Ω–æ, —É–≤—ã, –∫—Ä–æ–ª–∏–∫-–õ–µ–ø—Å –Ω–∞ –∫–∞—Å—Å–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞–¥–æ 256 —à–∏—à–µ–π, –∞ —É –≤–∞—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–Ω—å—à–µ", peer, bot)
					}
				} else {
					sendMsg("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –Ω—É–∂–Ω—ã —à–∏—à–∏, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∫–≤–µ—Å, –∞ —à–∏—à–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —É –≤–æ–º–±–∞—Ç–æ–≤...", peer, bot)
				}
			}
		}(update, titles, titlesC, bot)
	}
}
