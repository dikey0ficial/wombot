package main

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
	"math"
	"math/rand"
	"strconv"
	"strings"
	"time"
)

type command struct {
	Name   string
	Is     func([]string, tg.Update) bool
	Action func([]string, tg.Update, User) error
}

var commands = []command{
	{
		Name: "start",
		Is: func(args []string, update tg.Update) bool {
			if strings.ToLower(args[0]) == "/start@"+bot.Self.UserName ||
				(!isGroup(update.Message) && isInList(args[0], []string{"/start", "/—Å—Ç–∞—Ä—Ç"})) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			const longAnswer = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ\n ‚Äî –ó–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞: `–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞`\n ‚Äî –ü–æ–º–æ—â—å: https://telegra.ph/Pomoshch-10-28 (/help)\n ‚Äî –ö–∞–Ω–∞–ª –±–æ—Ç–∞, –≥–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–∞: @wombatobot_channel\n –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ((–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–º–∞–Ω–¥ –≤–æ–º–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å))", update.Message.Chat.ID, bot)
				return err
			}
			_, err := replyToMsg(update.Message.MessageID, longAnswer, update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "help",
		Is: func(args []string, update tg.Update) bool {
			if isInList(args[0], []string{"/help@" + bot.Self.UserName, "–∫–æ–º–∞–Ω–¥—ã", "/—Ö–µ–ª–ø"}) ||
				(!isGroup(update.Message) && strings.ToLower(args[0]) == "/help") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsg(update.Message.MessageID, "https://telegra.ph/Pomoshch-10-28", update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "about_bot",
		Is: func(args []string, update tg.Update) bool {
			if len(args) != 2 {
				return false
			} else if strings.ToLower(args[0]+" "+args[1]) == "–æ –≤–æ–º–±–∞—Ç–µ" {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsgMD(update.Message.MessageID,
				"https://telegra.ph/O-vombote-10-29\n**–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–º–±–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–æ –≤–æ–º–±–∞—Ç–µ`**",
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "about_wombat",
		Is: func(args []string, update tg.Update) bool {
			if strings.HasPrefix(strings.Join(args, " "), "–æ –≤–æ–º–±–∞—Ç–µ") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			var strID string
			if len(args) == 3 {
				strID = strings.TrimSpace(strings.Join(args[2:], " "))
			} else if len(args) > 3 {
				_, err := replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!", update.Message.Chat.ID, bot)
				if err != nil {
					return err
				}
			}
			var (
				tWomb User
			)
			if strID == "" {
				if update.Message.ReplyToMessage != nil {
					tWomb.ID = update.Message.ReplyToMessage.From.ID
					if c, err := users.CountDocuments(ctx, bson.M{"_id": tWomb.ID}); err != nil {
						return err
					} else if c == 0 {
						replyToMsg(update.Message.MessageID,
							"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –≤–æ–º–±–∞—Ç–æ–º. (–Ω–∞–ø–∏—â–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –∏ —Å –æ—Ç–≤–µ—Ç–æ–º)",
							update.Message.Chat.ID, bot,
						)
						return nil
					}
					if err := users.FindOne(ctx, bson.M{"_id": tWomb.ID}).Decode(&tWomb); err != nil {
						return err
					}
				} else if isInUsers {
					tWomb = womb
				} else {
					replyToMsg(update.Message.MessageID, "–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID, bot)
					return nil
				}
			} else if len([]rune(strID)) > 64 {
				replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è", update.Message.Chat.ID, bot)
				return nil
			} else if !isValidName(strID) {
				replyToMsg(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è!", update.Message.Chat.ID, bot)
				return nil
			} else if rCount, err :=
				users.CountDocuments(ctx, bson.M{"name": cins(strID)}); err == nil && rCount != 0 {
				err := users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
				if err != nil {
					return err
				}
			} else if err != nil {
				return err
			} else {
				replyToMsg(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), update.Message.Chat.ID, bot)
				return nil
			}
			var clname string
			if c, err := clans.CountDocuments(ctx, bson.M{"members": tWomb.ID}); err != nil {
				return err
			} else if c != 0 {
				var uClan Clan
				if err := clans.FindOne(ctx, bson.M{"members": tWomb.ID}).Decode(&uClan); err != nil {
					return err
				}
				clname = "\\[" + uClan.Tag + "]"
			}
			strTitles := ""
			tCount := len(tWomb.Titles)
			if tCount != 0 {
				for _, id := range tWomb.Titles {
					rCount, err := titlesC.CountDocuments(ctx, bson.M{"_id": id})
					if err != nil {
						return err
					}
					if rCount == 0 {
						strTitles += fmt.Sprintf("–û—à–∏–±–∫–∞: —Ç–∏—Ç—É–ª–∞ —Å ID %d –Ω–µ—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin) |", id)
						continue
					}
					elem := Title{}
					err = titlesC.FindOne(ctx, bson.M{"_id": id}).Decode(&elem)
					if err != nil {
						return err
					}
					strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
				}
				strTitles = strings.TrimSuffix(strTitles, " | ")
			} else {
				strTitles = "–Ω–µ—Ç"
			}
			var sl string = "–ù–µ —Å–ø–∏—Ç"
			if tWomb.Sleep {
				sl = "–°–ø–∏—Ç"
			} else {
				sl = "–ù–µ —Å–ø–∏—Ç"
			}
			abimg, err := getImgs(imgsC, "about")
			if err != nil {
				return err
			}
			_, err = replyWithPhotoMD(update.Message.MessageID, randImg(abimg), fmt.Sprintf(
				"–í–æ–º–±–∞—Ç `%s` %s\n–¢–∏—Ç—É–ª—ã: %s\n üëÅ %d XP\n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è\n ‚ö° %d –º–æ—â–∏\n üí∞ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ\n üí§ %s",
				tWomb.Name, clname, strTitles, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money, sl),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "greeting_for_new_chat_members",
		Is: func(args []string, update tg.Update) bool {
			if update.Message.NewChatMembers != nil && len(update.Message.NewChatMembers) != 0 {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.NewChatMembers[0].ID)
			if err != nil {
				return err
			}
			if update.Message.NewChatMembers[0].ID == bot.Self.ID {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(randomString(
						"–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç —á–∞—Ç!1!1! /help@%s –¥–ª—è –∏–Ω—Ñ—ã –æ –∫–æ–º–º–∞–Ω–¥–æ—á–∫–∞—Ö :–∑",
						"–¥–∞—Ä–æ–≤–∞ –≤–æ–º–±—ç—Ç—ã –∏ –≤–æ–º–±—è—Ç–∞. —è –±–æ—Ç—è—Ä–∞. /help@%s -- –∏–Ω—Ñ–∞",
						"–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç —è –±–æ—Ç /help@%s –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
						"–∫–æ—Ä–æ—á–µ, —è –±–æ—Ç —Å –≤–æ–º–±–∞—Ç–∞–º–∏. –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /help@%s",
					), bot.Self.UserName),
					update.Message.Chat.ID,
					bot,
				)
			} else if isInUsers {
				_, err = replyToMsgMDNL(update.Message.MessageID,
					"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø [–≤–æ–º–±–æ—Ç](t.me/wombatobot) ‚Äî –±–æ—Ç —Å –≤–æ–º–±–∞—Ç–∞–º–∏. "+
						"–†–µ–∫–æ–º–µ–Ω–¥—É—é –í–∞–º –∑–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å "+
						"–≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (^.^)",
					update.Message.Chat.ID, bot,
				)
			} else {
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–æ–º–±–∞—Ç `%s`!", womb.Name), update.Message.Chat.ID, bot)
			}
			return err
		},
	},
	{
		Name: "support",
		Is: func(args []string, update tg.Update) bool {
			txt := strings.ToLower(strings.Join(args, " "))
			if isPrefixInList(txt, []string{"–æ–¥–º–µ–Ω!", "/admin@" + bot.Self.UserName, "/support@" + bot.Self.UserName, "/bug@" + bot.Self.UserName}) {
				return true
			} else if !isGroup(update.Message) && isPrefixInList(txt, []string{"/admin", "/support", "/bug", "/–∞–¥–º–∏–Ω", "/—Å–∞–ø", "/—Å–∞–ø–ø–æ—Ä—Ç", "/–±–∞–≥"}) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				isGr           = "–∏–∑ —á–∞—Ç–∞ "
				isInUsers, err = getIsInUsers(update.Message.From.ID)
				txt            = strings.ToLower(strings.Join(args, " "))
			)
			if err != nil {
				return err
			}
			if isGroup(update.Message) {
				isGr = "–∏–∑ –≥—Ä—É–ø–ø—ã "
			}
			if len(args) < 2 {
				if update.Message.ReplyToMessage == nil {
					replyToMsg(update.Message.MessageID, "–¢—ã —á–∞–≤–æ... –≥–¥–µ –ø–∏—Å—å–º–æ??", update.Message.Chat.ID, bot)
					return nil
				}
				r := update.Message.ReplyToMessage
				_, serr := sendMsg(
					fmt.Sprintf(
						"%d %d \n–ø–∏—Å—å–º–æ %s(%d @%s) –æ—Ç %d (@%s isInUsers: %v) (mt: %s bt: %s), –æ—Ç–≤–µ—á–∞—é—â–µ–µ –Ω–∞: \n%s\n(id:%d fr:%d @%s) (mt:%s, bt: %s)",
						update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName,
						update.Message.From.ID, update.Message.From.UserName, isInUsers,
						time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
						r.Text, r.MessageID, r.From.ID, r.From.UserName,
						time.Unix(int64(r.Date), 0).String(), time.Now().String(),
					),
					conf.SupChatID, bot,
				)
				_, err = replyToMsg(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID, bot)
				if err != nil {
					if serr != nil {
						return fmt.Errorf("Two errors: %v and %v", serr, err)
					}
					return err
				}
			} else {
				if update.Message.ReplyToMessage == nil {
					msg := strings.Join(args[1:], " ")
					_, serr := sendMsg(
						fmt.Sprintf(
							"%d %d \n–ø–∏—Å—å–º–æ %s%d (@%s) –æ—Ç %d (@%s isInUsers: %v): \n%s\n(mt: %s bt:%s)",
							update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName, update.Message.From.ID,
							update.Message.From.UserName, isInUsers, msg,
							time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
						),
						conf.SupChatID, bot,
					)
					_, err := replyToMsg(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID, bot)
					if err != nil {
						if serr != nil {
							return fmt.Errorf("Two errors: %v and %v", serr, err)
						}
						return err
					}
				} else {
					r := update.Message.ReplyToMessage
					_, serr := sendMsg(
						fmt.Sprintf(
							"%d %d \n–ø–∏—Å—å–º–æ %s(%d @%s) –æ—Ç %d (@%s isInUsers: %v), –æ—Ç–≤–µ—á–∞—é—â–µ–µ –Ω–∞: \n%s\n(id:%d fr:%d @%s) (mt: %s bt: %s) —Å —Ç–µ–∫—Å—Ç–æ–º:\n%s\n(mt: %s bt: %s)",
							update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName,
							update.Message.From.ID, update.Message.From.UserName,
							isInUsers, r.Text, r.MessageID, r.From.ID, r.From.UserName,
							time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
							txt,
							time.Unix(int64(r.Date), 0).String(), time.Now().String(),
						), conf.SupChatID, bot,
					)
					_, err := replyToMsg(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID, bot)
					if err != nil {
						if serr != nil {
							return fmt.Errorf("Two errors: %v and %v", serr, err)
						}
						return err
					}
				}
			}
			return nil
		},
	},
	{
		Name: "take_wombat",
		Is: func(args []string, update tg.Update) bool {
			if isInList(strings.ToLower(strings.Join(args, " ")),
				[]string{"–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞", "–∫—É–ø–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ —É –∞—Ä–∞–±–æ–≤", "—Ö–æ—á—É –≤–æ–º–±–∞—Ç–∞"},
			) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if isInUsers {
				_, err := replyToMsg(update.Message.MessageID,
					"–£ —Ç–µ–±—è –∫–∞–∫ –±—ã —É–∂–µ –µ—Å—Ç—å –≤–æ–º–±–∞—Ç –ª–æ–ª–∫–µ–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫`",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			newWomb := User{
				ID:     update.Message.From.ID,
				Name:   "–í–æ–º–±–∞—Ç_" + strconv.Itoa(int(update.Message.From.ID)),
				XP:     0,
				Health: 5,
				Force:  2,
				Money:  10,
				Titles: []uint16{},
				Sleep:  false,
			}
			_, err = users.InsertOne(ctx, &newWomb)
			if err != nil {
				return err
			}
			newimg, err := getImgs(imgsC, "new")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID,
				randImg(newimg), fmt.Sprintf(
					"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–º–±–∞—Ç! –ï–º—É –≤—ã–¥–∞–ª–æ—Å—å –∏–º—è `%s`. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π `–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è [–∏–º—è]` –∑–∞ 3 –º–æ–Ω–µ—Ç—ã",
					newWomb.Name),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "schweine",
		Is: func(args []string, update tg.Update) bool {
			if strings.HasPrefix(strings.ToLower(args[0]), "—Ö—Ä—é") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			schweineImgs, err := getImgs(imgsC, "schweine")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID,
				randImg(schweineImgs),
				"–ê–•–¢–£–ù–ì –®–í–ê–ô–ù–ï –£–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò",
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "delete_wombat",
		Is: func(args []string, update tg.Update) bool {
			return isInList(
				strings.ToLower(strings.Join(args, " ")),
				[]string{
					"–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫", "–ø—Ä–æ–¥–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –∞—Ä–∞–±–∞–º",
					"—Å–ª–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ –≤ —É–Ω–∏—Ç–∞–∑", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å –≤–æ–º–±–∞—Ç–∞",
				},
			)
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err := replyToMsg(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID, bot)
				return err
			}
			if hasTitle(1, womb.Titles) {
				_, err := replyToMsg(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –ª–∏—à–µ–Ω—ã –ø—Ä–∞–≤–∞ —É–Ω–∏—á—Ç–æ–∂–∞—Ç—å –≤–æ–º–±–∞—Ç–∞; –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /admin –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			_, err = users.DeleteOne(ctx, wombFilter(womb))
			if err != nil {
				return err
			}
			kill, err := getImgs(imgsC, "kill")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID,
				randImg(kill), "–í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —à—Ç—É–∫–∞. –í—ã - –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å—É—â–µ—Å—Ç–≤–æ", update.Message.Chat.ID,
				bot,
			)
			return err
		},
	},
	{
		Name: "change_name",
		Is: func(args []string, update tg.Update) bool {
			return strings.HasPrefix(
				strings.ToLower(strings.Join(args, " ")),
				"—Å–º–µ–Ω–∏—Ç—å –∏–º—è",
			)
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–î–∞ –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥, –≤—ã –≤–æ–±–º–∞—Ç–∞ –∑–∞–±—ã–ª–∏ –∑–∞–≤–µ—Å—Ç–∏!!!!!!!", update.Message.From.ID, bot)
				return err
			} else if len(args) != 3 {
				if len(args) == 2 {
					_, err = replyToMsg(update.Message.MessageID, "–≤–æ–º–±–∞—Ç—É –Ω—É–∂–Ω–æ –∏–º—è! —Ç—ã –µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–ª", update.Message.From.ID, bot)
				} else {
					_, err = replyToMsg(update.Message.MessageID, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...", update.Message.From.ID, bot)
				}
				return err
			} else if hasTitle(1, womb.Titles) {
				_, err = replyToMsg(update.Message.MessageID, "–¢–µ–±–µ –Ω–µ–ª—å–∑—è, —Ç—ã —Å–ø–∞–º–µ—Ä (–æ—Å–ø–æ—Ä–∏—Ç—å: /admin)", update.Message.From.ID, bot)
				return err
			} else if womb.Money < 3 {
				_, err = replyToMsg(update.Message.MessageID, "–ú–∞–ª–æ —à–∏—à–µ–π –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!", update.Message.From.ID, bot)
				return err
			}
			name := args[2]
			if womb.Name == name {
				_, err = replyToMsg(update.Message.MessageID, "–∑–∞—á–µ–º", update.Message.From.ID, bot)
				return err
			} else if len([]rune(name)) > 64 {
				_, err = replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º!", update.Message.From.ID, bot)
				return err
			} else if isInList(name, []string{"–≤o–º–±o—Ç", "–≤o–º–±o—Ç", "–≤–æ–º–±o—Ç", "–≤–æ–º–±–æ—Ç", "–±–æ—Ç", "bot", "–±o—Ç", "b–æt",
				"–∞–≤—Ç–æ", "auto"}) {
				_, err = replyToMsg(update.Message.MessageID, "–¢–∞–∫–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã –∑–∞–≤–æ–¥–∏—Ç—å –Ω–µ–ª—å–∑—è", update.Message.From.ID, bot)
				return err
			} else if !isValidName(name) {
				_, err = replyToMsg(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è:(\n", update.Message.From.ID, bot)
				return err
			}
			rCount, err := users.CountDocuments(ctx, bson.M{"name": cins(name)})
			if err != nil {
				return err
			} else if rCount != 0 {
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–ù–∏–∫–Ω–µ–π–º `%s` —É–∂–µ –∑–∞–Ω—è—Ç(", name), update.Message.From.ID, bot)
				return err
			}
			womb.Money -= 3
			caseName := strings.Join(args[2:], " ")
			womb.Name = caseName
			err = docUpd(womb, bson.M{"_id": update.Message.From.ID}, users)
			if err != nil {
				return err
			}
			_, err = replyToMsg(update.Message.MessageID,
				fmt.Sprintf("–¢–µ–ø–µ—Ä—å –≤–∞—à–µ–≥–æ –≤–æ–º–±–∞—Ç–∞ –∑–æ–≤—É—Ç %s. –° –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞ —Å–Ω—è–ª–∏ 3 —à–∏—à–∞", caseName),
				update.Message.From.ID, bot,
			)
			return err
		},
	},
	{
		Name: "find_money",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(strings.Join(args, " ")) == "–ø–æ–∏—Å–∫ –¥–µ–Ω–µ–≥"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–ê —Ç—ã –∫—É–¥–∞? –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", update.Message.From.ID, bot)
				return err
			}

			if womb.Money < 1 {
				_, err = replyToMsg(update.Message.MessageID, "–û—Ö—Ä–∞–Ω–Ω–∏–∫–∏ —Ç–µ–±—è –ø—Ä–æ–≥–Ω–∞–ª–∏; –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç —à–∏—à –∑–∞ –ø—Ä–æ—Ö–æ–¥, –∞ —É —Ç–µ–±—è –Ω–∏ —à–∏—à–∞ –Ω–µ—Ç", update.Message.From.ID, bot)
				return err
			}
			womb.Money--
			rand.Seed(time.Now().UnixNano())
			if ch := rand.Int(); ch%2 == 0 || hasTitle(2, womb.Titles) && (ch%2 == 0 || ch%3 == 0) {
				rand.Seed(time.Now().UnixNano())
				win := rand.Intn(9) + 1
				womb.Money += uint64(win)
				if addXP := rand.Intn(512 - 1); addXP < 5 {
					womb.XP += uint32(addXP)
					_, err = replyToMsg(update.Message.MessageID,
						fmt.Sprintf(
							"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π, –∞ –µ—â—ë –≤–∞–º –¥–∞–ª–∏ %d XP! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ –∏ %d XP",
							win, addXP, womb.Money, womb.XP,
						),
						update.Message.From.ID, bot,
					)
				} else {
					_, err = replyToMsg(update.Message.MessageID,
						fmt.Sprintf(
							"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ %d —à–∏—à–µ–π! –¢–µ–ø–µ—Ä—å –∏—Ö —É –≤–∞—Å –ø—Ä–∏ —Å–µ–±–µ %d", win, womb.Money,
						),
						update.Message.From.ID, bot,
					)
				}
				if err != nil {
					return err
				}
			} else {
				_, err = replyToMsg(
					update.Message.MessageID, "–í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –æ–¥–∏–Ω —à–∏—à –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞–º –¥–µ–Ω–µ–∂–Ω–æ–π –¥–æ—Ä–æ–∂–∫–∏, –Ω–æ —É–≤—ã, –≤—ã —Ç–∞–∫ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –Ω–∞—à–ª–∏",
					update.Message.From.ID, bot,
				)
				if err != nil {
					return err
				}
			}
			return docUpd(womb, wombFilter(womb), users)
		},
	},
	{
		Name: "shop",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(strings.Join(args, " ")) == "–º–∞–≥–∞–∑–∏–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsg(update.Message.MessageID, strings.Join([]string{"–ú–∞–≥–∞–∑–∏–Ω:", " ‚Äî 1 –∑–¥–æ—Ä–æ–≤—å–µ ‚Äî 5 —à", " ‚Äî 1 –º–æ—â—å ‚Äî 3 —à",
				" ‚Äî –∫–≤–µ—Å ‚Äî 256 —à", " ‚Äî –≤–∞–¥—à–∞–º ‚Äî 250'000 —à",
				"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É '–∫—É–ø–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ_–æ–±—ä–µ–∫—Ç–∞] ([–∫–æ–ª-–≤–æ])",
			}, "\n"),
				update.Message.From.ID, bot,
			)
			return err
		},
	},
	{
		Name: "buy",
		Is: func(args []string, update tg.Update) bool {
			return args[0] == "–∫—É–ø–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := replyToMsg(update.Message.MessageID, "–∫—É–ø–∏—Ç—å", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "—É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–º–±–∞—Ç–æ–≤ —á—Ç–æ–±—ã –∫—É–º–ø–∏—Ç—å (–Ω—É–∂–µ–Ω –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω)", update.Message.Chat.ID, bot)
				return err
			}
			switch args[1] {
			case "–∑–¥–æ—Ä–æ–≤—å—è":
				fallthrough
			case "–∑–¥–æ—Ä–æ–≤—å–µ":
				if len(args) > 3 {
					_, err := replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...", update.Message.Chat.ID, bot)
					return err
				}
				var amount uint32 = 1
				if len(args) == 3 {
					if val, err := strconv.ParseUint(args[2], 10, 32); err == nil {
						if val == 0 {
							_, err = replyToMsg(update.Message.MessageID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–¥–Ω–∞ —à–∏–∑–∞ –∏ –µ—â—ë –æ–¥–Ω–∞ —à–∏–∑–∞", update.Message.Chat.ID, bot)
							return err
						}
						amount = uint32(val)
					} else {
						_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —Ü–µ–ª—ã–º –∏ –º–µ–Ω—å—à–µ 2^32", update.Message.Chat.ID, bot)
						return err
					}
				}
				if womb.Money >= uint64(amount*5) {
					if uint64(womb.Health+amount) < uint64(math.Pow(2, 32)) {
						womb.Money -= uint64(amount * 5)
						womb.Health += amount
						err = docUpd(womb, wombFilter(womb), users)
						if err != nil {
							return err
						}
						_, err = replyToMsg(update.Message.MessageID,
							fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ", womb.Health, womb.Money),
							update.Message.Chat.ID, bot,
						)
						return err
					} else {
						_, err = replyToMsg(update.Message.MessageID,
							"–û—à–∏–±–∫–∞: –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–¥–æ—Ä–æ–≤—å—è (2 –≤ 32 —Å—Ç–µ–ø–µ–Ω–∏). –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Å –≤–æ–∑–º—É—â–∞–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin",
							update.Message.Chat.ID, bot,
						)
						return err
					}
				} else {
					_, err = replyToMsg(update.Message.MessageID, "–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –∑–¥–æ—Ä–æ–≤—å–µ = 5 —à–∏—à–µ–π", update.Message.Chat.ID, bot)
					return err
				}
			case "—Å–∏–ª—É":
				fallthrough
			case "—Å–∏–ª–∞":
				fallthrough
			case "—Å–∏–ª—ã":
				fallthrough
			case "–º–æ—â–∏":
				fallthrough
			case "–º–æ—â—å":
				if len(args) > 3 {
					_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤...", update.Message.Chat.ID, bot)
					return err
				}
				var amount uint32 = 1
				if len(args) == 3 {
					if val, err := strconv.ParseUint(args[2], 10, 32); err == nil {
						if val == 0 {
							_, err = replyToMsg(update.Message.MessageID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –æ–¥–Ω–∞ —à–∏–∑–∞ –∏ –µ—â—ë –æ–¥–Ω–∞ —à–∏–∑–∞", update.Message.Chat.ID, bot)
							return err
						}
						amount = uint32(val)
					} else {
						_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, —Ü–µ–ª—ã–º –∏ –º–µ–Ω—å—à–µ 2^32", update.Message.Chat.ID, bot)
						return err
					}
				}
				if womb.Money < uint64(amount*3) {
					_, err = replyToMsg(update.Message.MessageID,
						"–û—à–∏–±–∫–∞: –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ—â–∏ (2 –≤ 32 —Å—Ç–µ–ø–µ–Ω–∏). –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—Å –≤–æ–∑–º—É—â–∞–µ—Ç, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin",
						update.Message.Chat.ID, bot,
					)
					return err
				}
				if uint64(womb.Force+1) < uint64(math.Pow(2, 32)) {
					_, err = replyToMsg(update.Message.MessageID, "–ù–∞–¥–æ –Ω–∞–∫–æ–ø–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —à–∏—à–µ–π! 1 –º–æ—â—å = 3 —à–∏—à–∞", update.Message.Chat.ID, bot)
					return err
				}
				womb.Money -= uint64(amount * 3)
				womb.Force += amount
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
				_, err = replyToMsg(update.Message.MessageID,
					fmt.Sprintf("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d –º–æ—â–∏ –∏ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ", womb.Force, womb.Money),
					update.Message.Chat.ID, bot,
				)
				return err
			case "–≤–∞–¥—à–∞–º–∫–∞":
				fallthrough
			case "–≤–∞–¥—à–∞–º–∞":
				fallthrough
			case "–≤–∞–¥—à–∞–º–∫—É":
				fallthrough
			case "–≤–∞–¥—à–∞–º–∫–∏":
				fallthrough
			case "–≤–∞–¥—à–∞–º":
				if len(args) != 2 {
					_, err = replyToMsg(update.Message.MessageID, "—É–∂–∞—Å !! —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!!!", update.Message.From.ID, bot)
					return err
				} else if hasTitle(4, womb.Titles) {
					_, err = replyToMsg(update.Message.MessageID, "—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∞–¥—à–∞–º", update.Message.From.ID, bot)
					return err
				} else if womb.Money < 250005 {
					_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 250000 + 5)", update.Message.From.ID, bot)
					return err
				}
				womb.Money -= 250000
				womb.Titles = append(womb.Titles, 4)
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
				_, err = replyToMsg(update.Message.MessageID, "–¢–µ–ø–µ—Ä—å –≤—ã –≤–∞–¥—à–∞–º–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å", update.Message.From.ID, bot)
			case "–∫–≤–µ—Å":
				fallthrough
			case "–∫–≤–µ—Å–∞":
				fallthrough
			case "–∫–≤–µ—Å—É":
				fallthrough
			case "qwess":
				if len(args) != 2 {
					_, err = replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!", update.Message.From.ID, bot)
					return err
				} else if womb.Money < 256 {
					leps, err := getImgs(imgsC, "leps")
					if err != nil {
						return err
					}
					_, err = replyWithPhoto(update.Message.MessageID,
						randImg(leps),
						"–í—ã –ø–æ–¥–æ—à–ª–∏ –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –ª–∞—Ä—å–∫—É, –Ω–æ, —É–≤—ã, –∫—Ä–æ–ª–∏–∫-–õ–µ–ø—Å –Ω–∞ –∫–∞—Å—Å–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∞–¥–æ 256 —à–∏—à–µ–π, –∞ —É –≤–∞—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ–Ω—å—à–µ",
						update.Message.From.ID, bot,
					)
					return err
				}
				qwess, err := getImgs(imgsC, "qwess")
				if err != nil {
					return err
				}
				if !(hasTitle(2, womb.Titles)) {
					womb.Titles = append(womb.Titles, 2)
					womb.Money -= 256
					err = docUpd(womb, wombFilter(womb), users)
					if err != nil {
						return err
					}
					_, err = replyWithPhoto(update.Message.MessageID,
						randImg(qwess),
						"–í—ã –∫—É–ø–∏–ª–∏ —á—É–¥–µ—Å–Ω–æ–≥–æ –≤–∫—É—Å–∞ –∫–≤–µ—Å —É –∫—Ä–æ–ª–∏–∫–∞-–õ–µ–ø—Å–∞ –≤ –ª–∞—Ä—å–∫–µ –∑–∞ 256 —à–∏—à–µ–π. –ì–ª–æ—Ç–Ω—É–≤ —ç—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫, –≤—ã –ø–æ–Ω—è–ª–∏, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π —Ç–∏—Ç—É–ª —Å ID 2",
						update.Message.From.ID, bot,
					)
				} else {
					womb.Money -= 256
					err = docUpd(womb, wombFilter(womb), users)
					if err != nil {
						return err
					}
					if err != nil {
						return err
					}
					_, err = replyWithPhoto(update.Message.MessageID,
						randImg(qwess),
						"–í—ã –≤–Ω–æ–≤—å –∫—É–ø–∏–ª–∏ –≤–∫—É—Å–Ω–æ–≥–æ –∫–≤–µ—Å–∞ —É —Ç–æ–≥–æ –∂–µ –∫—Ä–æ–ª–∏–∫–∞-–õ–µ–ø—Å–∞ –≤ —Ç–æ–º –∂–µ –ª–∞—Ä—å–∫–µ –∑–∞ 256 —à–∏—à–µ–π. \"–û–Ω —Ç–∞–∫ –æ—Å–≤–µ–∂–∞–µ—Ç, —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —á–µ–ª–æ–≤–µ–∫–æ–º\" ‚Äî –¥—É–º–∞–µ—Ç–µ –≤—ã. –ê—Ö, –∫–∞–∫ –≤–∫—É—Å—ë–Ω –∫–≤–µ—Å!",
						update.Message.From.ID, bot,
					)
					return err
				}
			default:
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–ß—Ç–æ —Ç–∞–∫–æ–µ %s?", args[1]), update.Message.From.ID, bot)
				return err
			}
			return nil
		},
	},
	{
		Name: "about_title",
		Is: func(args []string, update tg.Update) bool {
			return strings.HasPrefix(strings.ToLower(strings.Join(args, " ")), "–æ —Ç–∏—Ç—É–ª–µ")
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) < 3 {
				_, err := replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π ID —Ç–∏—Ç—É–ª–∞", update.Message.Chat.ID, bot)
				return err
			}
			strID := strings.Join(args[2:], " ")
			i, err := strconv.ParseInt(strID, 10, 64)
			if err != nil {
				_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–æ —Ç–∏—Ç—É–ª–µ {ID —Ç–∏—Ç—É–ª–∞}`", update.Message.Chat.ID, bot)
				return err
			} else {
			}
			ID := uint16(i)
			rCount, err := titlesC.CountDocuments(ctx, bson.M{"_id": ID})
			if err != nil {
				return err
			}
			if rCount == 0 {
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∏—Ç—É–ª–∞ –ø–æ ID %d", ID), update.Message.Chat.ID, bot)
				return err
			}
			elem := Title{}
			err = titlesC.FindOne(ctx, bson.M{"_id": ID}).Decode(&elem)
			if err != nil {
				return err
			}
			_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("%s | ID: %d\n%s", elem.Name, ID, elem.Desc), update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "sleep",
		Is: func(args []string, update tg.Update) bool {
			return isInList(strings.ToLower(strings.Join(args, " ")), []string{"–ª–µ—á—å —Å–ø–∞—Ç—å", "—Å–ø–æ–∫–µ", "—Å–ø–∞—Ç—å", "—Å–ø–æ—Ç—å"})
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞, –∏–¥–∏ —Å–ø–∏ —Å–∞–º", update.Message.Chat.ID, bot)
				return err
			} else if womb.Sleep {
				_, err = replyToMsg(update.Message.MessageID, "–¢–≤–æ–π –≤–æ–º–±–∞—Ç —É–∂–µ —Å–ø–∏—Ç. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è` (–ª–æ–≥–∏–∫–∞)", update.Message.Chat.ID, bot)
				return err
			}
			womb.Sleep = true
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			sleep, err := getImgs(imgsC, "sleep")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID, randImg(sleep), "–í—ã –ª–µ–≥–ª–∏ —Å–ø–∞—Ç—å. –°–ø–æ–∫–æ–π–Ω–æ–≥–æ —Å–Ω–∞!", update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "unsleep",
		Is: func(args []string, update tg.Update) bool {
			return isInList(strings.ToLower(strings.Join(args, " ")), []string{"–¥–æ–±—Ä—É—Ç—Ä–æ", "–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è", "–Ω–µ —Å–ø–∞—Ç—å", "–Ω–µ —Å–ø–æ—Ç—å", "—Ä–æ—Ç–∞ –ø–æ–¥—ä—ë–º"})
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞, –±—É–¥–∏ —Å–µ–±—è —Å–∞–º", update.Message.From.ID, bot)
				return err
			} else if !womb.Sleep {
				_, err = replyToMsg(update.Message.MessageID, "–¢–≤–æ–π –≤–æ–º–±–∞—Ç –∏ —Ç–∞–∫ –Ω–µ —Å–ø–∏—Ç, –º–æ–∂–µ—Ç —Ç—ã —Ö–æ—Ç–µ–ª –ª–µ—á—å —Å–ø–∞—Ç—å? (–∫–æ–º–∞–Ω–¥–∞ `–ª–µ—á—å —Å–ø–∞—Ç—å` (–æ–ø—è—Ç—å –ª–æ–≥–∏–∫–∞))",
					update.Message.From.ID, bot,
				)
				return err
			}
			womb.Sleep = false
			var msg string = "–í–æ–º–±–∞—Ç –ø—Ä–æ—Å–Ω—É–ª—Å—è –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø—Ä–æ–∏—à–µ—Å—Ç–≤–∏–π"
			rand.Seed(time.Now().UnixNano())
			if rand.Intn(2) == 1 {
				switch rand.Intn(9) {
				case 0:
					i := uint32(rand.Intn(15) + 1)
					womb.Health += i
					msg = fmt.Sprintf("–í–æ–º–±–∞—Ç –æ—Ç–ª–∏—á–Ω–æ –≤—ã—Å–ø–∞–ª—Å—è. –û—Ñ–∏–≥–µ–Ω–Ω—ã–π —Å–æ–Ω –µ–º—É –¥–∞–ª %d –∑–¥–æ—Ä–æ–≤—å—è", i)
				case 1:
					i := uint32(rand.Intn(10) + 1)
					womb.Force += i
					msg = fmt.Sprintf("–í—Å—Ç–∞–≤, –≤–æ–º–±–∞—Ç –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–∏–ª—É –≤ —Å–≤–æ–∏—Ö –ª–∞–ø–∞—Ö! +%d –º–æ—â–∏", i)
				case 3:
					i := uint64(rand.Intn(100) + 1)
					womb.Money += i
					msg = fmt.Sprintf("–ü—Ä–æ—Å–Ω—É–≤—à–∏—Å—å, –≤–æ–º–±–∞—Ç —É–≤–∏–¥–µ–ª –º–µ—à–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π %d —à–∏—à–µ–π. –ö—Ç–æ –±—ã –º–æ–≥ –µ–≥–æ –æ—Å—Ç–∞–≤–∏—Ç—å?", i)
				case 4:
					if womb.Money > 50 {
						womb.Money = 50
					} else if womb.Money > 10 {
						womb.Money = 10
					} else {
						break
					}
					msg = fmt.Sprintf("–£–∂–∞—Å!!! –í–∞—Å –æ–±–æ–∫—Ä–∞–ª–∏!!! –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ!", womb.Money)
				case 5:
					if womb.Health <= 5 {
						break
					}
					womb.Health--
					msg = "–®–∞—Ç–∞—è—Å—å, –≤–æ–º–±–∞—Ç –≤—Å—Ç–∞–ª —Å –∫—Ä–æ–≤–∞—Ç–∏. –û–Ω —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç —É–∂–∞—Å–Ω–æ. -1 –∑–¥–æ—Ä–æ–≤—å—è"
				case 6:
					if womb.Force <= 2 {
						break
					}
					womb.Force--
					msg = "–í–∞—à –≤–æ–º–±–∞—Ç —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–ª–∞–±–æ—Å—Ç—å... -1 –º–æ—â–∏"
				case 7:
					msg = "–í–∞—à –≤–æ–º–±–∞—Ç –≤—Å—Ç–∞–ª –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ —É–ª—ã–±–Ω—É–ª—Å—è..."
				case 8:
					i := uint32(rand.Intn(4) + 1)
					womb.XP += i
					msg = fmt.Sprintf("–í–∞—à –≤–æ–º–±–∞—Ç —É–≤–∏–¥–µ–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–æ–Ω. –ü–æ—á–µ—Å–∞–≤ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç %d XP", i)
				}
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			unsleep, err := getImgs(imgsC, "unsleep")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID, randImg(unsleep), msg, update.Message.From.ID, bot)
			return err
		},
	},
	{
		Name: "send_shishes",
		Is: func(args []string, update tg.Update) bool {
			return strings.HasPrefix(strings.ToLower(strings.Join(args, " ")), "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏")
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := replyToMsg(update.Message.MessageID, "—Ç–∞–∫ –∏ –∑–∞–ø–∏—à–µ–º", update.Message.Chat.ID, bot)
				return err
			}
			cargs := args[2:]
			if len(cargs) < 2 {
				_, err := replyToMsg(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç(—ã). –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏ [–∫–æ–ª-–≤–æ] [–Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è]`",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if len(cargs) > 2 {
				_, err := replyToMsg(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥—ã: `–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à–∏—à–∏ [–∫–æ–ª-–≤–æ] [–Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è]`",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			var (
				amount uint64
				err    error
			)
			if amount, err = strconv.ParseUint(cargs[0], 10, 64); err != nil {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–µ —É –í–∞—Å –∫–∞–∫–∏–µ-—Ç–æ —á–∏—Å–ª–∞",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			var ID int64
			name := cargs[1]
			if len([]rune(name)) > 64 {
				_, err := replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º", update.Message.Chat.ID, bot)
				return err
			} else if !isValidName(name) {
				_, err := replyToMsg(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è", update.Message.Chat.ID, bot)
				return err
			} else if rCount, err := users.CountDocuments(
				ctx, bson.M{"name": cins(name)}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", name), update.Message.Chat.ID, bot)
				return err
			}
			var tWomb User
			err = users.FindOne(ctx, bson.M{"name": cins(name)}).Decode(&tWomb)
			if err != nil {
				return err
			}
			ID = tWomb.ID
			if womb.Money < amount {
				if _, err = strconv.ParseInt(cargs[0], 10, 64); err == nil {
					_, err = replyToMsg(
						update.Message.MessageID, "–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è",
						update.Message.Chat.ID, bot,
					)
					return err
				} else {
					_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: –∫–æ–ª-–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –±—ã—Ç—å —á–∏—Å–ª–æ–º", update.Message.Chat.ID, bot)
				}
			}
			if amount == 0 {
				_, err = replyToMsg(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö —à–∏—à–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			if ID == update.Message.From.ID {
				_, err = replyToMsg(update.Message.MessageID, "–¢—ã —á–∏—Ç–µ—Ä –±–ª–∏–Ω –Ω–∞—Ñ–∏–≥!!!!!! –Ω–∏–¥–∞–º —Ç–µ–±–µ —Å–∞–º–æ–º—É —Å–µ–±–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏", update.Message.Chat.ID, bot)
				return err
			}
			rCount, err := users.CountDocuments(ctx, bson.M{"_id": ID})
			if err != nil {
				return err
			}
			if rCount == 0 {
				_, err = replyToMsg(update.Message.MessageID,
					fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", ID),
					update.Message.Chat.ID, bot,
				)
				return err
			}
			womb.Money -= amount
			tWomb.Money += amount
			err = docUpd(tWomb, bson.M{"_id": ID}, users)
			if err != nil {
				return err
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			_, err = replyToMsg(update.Message.MessageID,
				fmt.Sprintf("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ %d —à–∏—à–µ–π –Ω–∞ —Å—á—ë—Ç %s. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ",
					amount, tWomb.Name, womb.Money), update.Message.Chat.ID, bot,
			)
			if err != nil {
				return err
			}
			_, err = sendMsg(fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø–µ—Ä–µ–≤—ë–ª –≤–∞–º %d —à–∏—à–µ–π. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ",
				womb.Name, amount, tWomb.Money), ID, bot,
			)
			return err
		},
	},
	{
		Name: "rating",
		Is: func(args []string, update tg.Update) bool {
			return isPrefixInList(strings.ToLower(strings.Join(args, " ")), []string{"—Ä–µ–π—Ç–∏–Ω–≥", "—Ç–æ–ø"}) && args[0] != "—Ä–µ–π—Ç–∏–Ω–≥" && args[0] != "—Ç–æ–ø"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				name  string = "xp"
				queue int8   = -1
			)
			if len(args) >= 2 && len(args) < 4 {
				if isInList(args[1], []string{"—à–∏—à–∏", "–¥–µ–Ω—å–≥–∏", "money"}) {
					name = "money"
				} else if isInList(args[1], []string{"—Ö–ø", "–æ–ø—ã—Ç", "xp", "—Ö—Ä—é"}) {
					name = "xp"
				} else if isInList(args[1], []string{"–∑–¥–æ—Ä–æ–≤—å–µ", "—Ö–∏–ª", "—Ö–µ–∞–ª—Ç—Ö", "health"}) {
					name = "health"
				} else if isInList(args[1], []string{"—Å–∏–ª–∞", "–º–æ—â—å", "force", "–º–æ—â—ä"}) {
					name = "force"
				} else {
					_, err := replyToMsg(update.Message.MessageID, fmt.Sprintf("–Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∑–Ω–∞—á–∏—Ç %s", args[1]), update.Message.Chat.ID, bot)
					return err
				}
				if len(args) == 3 {
					if isInList(args[2], []string{"+", "–ø–ª—é—Å", "++", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ"}) {
						queue = 1
					} else if isInList(args[2], []string{"-", "–º–∏–Ω—É—Å", "--", "—É–º–µ–Ω—å—à–µ–Ω–∏–µ"}) {
						queue = -1
					} else {
						_, err := replyToMsg(update.Message.MessageID, fmt.Sprintf("–Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∑–Ω–∞—á–∏—Ç %s", args[2]), update.Message.Chat.ID, bot)
						return err
					}
				}
			} else if len(args) != 1 {
				_, err := replyToMsg(update.Message.MessageID, "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			}
			opts := options.Find()
			opts.SetSort(bson.M{name: queue})
			opts.SetLimit(10)
			cur, err := users.Find(ctx, bson.M{}, opts)
			if err != nil {
				return err
			}
			var rating []User
			for cur.Next(ctx) {
				var w User
				cur.Decode(&w)
				rating = append(rating, w)
			}
			var msg string = "–¢–æ–ø-10 –≤–æ–º–±–∞—Ç–æ–≤ –ø–æ "
			switch name {
			case "money":
				msg += "—à–∏—à–∞–º "
			case "xp":
				msg += "XP "
			case "health":
				msg += "–∑–¥–æ—Ä–æ–≤—å—é "
			case "force":
				msg += "–º–æ—â–∏ "
			}
			msg += "–≤ –ø–æ—Ä—è–¥–∫–µ "
			if queue == 1 {
				msg += "—É–≤–µ–ª–∏—á–µ–Ω–∏—è:"
			} else if queue == -1 {
				msg += "—É–º–µ–Ω—å—à–µ–Ω–∏—è:"
			} else {
				return err
			}
			msg += "\n"
			for num, w := range rating {
				switch name {
				case "money":
					msg += fmt.Sprintf("%d | %s | %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ\n", num+1, w.Name, w.Money)
				case "xp":
					msg += fmt.Sprintf("%d | %s | %d XP\n", num+1, w.Name, w.XP)
				case "health":
					msg += fmt.Sprintf("%d | %s | %d –∑–¥–æ—Ä–æ–≤—å—è\n", num+1, w.Name, w.Health)
				case "force":
					msg += fmt.Sprintf("%d | %s | %d –º–æ—â–∏\n", num+1, w.Name, w.Force)
				}
			}
			msg = strings.TrimSuffix(msg, "\n")
			_, err = replyToMsg(update.Message.MessageID, msg, update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "attack",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∞—Ç–∞–∫–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := replyToMsg(update.Message.MessageID, "–Ω–µ–ø—Ä–∞–≤–¥–∞", update.Message.Chat.ID, bot)
				return err
			}
			for _, cmd := range attackCommands {
				if cmd.Is(args[1:], update) {
					err := cmd.Action(args, update, womb) //@TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞–¥–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å [1:]
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := replyToMsg(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "wombank",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–≤–æ–º–±–∞–Ω–∫"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := replyToMsg(update.Message.MessageID, "–Ω–µ–ø—Ä–∞–≤–¥–∞", update.Message.Chat.ID, bot)
				return err
			}
			for _, cmd := range bankCommands {
				if cmd.Is(args[1:], update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := replyToMsg(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "clans",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∫–ª–∞–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 1 {
				_, err := replyToMsg(update.Message.MessageID, "—É–≥–∞–¥–∞–ª", update.Message.Chat.ID, bot)
				return err
			}
			for _, cmd := range clanCommands {
				if cmd.Is(args[1:], update) {
					err := cmd.Action(args, update, womb)
					if err != nil {
						err = fmt.Errorf("%s: %v", cmd.Name, err)
					}
					return err
				}
			}
			_, err := replyToMsg(update.Message.MessageID, "–Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, —á–µ—Å—Å–ª–æ–≤–æ", update.Message.Chat.ID, bot)
			return err
		},
	},
}

var attackCommands = []command{
	{
		Name: "attack",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∞—Ç–∞–∫–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsg(update.Message.MessageID, strings.Repeat("–∞—Ç–∞–∫–∞ ", 42), update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "status",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "—Å—Ç–∞—Ç—É—Å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			var ID int64
			if len(args) == 1 {
				if !isInUsers {
					_, err = replyToMsg(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", update.Message.Chat.ID, bot)
					return err
				}
				ID = int64(update.Message.From.ID)
			} else if len(args) > 2 {
				_, err = replyToMsg(update.Message.MessageID, "–ê—Ç–∞–∫–∞ —Å—Ç–∞—Ç—É—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			}
			strID := args[1]
			if rCount, err := users.CountDocuments(ctx,
				bson.M{"name": cins(strID)}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∫–Ω–µ–π–º–æ–º `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), update.Message.Chat.ID, bot)
				return err
			}
			var tWomb User
			err = users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
			if err != nil {
				return err
			}
			ID = tWomb.ID
			var at Attack
			if is, isFrom := isInAttacks(ID, attacks); isFrom {
				a, err := getAttackByWomb(ID, true, attacks)
				if err != nil {
					return err
				}
				at = a
			} else if is {
				a, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil {
					return err
				}
				at = a
			} else {
				_, err = replyToMsg(update.Message.MessageID, "–ê—Ç–∞–∫ –Ω–µ—Ç", update.Message.Chat.ID, bot)
				return err
			}
			var fromWomb, toWomb User
			err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&fromWomb)
			if err != nil {
				return err
			}
			err = users.FindOne(ctx, bson.M{"_id": at.To}).Decode(&toWomb)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				fmt.Sprintf(
					"–û—Ç: %s (%d)\n–ö–æ–º—É: %s (%d)\n",
					fromWomb.Name, fromWomb.ID,
					toWomb.Name, toWomb.ID,
				),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "to",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) < 2 {
				_, err = replyToMsg(update.Message.MessageID, "–ê—Ç–∞–∫–∞ –Ω–∞: –Ω–∞ –∫–æ–≥–æ?", update.Message.Chat.ID, bot)
				return err
			} else if len(args) != 2 {
				_, err = replyToMsg(update.Message.MessageID, "–ê—Ç–∞–∫–∞ –Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			} else if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≤ –≤–∏–¥—É –æ—Å—Ç—É—Ç—Å—Ç–≤–∏—è –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID, bot)
				return err
			} else if womb.Sleep {
				_, err = replyToMsg(update.Message.MessageID, "–ù–æ –≤—ã –∂–µ —Å–ø–∏—Ç–µ...", update.Message.Chat.ID, bot)
				return err
			}
			strID := args[1]
			var (
				ID    int64
				tWomb User
			)
			if is, isFrom := isInAttacks(update.Message.From.ID, attacks); isFrom {
				at, err := getAttackByWomb(update.Message.From.ID, true, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.To}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = replyToMsgMD(update.Message.MessageID,
					fmt.Sprintf(
						"–í—ã —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç–µ –≤–æ–º–±–∞—Ç–∞ `%s`. –ß—Ç–æ–±—ã –æ—Ç–æ–∑–≤–∞—Ç—å –∞—Ç–∞–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ `–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`",
						aWomb.Name,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			} else if is {
				at, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = replyToMsgMD(
					update.Message.MessageID,
					fmt.Sprintf(
						"–í–∞—Å —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç –≤–æ–º–±–∞—Ç `%s`. –ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∞—Ç–∞–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ `–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`",
						aWomb.Name,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			}
			if rCount, err := users.CountDocuments(ctx,
				bson.M{"name": cins(strID)}); err != nil && rCount != 0 {
				return err
			} else if rCount == 0 {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(
						"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º `%s` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
						strID),
					update.Message.Chat.ID, bot,
				)
				return err
			}
			err = users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
			if err != nil {
				return err
			}
			ID = tWomb.ID
			if ID == int64(update.Message.MessageID) {
				_, err = replyToMsg(update.Message.MessageID, "‚Äû–ì–ª–∞–≤–Ω–∞—è –±–æ—Ä—å–±–∞ –≤ –Ω–∞—à–µ–π –∂–∏–∑–Ω–∏ ‚Äî –±–æ—Ä—å–±–∞ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π‚Äú (c) –∫–∞–∫–æ–π-—Ç–æ —Ñ–∏–ª–æ—Å–æ—Ñ", update.Message.From.ID, bot)
				return err
			}
			err = users.FindOne(ctx, bson.M{"_id": ID}).Decode(&tWomb)
			if err != nil {
				return err
			}
			if tWomb.Sleep {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(
						"–í–æ–º–±–∞—Ç %s —Å–ø–∏—Ç. –ï–≥–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è",
						tWomb.Name,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			} else if is, isFrom := isInAttacks(ID, attacks); isFrom {
				at, err := getAttackByWomb(ID, true, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.To}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = replyToMsgMD(
					update.Message.MessageID, fmt.Sprintf(
						"%s —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç –≤–æ–º–±–∞—Ç–∞ %s. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ %s —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É",
						strID, aWomb.Name, strID,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			} else if is {
				at, err := getAttackByWomb(int64(update.Message.MessageID), false, attacks)
				if err != nil && err != errNoAttack {
					return err
				}
				var aWomb User
				err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&aWomb)
				if err != nil {
					return err
				}
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(
						"–í–æ–º–±–∞—Ç %s —É–∂–µ –∞—Ç–∞–∫—É–µ—Ç—Å—è %s. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ %s —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É",
						strID, aWomb.Name, strID,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			}
			var newAt = Attack{
				ID:   strconv.Itoa(int(update.Message.From.ID)) + "_" + strconv.Itoa(int(ID)),
				From: int64(update.Message.From.ID),
				To:   ID,
			}
			_, err = attacks.InsertOne(ctx, newAt)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å %s. –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞!\n–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π `–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`",
					tWomb.Name,
				),
				update.Message.Chat.ID, bot,
			)
			if err != nil {
				return err
			}
			_, err = sendMsg(
				fmt.Sprintf(
					"–£–∂–∞—Å! –í–∞—Å –∞—Ç–∞–∫—É–µ—Ç %s. –ü—Ä–µ–¥–ø—Ä–∏–º–∏—Ç–µ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –º–µ—Ä—ã: –æ—Ç–º–µ–Ω–∏—Ç–µ –∞—Ç–∞–∫—É (`–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞`) –∏–ª–∏ –ø—Ä–∏–º–∏—Ç–µ (`–∞—Ç–∞–∫–∞ –ø—Ä–∏–Ω—è—Ç—å`)",
					womb.Name,
				),
				tWomb.ID, bot,
			)
			return err
		},
	},
	{
		Name: "cancel",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–æ—Ç–º–µ–Ω–∞"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) > 1 {
				_, err = replyToMsg(update.Message.MessageID, "–∞—Ç–∞–∫–∞ –æ—Ç–º–µ–Ω–∞: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			} else if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–∫–∞–∫–∞—è –∞—Ç–∞–∫–∞, —É —Ç–µ–±—è –≤–æ–±–º–∞—Ç–∞ –Ω–µ—Ç", update.Message.Chat.ID, bot)
				return err
			}
			var at Attack
			if is, isFrom := isInAttacks(update.Message.From.ID, attacks); isFrom {
				a, err := getAttackByWomb(update.Message.From.ID, true, attacks)
				if err != nil {
					return err
				}
				at = a
			} else if is {
				a, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil {
					return err
				}
				at = a
			} else {
				_, err = replyToMsg(update.Message.MessageID, "–ê—Ç–∞–∫–∏ —Å –≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...", update.Message.Chat.ID, bot)
				return err
			}
			_, err = attacks.DeleteOne(ctx, bson.M{"_id": at.ID})
			if err != nil {
				return err
			}
			can0, err := getImgs(imgsC, "cancel_0")
			if err != nil {
				return err
			}
			can1, err := getImgs(imgsC, "cancel_1")
			if err != nil {
				return err
			}
			if at.From == int64(update.Message.From.ID) {
				_, err = replyWithPhoto(update.Message.MessageID, randImg(can0), "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∞—Ç–∞–∫—É", update.Message.Chat.ID, bot)
				if err != nil {
					return err
				}
				_, err = sendPhoto(randImg(can1),
					fmt.Sprintf(
						"–í–æ–º–±–∞—Ç %s —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å –≤–æ–º–±–∞—Ç–∞ –¥–æ–º–æ–π. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –∞—Ç–∞–∫",
						womb.Name,
					), at.To, bot,
				)
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID, randImg(can0), "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∞—Ç–∞–∫—É", update.Message.Chat.ID, bot)
			if err != nil {
				return err
			}
			_, err = sendPhoto(randImg(can1),
				fmt.Sprintf(
					"–í–æ–º–±–∞—Ç %s –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∑–∞–ª –≤–∞–º –≤ –≤–æ–π–Ω–µ. –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å –∑–∞–±—Ä–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ. –í—ã —Å–≤–æ–±–æ–¥–Ω—ã –æ—Ç –∞—Ç–∞–∫",
					womb.Name,
				), at.From, bot,
			)
			return err
		},
	},
	{
		Name: "acccept",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–ø—Ä–∏–Ω—è—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) > 2 {
				_, err = replyToMsg(update.Message.MessageID, "–ê—Ç–∞–∫–∞ –ø—Ä–∏–Ω—è—Ç—å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			} else if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç...", update.Message.Chat.ID, bot)
				return err
			}
			var at Attack
			if is, isFrom := isInAttacks(update.Message.From.ID, attacks); isFrom {
				_, err = replyToMsg(update.Message.MessageID, "–ù—É —Ç—ã —á–æ... –∞—Ç–∞–∫—É –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫–æ–≥–æ –∞—Ç–∞–∫—É—é—Ç...", update.Message.Chat.ID, bot)
				return err
			} else if is {
				a, err := getAttackByWomb(update.Message.From.ID, false, attacks)
				if err != nil {
					return err
				}
				at = a
			} else {
				_, err = replyToMsg(update.Message.MessageID, "–í–∞–º –Ω–µ—á–µ–≥–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å...", update.Message.Chat.ID, bot)
				return err
			}
			rCount, err := users.CountDocuments(ctx, bson.M{"_id": at.From})
			if err != nil {
				return err
			} else if rCount < 1 {
				_, err = replyToMsg(update.Message.MessageID,
					"–ù—É —Ç—ã —á–∞–≤–æ... –°–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ö–∞–∫ –≤–æ–æ–±—â–µ –º—ã —Ç–∞–∫–æ–µ –¥–æ–ø—É—Å—Ç–∏–ª–∏?! (–æ—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /admin)",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			var tWomb User
			err = users.FindOne(ctx, bson.M{"_id": at.From}).Decode(&tWomb)
			if err != nil {
				return err
			}
			atimgs, err := getImgs(imgsC, "attacks")
			if err != nil {
				return err
			}
			im := randImg(atimgs)
			ph1, err := sendPhoto(im, "", update.Message.Chat.ID, bot)
			if err != nil {
				return err
			}
			ph2, err := sendPhoto(im, "", tWomb.ID, bot)
			if err != nil {
				return err
			}
			war1, err := replyToMsg(ph1, "–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –≤–æ–º–±–æ–π!", update.Message.Chat.ID, bot)
			if err != nil {
				return err
			}
			war2, err := replyToMsg(ph2, fmt.Sprintf(
				"–ê–ê–ê–ê –í–ê–ô–ù–ê–ê–ê–ê–ê!!!\n –í–æ–º–±–∞—Ç %s –≤—Å—ë –∂–µ –ø—Ä–∏–Ω—è–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
				womb.Name), tWomb.ID, bot,
			)
			if err != nil {
				return err
			}
			time.Sleep(5 * time.Second)
			h1, h2 := int(womb.Health), int(tWomb.Health)
			for _, round := range []int{1, 2, 3} {
				f1 := uint32(2 + rand.Intn(int(womb.Force-1)))
				f2 := uint32(2 + rand.Intn(int(tWomb.Force-1)))
				err = editMsg(war1, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n -–í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d",
					round, h1, f1, tWomb.Name, h2), update.Message.Chat.ID, bot,
				)
				if err != nil {
					return err
				}
				err = editMsg(war2, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d",
					round, h2, f2, womb.Name, h1), tWomb.ID, bot,
				)
				if err != nil {
					return err
				}
				time.Sleep(3 * time.Second)
				h1 -= int(f2)
				h2 -= int(f1)
				err = editMsg(war1, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - üíî —É–¥–∞—Ä: %d",
					round, h1, f1, tWomb.Name, h2, f2), update.Message.Chat.ID, bot,
				)
				if err != nil {
					return err
				}
				err = editMsg(war2, fmt.Sprintf(
					"–†–ê–£–ù–î %d\n\n–í–∞—à –≤–æ–º–±–∞—Ç:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - –í–∞—à —É–¥–∞—Ä: %d\n\n%s:\n - –∑–¥–æ—Ä–æ–≤—å–µ: %d\n - üíî —É–¥–∞—Ä: %d",
					round, h2, f2, womb.Name, h1, f1), tWomb.ID, bot,
				)
				if err != nil {
					return err
				}
				time.Sleep(5 * time.Second)
				if int(h2)-int(f1) <= 5 && int(h1)-int(f2) <= 5 {
					err = editMsg(war1,
						"–í—ã –æ–±–∞ —Å–¥–æ—Ö–ª–∏!!!)\n–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –Ω–æ –∑–∞—Ç–æ –¥–∞.",
						update.Message.Chat.ID, bot,
					)
					if err != nil {
						return err
					}
					err = editMsg(war2,
						"–í—ã –æ–±–∞ —Å–¥–æ—Ö–ª–∏!!!)\n–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –Ω–æ –∑–∞—Ç–æ –¥–∞.",
						tWomb.ID, bot,
					)
					if err != nil {
						return err
					}
					time.Sleep(5 * time.Second)
					break
				} else if int(h2)-int(f1) <= 5 {
					err = editMsg(war1, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π —Å–∏–ª–µ –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), update.Message.Chat.ID, bot,
					)
					if err != nil {
						return err
					}
					err = editMsg(war2, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–∏—à–µ–Ω–∏—é —É –¥—Ä—É–≥–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), tWomb.ID, bot,
					)
					return err
					time.Sleep(3 * time.Second)
					h1c := int(womb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					f1c := int(womb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					mc := int((rand.Intn(int(womb.Health)) + 1) / 2)
					womb.Health += uint32(h1c)
					womb.Force += uint32(f1c)
					womb.Money += uint64(mc)
					womb.XP += 10
					err = editMsg(war1, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
						womb.Name, h1c, f1c, mc, womb.XP, womb.Health, womb.Force, womb.Money), update.Message.Chat.ID, bot,
					)
					if err != nil {
						return err
					}
					tWomb.Health = 5
					tWomb.Money = 50
					err = editMsg(war2, fmt.Sprintf(
						"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω—É–ª–∏–ª–æ—Å—å, –∞ –µ—â—ë —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
						womb.Name), tWomb.ID, bot,
					)
					if err != nil {
						return err
					}
					break
				} else if int(h1)-int(f2) <= 5 {
					err = editMsg(war1, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–µ–π —Å–∏–ª–µ –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), update.Message.Chat.ID, bot,
					)
					if err != nil {
						return err
					}
					err = editMsg(war2, fmt.Sprintf(
						"–í —Ä–∞—É–Ω–¥–µ %d –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–∏—à–µ–Ω–∏—é —É –¥—Ä—É–≥–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç...",
						round), tWomb.ID, bot,
					)
					if err != nil {
						return err
					}
					time.Sleep(3 * time.Second)
					h2c := int(tWomb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					f2c := int(tWomb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
					mc := int((rand.Intn(int(tWomb.Health)) + 1) / 2)
					tWomb.Health += uint32(h2c)
					tWomb.Force += uint32(f2c)
					tWomb.Money += uint64(mc)
					tWomb.XP += 10
					err = editMsg(war2,
						fmt.Sprintf(
							"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
							tWomb.Name, h2c, f2c, mc, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money,
						), tWomb.ID, bot,
					)
					if err != nil {
						return err
					}
					womb.Health = 5
					womb.Money = 50
					err = editMsg(war1,
						fmt.Sprintf(
							"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–±—Ä–æ—Å–∏–ª–æ—Å—å –¥–æ 5, –∞ –µ—â—ë —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
							tWomb.Name,
						),
						update.Message.Chat.ID, bot,
					)
					if err != nil {
						return err
					}
					break
				} else if round == 3 {
					if h1 < h2 {
						h2c := int(tWomb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						f2c := int(tWomb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						mc := int((rand.Intn(int(tWomb.Health)) + 1) / 2)
						tWomb.Health += uint32(h2c)
						tWomb.Force += uint32(f2c)
						tWomb.Money += uint64(mc)
						tWomb.XP += 10
						err = editMsg(war2,
							fmt.Sprintf(
								"–ò –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s –Ω–∞ —Ä–∞—É–Ω–¥–µ %d!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
								tWomb.Name, round, h2c, f2c, mc, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money,
							),
							tWomb.ID, bot,
						)
						if err != nil {
							return err
						}
						womb.Health = uint32(h1)
						womb.Money = 50
						err = editMsg(war1,
							fmt.Sprintf(
								"–ò –ø–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s –Ω–∞ —Ä–∞—É–Ω–¥–µ %d!\n –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å —Ç–æ–ª—å–∫–æ %d –∑–¥–æ—Ä–æ–≤—å—è –∏ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
								tWomb.Name, round, womb.Health,
							),
							update.Message.Chat.ID, bot,
						)
						if err != nil {
							return err
						}
					} else {
						h1c := int(womb.Health) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						f1c := int(womb.Force) / ((5 + rand.Intn(5)) / (rand.Intn(1) + 1))
						mc := int((rand.Intn(int(womb.Health)) + 1) / 2)
						womb.Health += uint32(h1c)
						womb.Force += uint32(f1c)
						womb.Money += uint64(mc)
						womb.XP += 10
						err = editMsg(war1,
							fmt.Sprintf(
								"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 XP, %d —Å–∏–ª—ã, %d –∑–¥–æ—Ä–æ–≤—å—è –∏ %d —à–∏—à–µ–π, —Ç–µ–ø–µ—Ä—å –∏—Ö —É –í–∞—Å %d, %d, %d –∏ %d —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ",
								womb.Name, h1c, f1c, mc, womb.XP, womb.Health, womb.Force, womb.Money,
							),
							update.Message.Chat.ID, bot,
						)
						if err != nil {
							return err
						}
						tWomb.Health = 5
						tWomb.Money = 50
						err = editMsg(war2,
							fmt.Sprintf(
								"–ü–æ–±–µ–¥–∏–ª –≤–æ–º–±–∞—Ç %s!!!\n–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –æ–±–Ω—É–ª–∏–ª–æ—Å—å, –∞ –µ—â—ë —É –≤–∞—Å —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ 50 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ :(",
								womb.Name,
							),
							tWomb.ID, bot,
						)
						if err != nil {
							return err
						}
					}
				}
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			err = docUpd(tWomb, bson.M{"_id": tWomb.ID}, users)
			if err != nil {
				return err
			}
			_, err = attacks.DeleteOne(ctx, bson.M{"_id": at.ID})
			return err
		},
	},
}

var bankCommands = []command{
	{
		Name: "wombank",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–≤–æ–º–±–∞–Ω–∫"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsg(update.Message.MessageID, strings.Repeat("–≤–æ–º–±–∞–Ω–∫ ", 42), update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "new",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–Ω–∞—á–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			isBanked, err := getIsBanked(update.Message.From.ID)
			if err != nil {
				return err
			}
			if len(args) != 2 {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –Ω–∞—á–∞—Ç—å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			} else if isBanked {
				_, err = replyToMsg(update.Message.MessageID, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–æ–º–±–∞–Ω–∫–µ...", update.Message.Chat.ID, bot)
				return err
			} else if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –≤–æ–º–±–∞—Ç–∞–º! –£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID, bot)
				return err
			}
			b := Banked{
				ID:    update.Message.From.ID,
				Money: 15,
			}
			_, err = bank.InsertOne(ctx, b)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				"–í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–æ–º–±–∞–Ω–∫–µ! –í–∞–º –Ω–∞ –≤–æ–º–±–æ—Å—á—ë—Ç –¥–æ–±–∞–≤–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 15 —à–∏—à–µ–π",
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "put",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–ø–æ–ª–æ–∂–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			isBanked, err := getIsBanked(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID, bot)
				return err
			} else if len(args) != 3 {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			}
			var num uint64
			if num, err = strconv.ParseUint(args[2], 10, 64); err != nil {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —à–∏—à–µ–π –¥–æ 2^64", update.Message.Chat.ID, bot)
				return err
			}
			if womb.Money < num+1 {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏", update.Message.Chat.ID, bot)
				return err
			} else if !isBanked {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–í–æ–º–±–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å: —É –≤–∞—Å –Ω–µ—Ç —è—á–µ–π–∫–∏ –≤ –±–∞–Ω–∫–µ! –ó–∞–≤–µ–¥–∏—Ç–µ –µ—ë —á–µ—Ä–µ–∑ `–≤–æ–º–±–∞–Ω–∫ –Ω–∞—á–∞—Ç—å`",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if num == 0 {
				_, err = replyToMsg(update.Message.MessageID, "–ù—É –∏ –∑–∞—á–µ–º?)", update.Message.Chat.ID, bot)
				return err
			}
			var b Banked
			err = bank.FindOne(ctx, wombFilter(womb)).Decode(&b)
			if err != nil {
				return err
			}
			womb.Money -= num
			b.Money += num
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			err = docUpd(b, wombFilter(womb), bank)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í–∞—à –≤–æ–º–±–æ—Å—á—ë—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %d —à! –í–æ–º–±–æ—Å—á—ë—Ç: %d —à; –ü—Ä–∏ —Å–µ–±–µ: %d —à",
					num, b.Money, womb.Money,
				),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "take",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "—Å–Ω—è—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			isBanked, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(update.Message.MessageID, "–£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID, bot)
				return err
			} else if !isBanked {
				_, err = replyToMsg(update.Message.MessageID, "—É —Ç–µ–±—è –Ω–µ—Ç —è—á–µ–π–∫–∏ –≤ –≤–æ–º–±–∞–Ω–∫–µ", update.Message.Chat.ID, bot)
				return err
			} else if len(args) != 3 {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å–Ω—è—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			}
			var b Banked
			err = bank.FindOne(ctx, wombFilter(womb)).Decode(&b)
			if err != nil {
				return err
			}
			var num uint64
			if num, err = strconv.ParseUint(args[2], 10, 64); err != nil {
				if num == 0 {
					_, err = replyToMsg(update.Message.MessageID, "–ù—É –∏ –∑–∞—á–µ–º?", update.Message.Chat.ID, bot)
					return err
				}
			} else if args[2] == "–≤—Å—ë" || args[2] == "–≤—Å–µ" {
				if b.Money == 0 {
					_, err = replyToMsg(update.Message.MessageID, "–£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É 0 —à–∏—à–µ–π. –ó–∞—á–µ–º?", update.Message.Chat.ID, bot)
					return err
				}
				num = b.Money
			} else {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å–Ω—è—Ç—å: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —à–∏—à–µ–π –¥–æ 2^64", update.Message.Chat.ID, bot)
				return err
			}
			if b.Money < num {
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å–Ω—è—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π –Ω–∞ –≤–æ–º–±–æ—Å—á–µ—Ç—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏", update.Message.Chat.ID, bot)
				return err
			}
			b.Money -= num
			womb.Money += num
			err = docUpd(b, wombFilter(womb), bank)
			if err != nil {
				return err
			}
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í—ã —Å–Ω—è–ª–∏ %d —à! –í–æ–º–±–æ—Å—á—ë—Ç: %d —à; –ü—Ä–∏ —Å–µ–±–µ: %d —à",
					num, b.Money, womb.Money,
				),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "status",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "—Å—Ç–∞—Ç—É—Å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				fil   bson.M
				tWomb User
				err   error
			)
			switch len(args) {
			case 2:
				isInUsers, err := getIsInUsers(update.Message.From.ID)
				if err != nil {
					return err
				}
				isBanked, err := getIsBanked(update.Message.From.ID)
				if err != nil {
					return err
				}
				if !isInUsers {
					_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ –≤–æ–º–±–∞—Ç–∞–º! –£ —Ç–µ–±—è –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID, bot)
					return err
				} else if !isBanked {
					_, err = replyToMsg(update.Message.MessageID, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–º–±–æ—Å—á—ë—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç", update.Message.Chat.ID, bot)
					return err
				}
				fil = bson.M{"_id": update.Message.From.ID}
				tWomb = womb
			case 3:
				name := args[2]
				if !isValidName(name) {
					_, err = replyToMsg(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è", update.Message.Chat.ID, bot)
					return err
				} else if rCount, err := users.CountDocuments(
					ctx, bson.M{"name": cins(name)}); err != nil {
					return err
				} else if rCount == 0 {
					_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", name), update.Message.Chat.ID, bot)
					return err
				}
				err = users.FindOne(ctx, bson.M{"name": cins(name)}).Decode(&tWomb)
				if err != nil {
					return err
				}
				fil = bson.M{"_id": tWomb.ID}
				bCount, err := bank.CountDocuments(ctx, fil)
				if err != nil {
					return err
				}
				if bCount == 0 {
					_, err = replyToMsg(
						update.Message.MessageID,
						"–û—à–∏–±–∫–∞: –≤–æ–º–±–∞—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –≤–æ–º–±–∞–Ω–∫–µ",
						update.Message.Chat.ID, bot,
					)
					return err
				}
			default:
				_, err = replyToMsg(update.Message.MessageID, "–í–æ–º–±–∞–Ω–∫ —Å—Ç–∞—Ç—É—Å: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
				return err
			}
			var b Banked
			err = bank.FindOne(ctx, fil).Decode(&b)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				fmt.Sprintf(
					"–í–æ–º–±–∞–Ω–∫ –≤–æ–º–±–∞—Ç–∞ %s:\n–ù–∞ —Å—á–µ—Ç—É: %d\n–ü—Ä–∏ —Å–µ–±–µ: %d",
					tWomb.Name, b.Money, tWomb.Money,
				),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
}

var clanCommands = []command{
	{
		Name: "clan",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–∫–ª–∞–Ω"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsg(update.Message.MessageID, strings.Repeat("–∞—Ç–∞–∫–∞ ", 42), update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "new",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "—Å–æ–∑–¥–∞—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err := replyToMsg(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç",
					update.Message.Chat.ID,
					bot,
				)
				return err
			} else if len(args) < 4 {
				_, err := replyToMsg(
					update.Message.MessageID,
					"–ö–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω —Å–æ–∑–¥–∞—Ç—å "+
						"[—Ç–µ–≥ (3-4 –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã)] [–∏–º—è (–º–æ–∂–Ω–æ –ø—Ä–æ–±–µ–ª—ã)]",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if womb.Money < 25000 {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(
						"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π. –¢—Ä–µ–±—É–µ—Ç—Å—è 25'000 —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞ (–£ –≤–∞—Å –∏—Ö –ø—Ä–∏ —Å–µ–±–µ %d)",
						womb.Money,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			} else if l := len([]rune(args[2])); !(l >= 3 && l <= 5) {
				_, err = replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç—ç–≥!", update.Message.Chat.ID, bot)
				return err
			} else if !isValidTag(args[2]) {
				_, err = replyToMsg(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω—ã–π —Ç—ç–≥(", update.Message.Chat.ID, bot)
				return err
			} else if name := strings.Join(args[3:], " "); len([]rune(name)) > 64 {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è! –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 64 —Å–∏–º–≤–æ–ª–æ–≤",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if len([]rune(name)) < 2 {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è! –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			tag, name := strings.ToLower(args[2]), strings.Join(args[3:], " ")
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"_id": cins(tag)}); err != nil {
				return err
			} else if rCount != 0 {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(
						"–û—à–∏–±–∫–∞: –∫–ª–∞–Ω —Å —Ç–µ–≥–æ–º `%s` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
						tag,
					),
					update.Message.Chat.ID, bot,
				)
				return err
			}
			if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.From.ID}); err != nil {
				return err
			} else if rCount != 0 {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –ù–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–Ω –≤—ã–π—Ç–∏`, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			womb.Money -= 25000
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			nclan := Clan{
				Tag:     strings.ToUpper(tag),
				Name:    name,
				Money:   100,
				Leader:  update.Message.From.ID,
				Banker:  update.Message.From.ID,
				Members: []int64{update.Message.From.ID},
				Banned:  []int64{},
				GroupID: update.Message.Chat.ID,
				Settings: ClanSettings{
					AviableToJoin: true,
				},
			}
			_, err = clans.InsertOne(ctx, &nclan)
			if err != nil {
				return err
			}
			if hasTitle(5, womb.Titles) {
				newTitles := []uint16{}
				for _, id := range womb.Titles {
					if id == 5 {
						continue
					}
					newTitles = append(newTitles, id)
				}
				womb.Titles = newTitles
				err = docUpd(womb, wombFilter(womb), users)
				if err != nil {
					return err
				}
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				fmt.Sprintf(
					"–ö–ª–∞–Ω `%s` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ! –£ –≤–∞—Å –≤–∑—è–ª–∏ 25'000 —à–∏—à–µ–π",
					name,
				),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "join",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–≤—Å—Ç—É–ø–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–ö–ª–∞–Ω—ã - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –í–æ–º–±–∞—Ç–∞ —É —Ç–µ–±—è –Ω–µ—Ç.",
					update.Message.Chat.ID,
					bot,
				)
				return err
			} else if len(args) != 3 {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–ö–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–ª–∏ –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤! –°–∏–Ω—Ç–∞–∫—Å–∏—Å: –∫–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å [—Ç—ç–≥ –∫–ª–∞–Ω–∞]",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if womb.Money < 1000 {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–ö–ª–∞–Ω –≤—Å—Ç—É–ø–∏—Ç—å: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏—à–µ–π (–Ω–∞–¥–æ –º–∏–Ω–∏–º—É–º 1000 —à)",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"members": update.Message.MessageID}); err != nil {
				return err
			} else if rCount != 0 {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. –ù–∞–ø–∏—à–∏—Ç–µ `–∫–ª–∞–Ω –≤—ã–π—Ç–∏`, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ",
					update.Message.Chat.ID, bot,
				)
				return err
			} else if l := len([]rune(args[2])); !(l >= 3 && l <= 5) {
				_, err = replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–≥ :)", update.Message.Chat.ID, bot)
				return err
			} else if !isValidTag(args[2]) {
				_, err = replyToMsg(update.Message.MessageID, "–¢–µ–≥ –Ω–µ–ª–≥–∞–ª—å–Ω—ã–π(", update.Message.Chat.ID, bot)
				return err
			} else if rCount, err := clans.CountDocuments(ctx,
				bson.M{"_id": strings.ToUpper(args[2])}); err != nil {
				return err
			} else if rCount == 0 {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(
						"–û—à–∏–±–∫–∞: –∫–ª–∞–Ω–∞ —Å —Ç–µ–≥–æ–º `%s` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
						args[2],
					),
					update.Message.Chat.ID, bot,
				)
				return err
			}
			var jClan Clan
			err = clans.FindOne(ctx, bson.M{"_id": strings.ToUpper(args[2])}).Decode(&jClan)
			if err != nil {
				return err
			}
			if len(jClan.Members) >= 7 {
				_, err = replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: –≤ –∫–ª–∞–Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ :(", update.Message.Chat.ID, bot)
				return err
			} else if !(jClan.Settings.AviableToJoin) {
				_, err = replyToMsg(update.Message.MessageID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–∞–Ω –∑–∞–∫—Ä—ã—Ç –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è", update.Message.Chat.ID, bot)
				return err
			} else if update.Message.Chat.ID != jClan.GroupID {
				_, err = replyToMsg(
					update.Message.MessageID,
					"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∫–ª–∞–Ω–∞",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			for _, id := range jClan.Banned {
				if id == womb.ID {
					_, err = replyToMsg(update.Message.MessageID, "–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!!1\n –≤ —ç—Ç–æ–º –∫–ª–∞–Ω–µ(", update.Message.Chat.ID, bot)
					return err
				}
			}
			womb.Money -= 1000
			err = docUpd(womb, wombFilter(womb), users)
			if err != nil {
				return err
			}
			jClan.Members = append(jClan.Members, update.Message.From.ID)
			err = docUpd(jClan, bson.M{"_id": strings.ToUpper(args[2])}, clans)
			if err != nil {
				return err
			}
			_, err = replyToMsg(
				update.Message.MessageID,
				"–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å! –£ –≤–∞—Å –≤–∑—è–ª–∏ 1000 —à–∏—à–µ–π",
				update.Message.Chat.ID,
				bot,
			)
			if err != nil {
				return err
			}
			_, err = sendMsg(
				fmt.Sprintf(
					"–í –≤–∞—à –∫–ª–∞–Ω –≤—Å—Ç—É–ø–∏–ª –≤–æ–º–±–∞—Ç `%s`",
					womb.Name,
				),
				jClan.Leader, bot,
			)
			return err
		},
	},
	{
		Name: "set_user",
		Is: func(args []string, update tg.Update) bool {
			return strings.ToLower(args[0]) == "–Ω–∞–∑–Ω–∞—á–∏—Ç—å"
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if len(args) == 2 {
				_, err := replyToMsg(update.Message.MessageID, "–∫–æ–Ω–µ—á–Ω–æ", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			switch args[2] {
			case "–Ω–∞–∑–Ω–∞—á–∏—Ç—å":
				_, err = replyToMsg(update.Message.MessageID, strings.Repeat("–Ω–∞–∑–Ω–∞—á–∏—Ç—å", 42), update.Message.Chat.ID, bot)
				return err
			case "–ª–∏–¥–µ—Ä–∞":
				fallthrough
			case "–ª–∏–¥–µ—Ä–æ–º":
				fallthrough
			case "–ª–∏–¥–µ—Ä":
				_, err = replyToMsg(update.Message.MessageID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"–∫–ª–∞–Ω –ø–µ—Ä–µ–¥–∞—Ç—å [–∏–º—è]\" –≤–º–µ—Å—Ç–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã", update.Message.Chat.ID, bot)
				return err
			case "–∫–∞–∑–Ω–∞—á–µ—è":
				fallthrough
			case "–∫–∞–∑–Ω–∞—á–µ–µ–º":
				fallthrough
			case "–∫–∞–∑–Ω–∞—á–µ–π":
				if len(args) != 4 {
					_, err = replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–ª–∏ –º–∞–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤", update.Message.Chat.ID, bot)
					return err
				} else if !isInUsers {
					_, err = replyToMsg(
						update.Message.MessageID,
						"–ö–ª–∞–Ω—ã ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –≤–æ–º–±–∞—Ç–æ–≤. –£ —Ç–µ–±—è –≤–æ–º–±–∞—Ç–∞ –Ω–µ—Ç.",
						update.Message.Chat.ID, bot,
					)
					return err
				}
				if c, err := clans.CountDocuments(ctx, bson.M{"leader": update.Message.From.ID}); err != nil {
					return err
				} else if c == 0 {
					_, err = replyToMsg(
						update.Message.MessageID,
						"–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–ª–∞–Ω–µ –ª–∏–±–æ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏–¥–µ—Ä–æ–º –∫–ª–∞–Ω–∞",
						update.Message.Chat.ID, bot,
					)
					return err
				}
				var sClan Clan
				if err := clans.FindOne(ctx, bson.M{"leader": update.Message.From.ID}).Decode(&sClan); err != nil {
					return err
				}
				lbid := sClan.Banker
				name := args[3]
				if c, err := users.CountDocuments(ctx, bson.M{"name": cins(name)}); err != nil {
					return err
				} else if c == 0 {
					_, err = replyToMsg(
						update.Message.MessageID,
						"–í–æ–º–±–∞—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
						update.Message.Chat.ID, bot,
					)
					return err
				}
				var (
					nb User
				)
				if err := users.FindOne(ctx, bson.M{"name": cins(name)}).Decode(&nb); err != nil {
					return err
				}
				var is bool
				for _, id := range sClan.Members {
					if id == nb.ID {
						is = true
						break
					}
				}
				if !is {
					_, err = replyToMsg(update.Message.MessageID, "–î–∞–Ω–Ω—ã–π –≤–æ–±–∞—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –í–∞—à–µ–º –∫–ª–∞–Ω–µ", update.Message.Chat.ID, bot)
					return err
				}
				sClan.Banker = nb.ID
				if err := docUpd(sClan, bson.M{"_id": sClan.Tag}, clans); err != nil {
					return err
				}
				_, err = replyToMsg(
					update.Message.MessageID,
					"–ö–∞–∑–Ω–∞—á–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å —ç—Ç–æ "+nb.Name,
					update.Message.Chat.ID, bot,
				)
				if err != nil {
					return err
				}
				if nb.ID != update.Message.From.ID {
					_, err = sendMsg("–í—ã —Å—Ç–∞–ª–∏ –∫–∞–∑–Ω–∞—á–µ–µ–º –≤ –∫–ª–∞–Ω–µ `"+sClan.Name+"` ["+sClan.Tag+"]", nb.ID, bot)
					if err != nil {
						return err
					}
				}
				if lbid != update.Message.From.ID && lbid != 0 {
					_, err = sendMsg("–í—ã –∫–∞–∑–Ω–∞—á–µ–π... —Ç–µ–ø–µ—Ä—å –±—ã–≤—à–∏–π. (–≤ –∫–ª–∞–Ω–µ `"+sClan.Name+"` ["+sClan.Tag+"])", lbid, bot)
					return err
				}
				return nil
			default:
				_, err = replyToMsg(update.Message.MessageID, "–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —Ä–æ–ª–∏ –≤ –∫–ª–∞–Ω–µ(", update.Message.Chat.ID, bot)
				return err
			}
		},
	},
}
