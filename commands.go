package main

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.mongodb.org/mongo-driver/bson"
	"strconv"
	"strings"
	"time"
)

type command struct {
	Name   string
	Is     func([]string, tg.Update) bool
	Action func([]string, tg.Update, User) error
}

var commands = []command{
	{
		Name: "start",
		Is: func(args []string, update tg.Update) bool {
			if strings.ToLower(args[0]) == "/start@"+bot.Self.UserName ||
				(!isGroup(update.Message) && isInList(args[0], []string{"/start", "/—Å—Ç–∞—Ä—Ç"})) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			const longAnswer = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ\n ‚Äî –ó–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞: `–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞`\n ‚Äî –ü–æ–º–æ—â—å: https://telegra.ph/Pomoshch-10-28 (/help)\n ‚Äî –ö–∞–Ω–∞–ª –±–æ—Ç–∞, –≥–¥–µ –µ—Å—Ç—å –Ω—É–∂–Ω–∞—è –∏–Ω—Ñ–∞: @wombatobot_channel\n –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!"
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ((–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–º–∞–Ω–¥ –≤–æ–º–±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª—Å))", update.Message.Chat.ID, bot)
				return err
			}
			_, err := replyToMsg(update.Message.MessageID, longAnswer, update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "help",
		Is: func(args []string, update tg.Update) bool {
			if isInList(args[0], []string{"/help@" + bot.Self.UserName, "–∫–æ–º–∞–Ω–¥—ã", "/—Ö–µ–ª–ø"}) ||
				(!isGroup(update.Message) && strings.ToLower(args[0]) == "/help") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsg(update.Message.MessageID, "https://telegra.ph/Pomoshch-10-28", update.Message.Chat.ID, bot)
			return err
		},
	},
	{
		Name: "about_bot",
		Is: func(args []string, update tg.Update) bool {
			if len(args) != 2 {
				return false
			} else if strings.ToLower(args[0]+" "+args[1]) == "–æ –≤–æ–º–±–∞—Ç–µ" {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			_, err := replyToMsgMD(update.Message.MessageID,
				"https://telegra.ph/O-vombote-10-29\n**–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ–º–±–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–æ –≤–æ–º–±–∞—Ç–µ`**",
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "about_wombat",
		Is: func(args []string, update tg.Update) bool {
			if strings.HasPrefix(strings.Join(args, " "), "–æ –≤–æ–º–±–∞—Ç–µ") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			var strID string
			if len(args) == 3 {
				strID = strings.TrimSpace(strings.Join(args[2:], " "))
			} else if len(args) > 3 {
				_, err := replyToMsg(update.Message.MessageID, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!", update.Message.Chat.ID, bot)
				if err != nil {
					return err
				}
			}
			var (
				tWomb User
			)
			if strID == "" {
				if update.Message.ReplyToMessage != nil {
					tWomb.ID = update.Message.ReplyToMessage.From.ID
					if c, err := users.CountDocuments(ctx, bson.M{"_id": tWomb.ID}); err != nil {
						return err
					} else if c == 0 {
						replyToMsg(update.Message.MessageID,
							"–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –≤–æ–º–±–∞—Ç–æ–º. (–Ω–∞–ø–∏—â–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ —Å–µ–±–µ –∏ —Å –æ—Ç–≤–µ—Ç–æ–º)",
							update.Message.Chat.ID, bot,
						)
						return nil
					}
					if err := users.FindOne(ctx, bson.M{"_id": tWomb.ID}).Decode(&tWomb); err != nil {
						return err
					}
				} else if isInUsers {
					tWomb = womb
				} else {
					replyToMsg(update.Message.MessageID, "–£ –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞", update.Message.Chat.ID, bot)
					return nil
				}
			} else if len([]rune(strID)) > 64 {
				replyToMsg(update.Message.MessageID, "–û—à–∏–±–∫–∞: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è", update.Message.Chat.ID, bot)
				return nil
			} else if !isValidName(strID) {
				replyToMsg(update.Message.MessageID, "–ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ –∏–º—è!", update.Message.Chat.ID, bot)
				return nil
			} else if rCount, err :=
				users.CountDocuments(ctx, bson.M{"name": cins(strID)}); err == nil && rCount != 0 {
				err := users.FindOne(ctx, bson.M{"name": cins(strID)}).Decode(&tWomb)
				if err != nil {
					return err
				}
			} else if err != nil {
				return err
			} else {
				replyToMsg(update.Message.MessageID, fmt.Sprintf("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º %s –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", strID), update.Message.Chat.ID, bot)
				return nil
			}
			var clname string
			if c, err := clans.CountDocuments(ctx, bson.M{"members": tWomb.ID}); err != nil {
				return err
			} else if c != 0 {
				var uClan Clan
				if err := clans.FindOne(ctx, bson.M{"members": tWomb.ID}).Decode(&uClan); err != nil {
					return err
				}
				clname = "\\[" + uClan.Tag + "]"
			}
			strTitles := ""
			tCount := len(tWomb.Titles)
			if tCount != 0 {
				for _, id := range tWomb.Titles {
					rCount, err := titlesC.CountDocuments(ctx, bson.M{"_id": id})
					if err != nil {
						return err
					}
					if rCount == 0 {
						strTitles += fmt.Sprintf("–û—à–∏–±–∫–∞: —Ç–∏—Ç—É–ª–∞ —Å ID %d –Ω–µ—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /admin) |", id)
						continue
					}
					elem := Title{}
					err = titlesC.FindOne(ctx, bson.M{"_id": id}).Decode(&elem)
					if err != nil {
						return err
					}
					strTitles += fmt.Sprintf("%s (ID: %d) | ", elem.Name, id)
				}
				strTitles = strings.TrimSuffix(strTitles, " | ")
			} else {
				strTitles = "–Ω–µ—Ç"
			}
			var sl string = "–ù–µ —Å–ø–∏—Ç"
			if tWomb.Sleep {
				sl = "–°–ø–∏—Ç"
			} else {
				sl = "–ù–µ —Å–ø–∏—Ç"
			}
			abimg, err := getImgs(imgsC, "about")
			if err != nil {
				return err
			}
			_, err = replyWithPhotoMD(update.Message.MessageID, randImg(abimg), fmt.Sprintf(
				"–í–æ–º–±–∞—Ç `%s` %s\n–¢–∏—Ç—É–ª—ã: %s\n üëÅ %d XP\n ‚ù§ %d –∑–¥–æ—Ä–æ–≤—å—è\n ‚ö° %d –º–æ—â–∏\n üí∞ %d —à–∏—à–µ–π –ø—Ä–∏ —Å–µ–±–µ\n üí§ %s",
				tWomb.Name, clname, strTitles, tWomb.XP, tWomb.Health, tWomb.Force, tWomb.Money, sl),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "greeting_for_new_chat_members",
		Is: func(args []string, update tg.Update) bool {
			if update.Message.NewChatMembers != nil && len(update.Message.NewChatMembers) != 0 {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			isInUsers, err := getIsInUsers(update.Message.NewChatMembers[0].ID)
			if err != nil {
				return err
			}
			if update.Message.NewChatMembers[0].ID == bot.Self.ID {
				_, err = replyToMsg(
					update.Message.MessageID,
					fmt.Sprintf(randomString(
						"–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç —á–∞—Ç!1!1! /help@%s –¥–ª—è –∏–Ω—Ñ—ã –æ –∫–æ–º–º–∞–Ω–¥–æ—á–∫–∞—Ö :–∑",
						"–¥–∞—Ä–æ–≤–∞ –≤–æ–º–±—ç—Ç—ã –∏ –≤–æ–º–±—è—Ç–∞. —è –±–æ—Ç—è—Ä–∞. /help@%s -- –∏–Ω—Ñ–∞",
						"–≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç —è –±–æ—Ç /help@%s –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π",
						"–∫–æ—Ä–æ—á–µ, —è –±–æ—Ç —Å –≤–æ–º–±–∞—Ç–∞–º–∏. –ø–æ–¥—Ä–æ–±–Ω–µ–µ: /help@%s",
					), bot.Self.UserName),
					update.Message.Chat.ID,
					bot,
				)
			} else if isInUsers {
				_, err = replyToMsgMDNL(update.Message.MessageID,
					"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø [–≤–æ–º–±–æ—Ç](t.me/wombatobot) ‚Äî –±–æ—Ç —Å –≤–æ–º–±–∞—Ç–∞–º–∏. "+
						"–†–µ–∫–æ–º–µ–Ω–¥—É—é –í–∞–º –∑–∞–≤–µ—Å—Ç–∏ –≤–æ–º–±–∞—Ç–∞, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å "+
						"–≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (^.^)",
					update.Message.Chat.ID, bot,
				)
			} else {
				_, err = replyToMsg(update.Message.MessageID, fmt.Sprintf("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–æ–º–±–∞—Ç `%s`!", womb.Name), update.Message.Chat.ID, bot)
			}
			return err
		},
	},
	{
		Name: "support",
		Is: func(args []string, update tg.Update) bool {
			txt := strings.ToLower(strings.Join(args, " "))
			if isPrefixInList(txt, []string{"–æ–¥–º–µ–Ω!", "/admin@" + bot.Self.UserName, "/support@" + bot.Self.UserName, "/bug@" + bot.Self.UserName}) {
				return true
			} else if !isGroup(update.Message) && isPrefixInList(txt, []string{"/admin", "/support", "/bug", "/–∞–¥–º–∏–Ω", "/—Å–∞–ø", "/—Å–∞–ø–ø–æ—Ä—Ç", "/–±–∞–≥"}) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			var (
				isGr           = "–∏–∑ —á–∞—Ç–∞ "
				isInUsers, err = getIsInUsers(update.Message.From.ID)
				txt            = strings.ToLower(strings.Join(args, " "))
			)
			if err != nil {
				return err
			}
			if isGroup(update.Message) {
				isGr = "–∏–∑ –≥—Ä—É–ø–ø—ã "
			}
			if len(args) < 2 {
				if update.Message.ReplyToMessage == nil {
					replyToMsg(update.Message.MessageID, "–¢—ã —á–∞–≤–æ... –≥–¥–µ –ø–∏—Å—å–º–æ??", update.Message.Chat.ID, bot)
					return nil
				}
				r := update.Message.ReplyToMessage
				_, serr := sendMsg(
					fmt.Sprintf(
						"%d %d \n–ø–∏—Å—å–º–æ %s(%d @%s) –æ—Ç %d (@%s isInUsers: %v) (mt: %s bt: %s), –æ—Ç–≤–µ—á–∞—é—â–µ–µ –Ω–∞: \n%s\n(id:%d fr:%d @%s) (mt:%s, bt: %s)",
						update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName,
						update.Message.From.ID, update.Message.From.UserName, isInUsers,
						time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
						r.Text, r.MessageID, r.From.ID, r.From.UserName,
						time.Unix(int64(r.Date), 0).String(), time.Now().String(),
					),
					conf.SupChatID, bot,
				)
				_, err = replyToMsg(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID, bot)
				if err != nil {
					if serr != nil {
						return fmt.Errorf("Two errors: %v and %v", serr, err)
					}
					return err
				}
			} else {
				if update.Message.ReplyToMessage == nil {
					msg := strings.Join(args[1:], " ")
					_, serr := sendMsg(
						fmt.Sprintf(
							"%d %d \n–ø–∏—Å—å–º–æ %s%d (@%s) –æ—Ç %d (@%s isInUsers: %v): \n%s\n(mt: %s bt:%s)",
							update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName, update.Message.From.ID,
							update.Message.From.UserName, isInUsers, msg,
							time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
						),
						conf.SupChatID, bot,
					)
					_, err := replyToMsg(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID, bot)
					if err != nil {
						if serr != nil {
							return fmt.Errorf("Two errors: %v and %v", serr, err)
						}
						return err
					}
				} else {
					r := update.Message.ReplyToMessage
					_, serr := sendMsg(
						fmt.Sprintf(
							"%d %d \n–ø–∏—Å—å–º–æ %s(%d @%s) –æ—Ç %d (@%s isInUsers: %v), –æ—Ç–≤–µ—á–∞—é—â–µ–µ –Ω–∞: \n%s\n(id:%d fr:%d @%s) (mt: %s bt: %s) —Å —Ç–µ–∫—Å—Ç–æ–º:\n%s\n(mt: %s bt: %s)",
							update.Message.MessageID, update.Message.Chat.ID, isGr, update.Message.Chat.ID, update.Message.Chat.UserName,
							update.Message.From.ID, update.Message.From.UserName,
							isInUsers, r.Text, r.MessageID, r.From.ID, r.From.UserName,
							time.Unix(int64(update.Message.Date), 0).String(), time.Now().String(),
							txt,
							time.Unix(int64(r.Date), 0).String(), time.Now().String(),
						), conf.SupChatID, bot,
					)
					_, err := replyToMsg(update.Message.MessageID, "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°–∫–æ—Ä–æ (–∏–ª–∏ –Ω–µ—Ç) –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç", update.Message.Chat.ID, bot)
					if err != nil {
						if serr != nil {
							return fmt.Errorf("Two errors: %v and %v", serr, err)
						}
						return err
					}
				}
			}
			return nil
		},
	},
	{
		Name: "take_wombat",
		Is: func(args []string, update tg.Update) bool {
			if isInList(strings.ToLower(strings.Join(args, " ")),
				[]string{"–≤–∑—è—Ç—å –≤–æ–º–±–∞—Ç–∞", "–∫—É–ø–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ —É –∞—Ä–∞–±–æ–≤", "—Ö–æ—á—É –≤–æ–º–±–∞—Ç–∞"},
			) {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if isInUsers {
				_, err := replyToMsg(update.Message.MessageID,
					"–£ —Ç–µ–±—è –∫–∞–∫ –±—ã —É–∂–µ –µ—Å—Ç—å –≤–æ–º–±–∞—Ç –ª–æ–ª–∫–µ–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, —Ç–æ –Ω–∞–ø–∏—à–∏ `–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫`",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			newWomb := User{
				ID:     update.Message.From.ID,
				Name:   "–í–æ–º–±–∞—Ç_" + strconv.Itoa(int(update.Message.From.ID)),
				XP:     0,
				Health: 5,
				Force:  2,
				Money:  10,
				Titles: []uint16{},
				Sleep:  false,
			}
			_, err = users.InsertOne(ctx, &newWomb)
			if err != nil {
				return err
			}
			newimg, err := getImgs(imgsC, "new")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID,
				randImg(newimg), fmt.Sprintf(
					"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–º–±–∞—Ç! –ï–º—É –≤—ã–¥–∞–ª–æ—Å—å –∏–º—è `%s`. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –∏–º—è –∫–æ–º–∞–Ω–¥–æ–π `–ü–æ–º–µ–Ω—è—Ç—å –∏–º—è [–∏–º—è]` –∑–∞ 3 –º–æ–Ω–µ—Ç—ã",
					newWomb.Name),
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "schweine",
		Is: func(args []string, update tg.Update) bool {
			if strings.HasPrefix(strings.ToLower(args[0]), "—Ö—Ä—é") {
				return true
			}
			return false
		},
		Action: func(args []string, update tg.Update, womb User) error {
			schweineImgs, err := getImgs(imgsC, "schweine")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID,
				randImg(schweineImgs),
				"–ê–•–¢–£–ù–ì –®–í–ê–ô–ù–ï –£–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò–ò",
				update.Message.Chat.ID, bot,
			)
			return err
		},
	},
	{
		Name: "delete_wombat",
		Is: func(args []string, update tg.Update) bool {
			return isInList(
				strings.ToLower(strings.Join(args, " ")),
				[]string{
					"–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —à–∞—à–ª—ã–∫", "–ø—Ä–æ–¥–∞—Ç—å –≤–æ–º–±–∞—Ç–∞ –∞—Ä–∞–±–∞–º",
					"—Å–ª–∏—Ç—å –≤–æ–º–±–∞—Ç–∞ –≤ —É–Ω–∏—Ç–∞–∑", "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å –≤–æ–º–±–∞—Ç–∞",
				},
			)
		},
		Action: func(args []string, update tg.Update, womb User) error {
			if isGroup(update.Message) {
				_, err := replyToMsg(update.Message.MessageID, "–¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–º–± —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞) —Ç–æ–ª—å–∫–æ –≤ –ª—Å)", update.Message.Chat.ID, bot)
				return err
			}
			isInUsers, err := getIsInUsers(update.Message.From.ID)
			if err != nil {
				return err
			}
			if !isInUsers {
				_, err := replyToMsg(update.Message.MessageID, "–ù–æ —É –≤–∞—Å –Ω–µ—Ç –≤–æ–º–±–∞—Ç–∞...", update.Message.Chat.ID, bot)
				return err
			}
			if hasTitle(1, womb.Titles) {
				_, err := replyToMsg(update.Message.MessageID,
					"–û—à–∏–±–∫–∞: –≤—ã –ª–∏—à–µ–Ω—ã –ø—Ä–∞–≤–∞ —É–Ω–∏—á—Ç–æ–∂–∞—Ç—å –≤–æ–º–±–∞—Ç–∞; –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /admin –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–π",
					update.Message.Chat.ID, bot,
				)
				return err
			}
			_, err = users.DeleteOne(ctx, wombFilter(womb))
			if err != nil {
				return err
			}
			kill, err := getImgs(imgsC, "kill")
			if err != nil {
				return err
			}
			_, err = replyWithPhoto(update.Message.MessageID,
				randImg(kill), "–í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤–æ–º–±–∞—Ç–∞ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ 1 —à—Ç—É–∫–∞. –í—ã - –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å—É—â–µ—Å—Ç–≤–æ", update.Message.Chat.ID,
				bot,
			)
			return err
		},
	},
}
